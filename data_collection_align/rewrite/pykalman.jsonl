{"task_id": "pykalman_3", "reponame": "pykalman", "testpath": "pykalman/tests/test_standard.py", "testname": "test_standard.py", "funcname": "test_kalman_sampling", "imports": ["import pickle", "from io import BytesIO", "import numpy as np", "import pytest", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..sqrt import BiermanKalmanFilter, CholeskyKalmanFilter", "from ..standard import KalmanFilter"], "code": "def test_kalman_sampling(self, kf_cls, data):\n    kf = kf_cls((data.transition_matrix * 2.0), (data.observation_matrix + 0.1), (data.transition_covariance * 5), (data.observation_covariance * 5), np.zeros(data.transition_matrix.shape[0]), (data.observation_offset * (- 1.0)), np.full_like(data.initial_state_mean, (- 1000.0)), (data.initial_state_covariance * 2.0))\n    (x1, z1) = kf.sample(1)\n    assert (x1.shape == (1, data.transition_matrix.shape[0]))\n    assert (z1.shape == (1, data.observation_matrix.shape[0]))\n    (x2, z2) = kf.sample(10000)\n    assert (x2.shape == (10000, data.transition_matrix.shape[0]))\n    assert (z2.shape == (10000, data.observation_matrix.shape[0]))", "masked_code": "def test_kalman_sampling(self, kf_cls, data):\n    kf = kf_cls((data.transition_matrix * 2.0), (data.observation_matrix + 0.1), (data.transition_covariance * 5), (data.observation_covariance * 5), np.zeros(data.transition_matrix.shape[0]), (data.observation_offset * (- 1.0)), np.full_like(data.initial_state_mean, (- 1000.0)), (data.initial_state_covariance * 2.0))\n    (x1, z1) = kf.sample(1)\n    assert (x1.shape == '???')\n    assert (z1.shape == (1, data.observation_matrix.shape[0]))\n    (x2, z2) = kf.sample(10000)\n    assert (x2.shape == (10000, data.transition_matrix.shape[0]))\n    assert (z2.shape == (10000, data.observation_matrix.shape[0]))", "ground_truth": "(1, data.transition_matrix.shape[0])", "quality_analysis": {"complexity_score": 11, "left_complexity": 2, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestKalmanFilter"}
{"task_id": "pykalman_4", "reponame": "pykalman", "testpath": "pykalman/tests/test_standard.py", "testname": "test_standard.py", "funcname": "test_kalman_sampling", "imports": ["import pickle", "from io import BytesIO", "import numpy as np", "import pytest", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..sqrt import BiermanKalmanFilter, CholeskyKalmanFilter", "from ..standard import KalmanFilter"], "code": "def test_kalman_sampling(self, kf_cls, data):\n    kf = kf_cls((data.transition_matrix * 2.0), (data.observation_matrix + 0.1), (data.transition_covariance * 5), (data.observation_covariance * 5), np.zeros(data.transition_matrix.shape[0]), (data.observation_offset * (- 1.0)), np.full_like(data.initial_state_mean, (- 1000.0)), (data.initial_state_covariance * 2.0))\n    (x1, z1) = kf.sample(1)\n    assert (x1.shape == (1, data.transition_matrix.shape[0]))\n    assert (z1.shape == (1, data.observation_matrix.shape[0]))\n    (x2, z2) = kf.sample(10000)\n    assert (x2.shape == (10000, data.transition_matrix.shape[0]))\n    assert (z2.shape == (10000, data.observation_matrix.shape[0]))", "masked_code": "def test_kalman_sampling(self, kf_cls, data):\n    kf = kf_cls((data.transition_matrix * 2.0), (data.observation_matrix + 0.1), (data.transition_covariance * 5), (data.observation_covariance * 5), np.zeros(data.transition_matrix.shape[0]), (data.observation_offset * (- 1.0)), np.full_like(data.initial_state_mean, (- 1000.0)), (data.initial_state_covariance * 2.0))\n    (x1, z1) = kf.sample(1)\n    assert (x1.shape == (1, data.transition_matrix.shape[0]))\n    assert (z1.shape == '???')\n    (x2, z2) = kf.sample(10000)\n    assert (x2.shape == (10000, data.transition_matrix.shape[0]))\n    assert (z2.shape == (10000, data.observation_matrix.shape[0]))", "ground_truth": "(1, data.observation_matrix.shape[0])", "quality_analysis": {"complexity_score": 11, "left_complexity": 2, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestKalmanFilter"}
{"task_id": "pykalman_0", "reponame": "pykalman", "testpath": "pykalman/sqrt/tests/test_unscented.py", "testname": "test_unscented.py", "funcname": "test_additive_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(0)\n    assert (x.shape == (0, 2))\n    assert (z.shape == (0, 1))\n    (x, z) = kf.sample(500)\n    assert (x.shape == (500, 2))\n    assert (z.shape == (500, 1))\n    (x, z) = kf.sample(3)\n    assert (x.shape == (3, 2))\n    assert (z.shape == (3, 1))\n    (x, z) = kf.sample(1)\n    assert (x.shape == (1, 2))\n    assert (z.shape == (1, 1))", "masked_code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(0)\n    assert (x.shape == '???')\n    assert (z.shape == (0, 1))\n    (x, z) = kf.sample(500)\n    assert (x.shape == (500, 2))\n    assert (z.shape == (500, 1))\n    (x, z) = kf.sample(3)\n    assert (x.shape == (3, 2))\n    assert (z.shape == (3, 1))\n    (x, z) = kf.sample(1)\n    assert (x.shape == (1, 2))\n    assert (z.shape == (1, 1))", "ground_truth": "(0, 2)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pykalman_1", "reponame": "pykalman", "testpath": "pykalman/sqrt/tests/test_unscented.py", "testname": "test_unscented.py", "funcname": "test_additive_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(0)\n    assert (x.shape == (0, 2))\n    assert (z.shape == (0, 1))\n    (x, z) = kf.sample(500)\n    assert (x.shape == (500, 2))\n    assert (z.shape == (500, 1))\n    (x, z) = kf.sample(3)\n    assert (x.shape == (3, 2))\n    assert (z.shape == (3, 1))\n    (x, z) = kf.sample(1)\n    assert (x.shape == (1, 2))\n    assert (z.shape == (1, 1))", "masked_code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(0)\n    assert (x.shape == (0, 2))\n    assert (z.shape == '???')\n    (x, z) = kf.sample(500)\n    assert (x.shape == (500, 2))\n    assert (z.shape == (500, 1))\n    (x, z) = kf.sample(3)\n    assert (x.shape == (3, 2))\n    assert (z.shape == (3, 1))\n    (x, z) = kf.sample(1)\n    assert (x.shape == (1, 2))\n    assert (z.shape == (1, 1))", "ground_truth": "(0, 1)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pykalman_7", "reponame": "pykalman", "testpath": "pykalman/tests/test_unscented.py", "testname": "test_unscented.py", "funcname": "test_additive_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(0)\n    assert (x.shape == (0, 2))\n    assert (z.shape == (0, 1))\n    (x, z) = kf.sample(500)\n    assert (x.shape == (500, 2))\n    assert (z.shape == (500, 1))\n    (x, z) = kf.sample(3)\n    assert (x.shape == (3, 2))\n    assert (z.shape == (3, 1))\n    (x, z) = kf.sample(1)\n    assert (x.shape == (1, 2))\n    assert (z.shape == (1, 1))", "masked_code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(0)\n    assert (x.shape == (0, 2))\n    assert (z.shape == (0, 1))\n    (x, z) = kf.sample(500)\n    assert (x.shape == '???')\n    assert (z.shape == (500, 1))\n    (x, z) = kf.sample(3)\n    assert (x.shape == (3, 2))\n    assert (z.shape == (3, 1))\n    (x, z) = kf.sample(1)\n    assert (x.shape == (1, 2))\n    assert (z.shape == (1, 1))", "ground_truth": "(500, 2)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pykalman_8", "reponame": "pykalman", "testpath": "pykalman/tests/test_unscented.py", "testname": "test_unscented.py", "funcname": "test_additive_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(0)\n    assert (x.shape == (0, 2))\n    assert (z.shape == (0, 1))\n    (x, z) = kf.sample(500)\n    assert (x.shape == (500, 2))\n    assert (z.shape == (500, 1))\n    (x, z) = kf.sample(3)\n    assert (x.shape == (3, 2))\n    assert (z.shape == (3, 1))\n    (x, z) = kf.sample(1)\n    assert (x.shape == (1, 2))\n    assert (z.shape == (1, 1))", "masked_code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(0)\n    assert (x.shape == (0, 2))\n    assert (z.shape == (0, 1))\n    (x, z) = kf.sample(500)\n    assert (x.shape == (500, 2))\n    assert (z.shape == '???')\n    (x, z) = kf.sample(3)\n    assert (x.shape == (3, 2))\n    assert (z.shape == (3, 1))\n    (x, z) = kf.sample(1)\n    assert (x.shape == (1, 2))\n    assert (z.shape == (1, 1))", "ground_truth": "(500, 1)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pykalman_5", "reponame": "pykalman", "testpath": "pykalman/tests/test_unscented.py", "testname": "test_unscented.py", "funcname": "test_unscented_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_unscented_sample():\n    kf = build_unscented_filter(UnscentedKalmanFilter)\n    for n_samples in [0, 1000]:\n        (x, z) = kf.sample(n_samples)\n        assert (x.shape == (n_samples, 2))\n        assert (z.shape == (n_samples, 1))\n    (x, z) = kf.sample(5)\n    assert (x.shape == (5, 2))\n    assert (z.shape == (5, 1))", "masked_code": "def test_unscented_sample():\n    kf = build_unscented_filter(UnscentedKalmanFilter)\n    for n_samples in [0, 1000]:\n        (x, z) = kf.sample(n_samples)\n        assert (x.shape == (n_samples, 2))\n        assert (z.shape == (n_samples, 1))\n    (x, z) = kf.sample(5)\n    assert (x.shape == '???')\n    assert (z.shape == (5, 1))", "ground_truth": "(5, 2)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pykalman_6", "reponame": "pykalman", "testpath": "pykalman/tests/test_unscented.py", "testname": "test_unscented.py", "funcname": "test_unscented_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_unscented_sample():\n    kf = build_unscented_filter(UnscentedKalmanFilter)\n    for n_samples in [0, 1000]:\n        (x, z) = kf.sample(n_samples)\n        assert (x.shape == (n_samples, 2))\n        assert (z.shape == (n_samples, 1))\n    (x, z) = kf.sample(5)\n    assert (x.shape == (5, 2))\n    assert (z.shape == (5, 1))", "masked_code": "def test_unscented_sample():\n    kf = build_unscented_filter(UnscentedKalmanFilter)\n    for n_samples in [0, 1000]:\n        (x, z) = kf.sample(n_samples)\n        assert (x.shape == (n_samples, 2))\n        assert (z.shape == (n_samples, 1))\n    (x, z) = kf.sample(5)\n    assert (x.shape == (5, 2))\n    assert (z.shape == '???')", "ground_truth": "(5, 1)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
