{"task_id": "fluids_107", "reponame": "fluids", "testpath": "tests/test_numerics_special.py", "testname": "test_numerics_special.py", "funcname": "test_py_factorial", "imports": ["from math import exp, hypot, isinf, isnan, log", "from fluids.numerics import assert_close, comb", "from fluids.numerics.special import py_cacos, py_catanh, py_hypot, trunc_exp, trunc_log"], "code": "def test_py_factorial():\n    import math\n    from fluids.numerics.special import py_factorial\n    for i in range(30):\n        assert (math.factorial(i) == py_factorial(i))", "masked_code": "def test_py_factorial():\n    import math\n    from fluids.numerics.special import py_factorial\n    for i in range(30):\n        assert (math.factorial(i) == '???')", "ground_truth": "py_factorial(i)", "quality_analysis": {"complexity_score": 8, "left_complexity": 4, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "fluids_136", "reponame": "fluids", "testpath": "tests/test_two_phase_voidage.py", "testname": "test_two_phase_voidage.py", "funcname": "test_gas_liquid_viscosity", "imports": ["import pytest", "from fluids.numerics import assert_close, assert_close1d, linspace", "from fluids.two_phase_voidage import Armand, Baroczy, Beattie_Whalley, Chisholm_Armand, Chisholm_voidage, Cicchitti, Dix, Domanski_Didion, Duckler, Fauske, Fourar_Bories, Graham, Gregory_Scott, Guzhov, Harms, Huq_Loth, Kawahara, Kopte_Newell_Chato, Lin_Kwok, Lockhart_Martinelli_Xtt, McAdams, Nicklin_Wilkes_Davidson, Nishino_Yamazaki, Rouhani_1, Rouhani_2, Smith, Steiner, Sun_Duffey_Peng, Tandon_Varma_Gupta, Thom, Turner_Wallis, Woldesemayat_Ghajar, Xu_Fang_voidage, Yashar, Zivi, density_two_phase, gas_liquid_viscosity, gas_liquid_viscosity_methods, homogeneous, liquid_gas_voidage, liquid_gas_voidage_methods, two_phase_voidage_experimental"], "code": "def test_gas_liquid_viscosity():\n    mu = gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05)\n    assert_close(2.4630541871921184e-05, mu)\n    mu = gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, rhol=850.0, rhog=1.2, Method='Duckler')\n    assert_close(mu, 1.2092040385066917e-05)\n    simple_methods = gas_liquid_viscosity_methods()\n    assert (list(sorted(simple_methods)) == list(sorted(['McAdams', 'Cicchitti', 'Lin Kwok'])))\n    all_methods = gas_liquid_viscosity_methods(rhol=1000.0, rhog=2.0)\n    all_methods_expect = ['Beattie Whalley', 'Fourar Bories', 'Duckler', 'McAdams', 'Cicchitti', 'Lin Kwok']\n    assert (list(sorted(all_methods)) == list(sorted(all_methods_expect)))\n    for m in all_methods_expect:\n        gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, rhol=850.0, rhog=1.2, Method=m)\n    with pytest.raises(Exception):\n        gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, Method='NOTAMETHOD')", "masked_code": "def test_gas_liquid_viscosity():\n    mu = gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05)\n    assert_close(2.4630541871921184e-05, mu)\n    mu = gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, rhol=850.0, rhog=1.2, Method='Duckler')\n    assert_close(mu, 1.2092040385066917e-05)\n    simple_methods = gas_liquid_viscosity_methods()\n    assert (list(sorted(simple_methods)) == '???')\n    all_methods = gas_liquid_viscosity_methods(rhol=1000.0, rhog=2.0)\n    all_methods_expect = ['Beattie Whalley', 'Fourar Bories', 'Duckler', 'McAdams', 'Cicchitti', 'Lin Kwok']\n    assert (list(sorted(all_methods)) == list(sorted(all_methods_expect)))\n    for m in all_methods_expect:\n        gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, rhol=850.0, rhog=1.2, Method=m)\n    with pytest.raises(Exception):\n        gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, Method='NOTAMETHOD')", "ground_truth": "list(sorted(['McAdams', 'Cicchitti', 'Lin Kwok']))", "quality_analysis": {"complexity_score": 18, "left_complexity": 7, "right_complexity": 11, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "fluids_137", "reponame": "fluids", "testpath": "tests/test_two_phase_voidage.py", "testname": "test_two_phase_voidage.py", "funcname": "test_gas_liquid_viscosity", "imports": ["import pytest", "from fluids.numerics import assert_close, assert_close1d, linspace", "from fluids.two_phase_voidage import Armand, Baroczy, Beattie_Whalley, Chisholm_Armand, Chisholm_voidage, Cicchitti, Dix, Domanski_Didion, Duckler, Fauske, Fourar_Bories, Graham, Gregory_Scott, Guzhov, Harms, Huq_Loth, Kawahara, Kopte_Newell_Chato, Lin_Kwok, Lockhart_Martinelli_Xtt, McAdams, Nicklin_Wilkes_Davidson, Nishino_Yamazaki, Rouhani_1, Rouhani_2, Smith, Steiner, Sun_Duffey_Peng, Tandon_Varma_Gupta, Thom, Turner_Wallis, Woldesemayat_Ghajar, Xu_Fang_voidage, Yashar, Zivi, density_two_phase, gas_liquid_viscosity, gas_liquid_viscosity_methods, homogeneous, liquid_gas_voidage, liquid_gas_voidage_methods, two_phase_voidage_experimental"], "code": "def test_gas_liquid_viscosity():\n    mu = gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05)\n    assert_close(2.4630541871921184e-05, mu)\n    mu = gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, rhol=850.0, rhog=1.2, Method='Duckler')\n    assert_close(mu, 1.2092040385066917e-05)\n    simple_methods = gas_liquid_viscosity_methods()\n    assert (list(sorted(simple_methods)) == list(sorted(['McAdams', 'Cicchitti', 'Lin Kwok'])))\n    all_methods = gas_liquid_viscosity_methods(rhol=1000.0, rhog=2.0)\n    all_methods_expect = ['Beattie Whalley', 'Fourar Bories', 'Duckler', 'McAdams', 'Cicchitti', 'Lin Kwok']\n    assert (list(sorted(all_methods)) == list(sorted(all_methods_expect)))\n    for m in all_methods_expect:\n        gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, rhol=850.0, rhog=1.2, Method=m)\n    with pytest.raises(Exception):\n        gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, Method='NOTAMETHOD')", "masked_code": "def test_gas_liquid_viscosity():\n    mu = gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05)\n    assert_close(2.4630541871921184e-05, mu)\n    mu = gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, rhol=850.0, rhog=1.2, Method='Duckler')\n    assert_close(mu, 1.2092040385066917e-05)\n    simple_methods = gas_liquid_viscosity_methods()\n    assert (list(sorted(simple_methods)) == list(sorted(['McAdams', 'Cicchitti', 'Lin Kwok'])))\n    all_methods = gas_liquid_viscosity_methods(rhol=1000.0, rhog=2.0)\n    all_methods_expect = ['Beattie Whalley', 'Fourar Bories', 'Duckler', 'McAdams', 'Cicchitti', 'Lin Kwok']\n    assert (list(sorted(all_methods)) == '???')\n    for m in all_methods_expect:\n        gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, rhol=850.0, rhog=1.2, Method=m)\n    with pytest.raises(Exception):\n        gas_liquid_viscosity(x=0.4, mul=0.001, mug=1e-05, Method='NOTAMETHOD')", "ground_truth": "list(sorted(all_methods_expect))", "quality_analysis": {"complexity_score": 14, "left_complexity": 7, "right_complexity": 7, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "fluids_135", "reponame": "fluids", "testpath": "tests/test_two_phase_voidage.py", "testname": "test_two_phase_voidage.py", "funcname": "test_liquid_gas_voidage", "imports": ["import pytest", "from fluids.numerics import assert_close, assert_close1d, linspace", "from fluids.two_phase_voidage import Armand, Baroczy, Beattie_Whalley, Chisholm_Armand, Chisholm_voidage, Cicchitti, Dix, Domanski_Didion, Duckler, Fauske, Fourar_Bories, Graham, Gregory_Scott, Guzhov, Harms, Huq_Loth, Kawahara, Kopte_Newell_Chato, Lin_Kwok, Lockhart_Martinelli_Xtt, McAdams, Nicklin_Wilkes_Davidson, Nishino_Yamazaki, Rouhani_1, Rouhani_2, Smith, Steiner, Sun_Duffey_Peng, Tandon_Varma_Gupta, Thom, Turner_Wallis, Woldesemayat_Ghajar, Xu_Fang_voidage, Yashar, Zivi, density_two_phase, gas_liquid_viscosity, gas_liquid_viscosity_methods, homogeneous, liquid_gas_voidage, liquid_gas_voidage_methods, two_phase_voidage_experimental"], "code": "def test_liquid_gas_voidage():\n    voidage = liquid_gas_voidage(m=0.6, x=0.1, rhol=915.0, rhog=2.67, mul=0.00018, mug=1.4e-05, sigma=0.0487, D=0.05)\n    assert_close(voidage, 0.9744097632663492)\n    kwargs = dict(m=0.6, x=0.1, rhol=915.0, rhog=2.67, mul=0.00018, mug=1.4e-05, sigma=0.0487, D=0.05, P=100000.0, Pc=10000000.0)\n    for m in liquid_gas_voidage_methods(**kwargs):\n        liquid_gas_voidage(Method=m, **kwargs)\n    with pytest.raises(Exception):\n        liquid_gas_voidage(Method='BADMETHOD', **kwargs)\n    assert (len(liquid_gas_voidage_methods(**kwargs)) == 29)", "masked_code": "def test_liquid_gas_voidage():\n    voidage = liquid_gas_voidage(m=0.6, x=0.1, rhol=915.0, rhog=2.67, mul=0.00018, mug=1.4e-05, sigma=0.0487, D=0.05)\n    assert_close(voidage, 0.9744097632663492)\n    kwargs = dict(m=0.6, x=0.1, rhol=915.0, rhog=2.67, mul=0.00018, mug=1.4e-05, sigma=0.0487, D=0.05, P=100000.0, Pc=10000000.0)\n    for m in liquid_gas_voidage_methods(**kwargs):\n        liquid_gas_voidage(Method=m, **kwargs)\n    with pytest.raises(Exception):\n        liquid_gas_voidage(Method='BADMETHOD', **kwargs)\n    assert (len(liquid_gas_voidage_methods(**kwargs)) == '???')", "ground_truth": "29", "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
