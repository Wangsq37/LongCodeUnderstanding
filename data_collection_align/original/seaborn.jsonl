{"task_id": "seaborn_2", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_axis", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_axis(random):\n    'Test axis kwarg to bootstrap function.'\n    x = np.random.randn(10, 20)\n    n_boot = 100\n    out_default = algo.bootstrap(x, n_boot=n_boot)\n    assert (out_default.shape == (n_boot,))\n    out_axis = algo.bootstrap(x, n_boot=n_boot, axis=0)\n    assert out_axis.shape, (n_boot, x.shape[1])", "masked_code": "def test_bootstrap_axis(random):\n    'Test axis kwarg to bootstrap function.'\n    x = np.random.randn(10, 20)\n    n_boot = 100\n    out_default = algo.bootstrap(x, n_boot=n_boot)\n    assert (out_default.shape == '???')\n    out_axis = algo.bootstrap(x, n_boot=n_boot, axis=0)\n    assert out_axis.shape, (n_boot, x.shape[1])", "ground_truth": "(n_boot,)", "quality_analysis": {"complexity_score": 5, "left_complexity": 2, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_0", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_length", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_length(random):\n    'Test that we get a bootstrap array of the right shape.'\n    a_norm = np.random.randn(1000)\n    out = algo.bootstrap(a_norm)\n    assert (len(out) == 10000)\n    n_boot = 100\n    out = algo.bootstrap(a_norm, n_boot=n_boot)\n    assert (len(out) == n_boot)", "masked_code": "def test_bootstrap_length(random):\n    'Test that we get a bootstrap array of the right shape.'\n    a_norm = np.random.randn(1000)\n    out = algo.bootstrap(a_norm)\n    assert (len(out) == '???')\n    n_boot = 100\n    out = algo.bootstrap(a_norm, n_boot=n_boot)\n    assert (len(out) == n_boot)", "ground_truth": "10000", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_length", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_length(random):\n    'Test that we get a bootstrap array of the right shape.'\n    a_norm = np.random.randn(1000)\n    out = algo.bootstrap(a_norm)\n    assert (len(out) == 10000)\n    n_boot = 100\n    out = algo.bootstrap(a_norm, n_boot=n_boot)\n    assert (len(out) == n_boot)", "masked_code": "def test_bootstrap_length(random):\n    'Test that we get a bootstrap array of the right shape.'\n    a_norm = np.random.randn(1000)\n    out = algo.bootstrap(a_norm)\n    assert (len(out) == 10000)\n    n_boot = 100\n    out = algo.bootstrap(a_norm, n_boot=n_boot)\n    assert (len(out) == '???')", "ground_truth": "n_boot", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_3", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_ols", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_ols(random):\n    'Test bootstrap of OLS model fit.'\n\n    def ols_fit(X, y):\n        XtXinv = np.linalg.inv(np.dot(X.T, X))\n        return XtXinv.dot(X.T).dot(y)\n    X = np.column_stack((np.random.randn(50, 4), np.ones(50)))\n    w = [2, 4, 0, 3, 5]\n    y_noisy = (np.dot(X, w) + (np.random.randn(50) * 20))\n    y_lownoise = (np.dot(X, w) + np.random.randn(50))\n    n_boot = 500\n    w_boot_noisy = algo.bootstrap(X, y_noisy, n_boot=n_boot, func=ols_fit)\n    w_boot_lownoise = algo.bootstrap(X, y_lownoise, n_boot=n_boot, func=ols_fit)\n    assert (w_boot_noisy.shape == (n_boot, 5))\n    assert (w_boot_lownoise.shape == (n_boot, 5))\n    assert (w_boot_noisy.std() > w_boot_lownoise.std())", "masked_code": "def test_bootstrap_ols(random):\n    'Test bootstrap of OLS model fit.'\n\n    def ols_fit(X, y):\n        XtXinv = np.linalg.inv(np.dot(X.T, X))\n        return XtXinv.dot(X.T).dot(y)\n    X = np.column_stack((np.random.randn(50, 4), np.ones(50)))\n    w = [2, 4, 0, 3, 5]\n    y_noisy = (np.dot(X, w) + (np.random.randn(50) * 20))\n    y_lownoise = (np.dot(X, w) + np.random.randn(50))\n    n_boot = 500\n    w_boot_noisy = algo.bootstrap(X, y_noisy, n_boot=n_boot, func=ols_fit)\n    w_boot_lownoise = algo.bootstrap(X, y_lownoise, n_boot=n_boot, func=ols_fit)\n    assert (w_boot_noisy.shape == '???')\n    assert (w_boot_lownoise.shape == (n_boot, 5))\n    assert (w_boot_noisy.std() > w_boot_lownoise.std())", "ground_truth": "(n_boot, 5)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_4", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_ols", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_ols(random):\n    'Test bootstrap of OLS model fit.'\n\n    def ols_fit(X, y):\n        XtXinv = np.linalg.inv(np.dot(X.T, X))\n        return XtXinv.dot(X.T).dot(y)\n    X = np.column_stack((np.random.randn(50, 4), np.ones(50)))\n    w = [2, 4, 0, 3, 5]\n    y_noisy = (np.dot(X, w) + (np.random.randn(50) * 20))\n    y_lownoise = (np.dot(X, w) + np.random.randn(50))\n    n_boot = 500\n    w_boot_noisy = algo.bootstrap(X, y_noisy, n_boot=n_boot, func=ols_fit)\n    w_boot_lownoise = algo.bootstrap(X, y_lownoise, n_boot=n_boot, func=ols_fit)\n    assert (w_boot_noisy.shape == (n_boot, 5))\n    assert (w_boot_lownoise.shape == (n_boot, 5))\n    assert (w_boot_noisy.std() > w_boot_lownoise.std())", "masked_code": "def test_bootstrap_ols(random):\n    'Test bootstrap of OLS model fit.'\n\n    def ols_fit(X, y):\n        XtXinv = np.linalg.inv(np.dot(X.T, X))\n        return XtXinv.dot(X.T).dot(y)\n    X = np.column_stack((np.random.randn(50, 4), np.ones(50)))\n    w = [2, 4, 0, 3, 5]\n    y_noisy = (np.dot(X, w) + (np.random.randn(50) * 20))\n    y_lownoise = (np.dot(X, w) + np.random.randn(50))\n    n_boot = 500\n    w_boot_noisy = algo.bootstrap(X, y_noisy, n_boot=n_boot, func=ols_fit)\n    w_boot_lownoise = algo.bootstrap(X, y_lownoise, n_boot=n_boot, func=ols_fit)\n    assert (w_boot_noisy.shape == (n_boot, 5))\n    assert (w_boot_lownoise.shape == '???')\n    assert (w_boot_noisy.std() > w_boot_lownoise.std())", "ground_truth": "(n_boot, 5)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1280", "reponame": "seaborn", "testpath": "tests/_marks/test_area.py", "testname": "test_area.py", "funcname": "test_unfilled", "imports": ["import matplotlib as mpl", "from matplotlib.colors import to_rgba, to_rgba_array", "from numpy.testing import assert_array_equal", "from seaborn._core.plot import Plot", "from seaborn._marks.area import Area, Band"], "code": "def test_unfilled(self):\n    (x, y) = ([1, 2, 3], [1, 2, 1])\n    c = '.5'\n    p = Plot(x=x, y=y).add(Area(fill=False, color=c)).plot()\n    ax = p._figure.axes[0]\n    poly = ax.patches[0]\n    assert (poly.get_facecolor() == to_rgba(c, 0))", "masked_code": "def test_unfilled(self):\n    (x, y) = ([1, 2, 3], [1, 2, 1])\n    c = '.5'\n    p = Plot(x=x, y=y).add(Area(fill=False, color=c)).plot()\n    ax = p._figure.axes[0]\n    poly = ax.patches[0]\n    assert (poly.get_facecolor() == '???')", "ground_truth": "to_rgba(c, 0)", "quality_analysis": {"complexity_score": 8, "left_complexity": 3, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArea"}
{"task_id": "seaborn_1309", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_color", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_color(self):\n    (c, a) = ('C1', 0.5)\n    m = self.mark(color=c, alpha=a)\n    assert (resolve_color(m, {}) == mpl.colors.to_rgba(c, a))\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))", "masked_code": "def test_color(self):\n    (c, a) = ('C1', 0.5)\n    m = self.mark(color=c, alpha=a)\n    assert (resolve_color(m, {}) == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))", "ground_truth": "mpl.colors.to_rgba(c, a)", "quality_analysis": {"complexity_score": 12, "left_complexity": 7, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1304", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_default", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_default(self):\n    val = 3\n    m = self.mark(linewidth=Mappable(val))\n    assert (m._resolve({}, 'linewidth') == val)\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "masked_code": "def test_default(self):\n    val = 3\n    m = self.mark(linewidth=Mappable(val))\n    assert (m._resolve({}, 'linewidth') == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "ground_truth": "val", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1306", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_depends", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_depends(self):\n    val = 2\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    m = self.mark(pointsize=Mappable(val), linewidth=Mappable(depend='pointsize'))\n    assert (m._resolve({}, 'linewidth') == val)\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))\n    m = self.mark(pointsize=(val * 2), linewidth=Mappable(depend='pointsize'))\n    assert (m._resolve({}, 'linewidth') == (val * 2))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), (val * 2)))", "masked_code": "def test_depends(self):\n    val = 2\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    m = self.mark(pointsize=Mappable(val), linewidth=Mappable(depend='pointsize'))\n    assert (m._resolve({}, 'linewidth') == '???')\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))\n    m = self.mark(pointsize=(val * 2), linewidth=Mappable(depend='pointsize'))\n    assert (m._resolve({}, 'linewidth') == (val * 2))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), (val * 2)))", "ground_truth": "val", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1311", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_fillcolor", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_fillcolor(self):\n    (c, a) = ('green', 0.8)\n    fa = 0.2\n    m = self.mark(color=c, alpha=a, fillcolor=Mappable(depend='color'), fillalpha=Mappable(fa))\n    assert (resolve_color(m, {}) == mpl.colors.to_rgba(c, a))\n    assert (resolve_color(m, {}, 'fill') == mpl.colors.to_rgba(c, fa))\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))\n    assert_array_equal(resolve_color(m, df, 'fill'), mpl.colors.to_rgba_array(cs, fa))", "masked_code": "def test_fillcolor(self):\n    (c, a) = ('green', 0.8)\n    fa = 0.2\n    m = self.mark(color=c, alpha=a, fillcolor=Mappable(depend='color'), fillalpha=Mappable(fa))\n    assert (resolve_color(m, {}) == '???')\n    assert (resolve_color(m, {}, 'fill') == mpl.colors.to_rgba(c, fa))\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))\n    assert_array_equal(resolve_color(m, df, 'fill'), mpl.colors.to_rgba_array(cs, fa))", "ground_truth": "mpl.colors.to_rgba(c, a)", "quality_analysis": {"complexity_score": 12, "left_complexity": 7, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1312", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_fillcolor", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_fillcolor(self):\n    (c, a) = ('green', 0.8)\n    fa = 0.2\n    m = self.mark(color=c, alpha=a, fillcolor=Mappable(depend='color'), fillalpha=Mappable(fa))\n    assert (resolve_color(m, {}) == mpl.colors.to_rgba(c, a))\n    assert (resolve_color(m, {}, 'fill') == mpl.colors.to_rgba(c, fa))\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))\n    assert_array_equal(resolve_color(m, df, 'fill'), mpl.colors.to_rgba_array(cs, fa))", "masked_code": "def test_fillcolor(self):\n    (c, a) = ('green', 0.8)\n    fa = 0.2\n    m = self.mark(color=c, alpha=a, fillcolor=Mappable(depend='color'), fillalpha=Mappable(fa))\n    assert (resolve_color(m, {}) == mpl.colors.to_rgba(c, a))\n    assert (resolve_color(m, {}, 'fill') == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))\n    assert_array_equal(resolve_color(m, df, 'fill'), mpl.colors.to_rgba_array(cs, fa))", "ground_truth": "mpl.colors.to_rgba(c, fa)", "quality_analysis": {"complexity_score": 13, "left_complexity": 8, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1308", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_mapped", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_mapped(self):\n    values = {'a': 1, 'b': 2, 'c': 3}\n\n    def f(x):\n        return np.array([values[x_i] for x_i in x])\n    m = self.mark(linewidth=Mappable(2))\n    scales = {'linewidth': f}\n    assert (m._resolve({'linewidth': 'c'}, 'linewidth', scales) == 3)\n    df = pd.DataFrame({'linewidth': ['a', 'b', 'c']})\n    expected = np.array([1, 2, 3], float)\n    assert_array_equal(m._resolve(df, 'linewidth', scales), expected)", "masked_code": "def test_mapped(self):\n    values = {'a': 1, 'b': 2, 'c': 3}\n\n    def f(x):\n        return np.array([values[x_i] for x_i in x])\n    m = self.mark(linewidth=Mappable(2))\n    scales = {'linewidth': f}\n    assert (m._resolve({'linewidth': 'c'}, 'linewidth', scales) == '???')\n    df = pd.DataFrame({'linewidth': ['a', 'b', 'c']})\n    expected = np.array([1, 2, 3], float)\n    assert_array_equal(m._resolve(df, 'linewidth', scales), expected)", "ground_truth": "3", "quality_analysis": {"complexity_score": 11, "left_complexity": 10, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1305", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_rcparam", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_rcparam(self):\n    param = 'lines.linewidth'\n    val = mpl.rcParams[param]\n    m = self.mark(linewidth=Mappable(rc=param))\n    assert (m._resolve({}, 'linewidth') == val)\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "masked_code": "def test_rcparam(self):\n    param = 'lines.linewidth'\n    val = mpl.rcParams[param]\n    m = self.mark(linewidth=Mappable(rc=param))\n    assert (m._resolve({}, 'linewidth') == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "ground_truth": "val", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1298", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '<auto>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '???')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '<auto>')", "ground_truth": "'<0.5>'", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1299", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '<auto>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == '???')\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '<auto>')", "ground_truth": "\"<'CO'>\"", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1300", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '<auto>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '???')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '<auto>')", "ground_truth": "'<rc:lines.linewidth>'", "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1301", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '<auto>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '???')\n    assert (str(Mappable(auto=True)) == '<auto>')", "ground_truth": "'<depend:color>'", "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1302", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '<auto>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0.5)) == '<0.5>')\n    assert (str(Mappable('CO')) == \"<'CO'>\")\n    assert (str(Mappable(rc='lines.linewidth')) == '<rc:lines.linewidth>')\n    assert (str(Mappable(depend='color')) == '<depend:color>')\n    assert (str(Mappable(auto=True)) == '???')", "ground_truth": "'<auto>'", "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1303", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_value", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_value(self):\n    val = 3\n    m = self.mark(linewidth=val)\n    assert (m._resolve({}, 'linewidth') == val)\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "masked_code": "def test_value(self):\n    val = 3\n    m = self.mark(linewidth=val)\n    assert (m._resolve({}, 'linewidth') == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(10))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "ground_truth": "val", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1345", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_binwidth", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_binwidth(self, long_df):\n    binwidth = 0.5\n    h = Hist(binwidth=binwidth)\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    n_bins = bin_kws['bins']\n    (left, right) = bin_kws['range']\n    assert (((right - left) / n_bins) == pytest.approx(binwidth))", "masked_code": "def test_binwidth(self, long_df):\n    binwidth = 0.5\n    h = Hist(binwidth=binwidth)\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    n_bins = bin_kws['bins']\n    (left, right) = bin_kws['range']\n    assert (((right - left) / n_bins) == '???')", "ground_truth": "pytest.approx(binwidth)", "quality_analysis": {"complexity_score": 11, "left_complexity": 7, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1359", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_common_bins_subset", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_common_bins_subset(self, long_df, triple_args):\n    h = Hist(common_bins=False)\n    out = h(long_df, *triple_args)\n    bins = []\n    for (_, out_part) in out.groupby('a'):\n        bins.append(tuple(out_part['x']))\n    assert (len(set(bins)) == out['a'].nunique())", "masked_code": "def test_common_bins_subset(self, long_df, triple_args):\n    h = Hist(common_bins=False)\n    out = h(long_df, *triple_args)\n    bins = []\n    for (_, out_part) in out.groupby('a'):\n        bins.append(tuple(out_part['x']))\n    assert (len(set(bins)) == '???')", "ground_truth": "out['a'].nunique()", "quality_analysis": {"complexity_score": 10, "left_complexity": 7, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1355", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_common_norm_default", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_common_norm_default(self, long_df, triple_args):\n    h = Hist(stat='percent')\n    out = h(long_df, *triple_args)\n    assert (out['y'].sum() == pytest.approx(100))", "masked_code": "def test_common_norm_default(self, long_df, triple_args):\n    h = Hist(stat='percent')\n    out = h(long_df, *triple_args)\n    assert (out['y'].sum() == '???')", "ground_truth": "pytest.approx(100)", "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1356", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_common_norm_false", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_common_norm_false(self, long_df, triple_args):\n    h = Hist(stat='percent', common_norm=False)\n    out = h(long_df, *triple_args)\n    for (_, out_part) in out.groupby(['a', 's']):\n        assert (out_part['y'].sum() == pytest.approx(100))", "masked_code": "def test_common_norm_false(self, long_df, triple_args):\n    h = Hist(stat='percent', common_norm=False)\n    out = h(long_df, *triple_args)\n    for (_, out_part) in out.groupby(['a', 's']):\n        assert (out_part['y'].sum() == '???')", "ground_truth": "pytest.approx(100)", "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1357", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_common_norm_subset", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_common_norm_subset(self, long_df, triple_args):\n    h = Hist(stat='percent', common_norm=['a'])\n    out = h(long_df, *triple_args)\n    for (_, out_part) in out.groupby('a'):\n        assert (out_part['y'].sum() == pytest.approx(100))", "masked_code": "def test_common_norm_subset(self, long_df, triple_args):\n    h = Hist(stat='percent', common_norm=['a'])\n    out = h(long_df, *triple_args)\n    for (_, out_part) in out.groupby('a'):\n        assert (out_part['y'].sum() == '???')", "ground_truth": "pytest.approx(100)", "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1351", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_count_stat", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_count_stat(self, long_df, single_args):\n    h = Hist(stat='count')\n    out = h(long_df, *single_args)\n    assert (out['y'].sum() == len(long_df))", "masked_code": "def test_count_stat(self, long_df, single_args):\n    h = Hist(stat='count')\n    out = h(long_df, *single_args)\n    assert (out['y'].sum() == '???')", "ground_truth": "len(long_df)", "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1354", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_cumulative_count", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_cumulative_count(self, long_df, single_args):\n    h = Hist(stat='count', cumulative=True)\n    out = h(long_df, *single_args)\n    assert (out['y'].max() == len(long_df))", "masked_code": "def test_cumulative_count(self, long_df, single_args):\n    h = Hist(stat='count', cumulative=True)\n    out = h(long_df, *single_args)\n    assert (out['y'].max() == '???')", "ground_truth": "len(long_df)", "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1347", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_discrete_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_discrete_bins(self, long_df):\n    h = Hist(discrete=True)\n    x = long_df['x'].astype(int)\n    bin_kws = h._define_bin_params(long_df.assign(x=x), 'x', 'continuous')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "masked_code": "def test_discrete_bins(self, long_df):\n    h = Hist(discrete=True)\n    x = long_df['x'].astype(int)\n    bin_kws = h._define_bin_params(long_df.assign(x=x), 'x', 'continuous')\n    assert (bin_kws['range'] == '???')\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "ground_truth": "((x.min() - 0.5), (x.max() + 0.5))", "quality_analysis": {"complexity_score": 19, "left_complexity": 5, "right_complexity": 14, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1348", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_discrete_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_discrete_bins(self, long_df):\n    h = Hist(discrete=True)\n    x = long_df['x'].astype(int)\n    bin_kws = h._define_bin_params(long_df.assign(x=x), 'x', 'continuous')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "masked_code": "def test_discrete_bins(self, long_df):\n    h = Hist(discrete=True)\n    x = long_df['x'].astype(int)\n    bin_kws = h._define_bin_params(long_df.assign(x=x), 'x', 'continuous')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == '???')", "ground_truth": "((x.max() - x.min()) + 1)", "quality_analysis": {"complexity_score": 16, "left_complexity": 5, "right_complexity": 11, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1349", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_discrete_bins_from_nominal_scale", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_discrete_bins_from_nominal_scale(self, rng):\n    h = Hist()\n    x = rng.randint(0, 5, 10)\n    df = pd.DataFrame({'x': x})\n    bin_kws = h._define_bin_params(df, 'x', 'nominal')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "masked_code": "def test_discrete_bins_from_nominal_scale(self, rng):\n    h = Hist()\n    x = rng.randint(0, 5, 10)\n    df = pd.DataFrame({'x': x})\n    bin_kws = h._define_bin_params(df, 'x', 'nominal')\n    assert (bin_kws['range'] == '???')\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "ground_truth": "((x.min() - 0.5), (x.max() + 0.5))", "quality_analysis": {"complexity_score": 19, "left_complexity": 5, "right_complexity": 14, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1350", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_discrete_bins_from_nominal_scale", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_discrete_bins_from_nominal_scale(self, rng):\n    h = Hist()\n    x = rng.randint(0, 5, 10)\n    df = pd.DataFrame({'x': x})\n    bin_kws = h._define_bin_params(df, 'x', 'nominal')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "masked_code": "def test_discrete_bins_from_nominal_scale(self, rng):\n    h = Hist()\n    x = rng.randint(0, 5, 10)\n    df = pd.DataFrame({'x': x})\n    bin_kws = h._define_bin_params(df, 'x', 'nominal')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == '???')", "ground_truth": "((x.max() - x.min()) + 1)", "quality_analysis": {"complexity_score": 16, "left_complexity": 5, "right_complexity": 11, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1353", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_frequency_stat", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_frequency_stat(self, long_df, single_args):\n    h = Hist(stat='frequency')\n    out = h(long_df, *single_args)\n    assert ((out['y'] * out['space']).sum() == len(long_df))", "masked_code": "def test_frequency_stat(self, long_df, single_args):\n    h = Hist(stat='frequency')\n    out = h(long_df, *single_args)\n    assert ((out['y'] * out['space']).sum() == '???')", "ground_truth": "len(long_df)", "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1343", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_int_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_int_bins(self, long_df):\n    n = 24\n    h = Hist(bins=n)\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    assert (bin_kws['range'] == (long_df['x'].min(), long_df['x'].max()))\n    assert (bin_kws['bins'] == n)", "masked_code": "def test_int_bins(self, long_df):\n    n = 24\n    h = Hist(bins=n)\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    assert (bin_kws['range'] == '???')\n    assert (bin_kws['bins'] == n)", "ground_truth": "(long_df['x'].min(), long_df['x'].max())", "quality_analysis": {"complexity_score": 13, "left_complexity": 5, "right_complexity": 8, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1344", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_int_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_int_bins(self, long_df):\n    n = 24\n    h = Hist(bins=n)\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    assert (bin_kws['range'] == (long_df['x'].min(), long_df['x'].max()))\n    assert (bin_kws['bins'] == n)", "masked_code": "def test_int_bins(self, long_df):\n    n = 24\n    h = Hist(bins=n)\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    assert (bin_kws['range'] == (long_df['x'].min(), long_df['x'].max()))\n    assert (bin_kws['bins'] == '???')", "ground_truth": "n", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1352", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_percent_stat", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_percent_stat(self, long_df, single_args):\n    h = Hist(stat='percent')\n    out = h(long_df, *single_args)\n    assert (out['y'].sum() == 100)", "masked_code": "def test_percent_stat(self, long_df, single_args):\n    h = Hist(stat='percent')\n    out = h(long_df, *single_args)\n    assert (out['y'].sum() == '???')", "ground_truth": "100", "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1341", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_string_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_string_bins(self, long_df):\n    h = Hist(bins='sqrt')\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    assert (bin_kws['range'] == (long_df['x'].min(), long_df['x'].max()))\n    assert (bin_kws['bins'] == int(np.sqrt(len(long_df))))", "masked_code": "def test_string_bins(self, long_df):\n    h = Hist(bins='sqrt')\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    assert (bin_kws['range'] == '???')\n    assert (bin_kws['bins'] == int(np.sqrt(len(long_df))))", "ground_truth": "(long_df['x'].min(), long_df['x'].max())", "quality_analysis": {"complexity_score": 13, "left_complexity": 5, "right_complexity": 8, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1342", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_string_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_string_bins(self, long_df):\n    h = Hist(bins='sqrt')\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    assert (bin_kws['range'] == (long_df['x'].min(), long_df['x'].max()))\n    assert (bin_kws['bins'] == int(np.sqrt(len(long_df))))", "masked_code": "def test_string_bins(self, long_df):\n    h = Hist(bins='sqrt')\n    bin_kws = h._define_bin_params(long_df, 'x', 'continuous')\n    assert (bin_kws['range'] == (long_df['x'].min(), long_df['x'].max()))\n    assert (bin_kws['bins'] == '???')", "ground_truth": "int(np.sqrt(len(long_df)))", "quality_analysis": {"complexity_score": 15, "left_complexity": 5, "right_complexity": 10, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_628", "reponame": "seaborn", "testpath": "tests/test_docstrings.py", "testname": "test_docstrings.py", "funcname": "test_from_dict", "imports": ["from seaborn._docstrings import DocstringComponents"], "code": "def test_from_dict(self):\n    obj = DocstringComponents(EXAMPLE_DICT)\n    assert (obj.param_a == 'a : str\\n    The first parameter.')", "masked_code": "def test_from_dict(self):\n    obj = DocstringComponents(EXAMPLE_DICT)\n    assert (obj.param_a == '???')", "ground_truth": "'a : str\\n    The first parameter.'", "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestDocstringComponents"}
{"task_id": "seaborn_630", "reponame": "seaborn", "testpath": "tests/test_docstrings.py", "testname": "test_docstrings.py", "funcname": "test_from_function", "imports": ["from seaborn._docstrings import DocstringComponents"], "code": "def test_from_function(self):\n    obj = DocstringComponents.from_function_params(example_func)\n    assert (obj.a == 'a : str\\n    A function parameter.')", "masked_code": "def test_from_function(self):\n    obj = DocstringComponents.from_function_params(example_func)\n    assert (obj.a == '???')", "ground_truth": "'a : str\\n    A function parameter.'", "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestDocstringComponents"}
{"task_id": "seaborn_631", "reponame": "seaborn", "testpath": "tests/test_docstrings.py", "testname": "test_docstrings.py", "funcname": "test_from_method", "imports": ["from seaborn._docstrings import DocstringComponents"], "code": "def test_from_method(self):\n    obj = DocstringComponents.from_function_params(ExampleClass.example_method)\n    assert (obj.a == 'a : str\\n    A method parameter.')", "masked_code": "def test_from_method(self):\n    obj = DocstringComponents.from_function_params(ExampleClass.example_method)\n    assert (obj.a == '???')", "ground_truth": "'a : str\\n    A method parameter.'", "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestDocstringComponents"}
{"task_id": "seaborn_629", "reponame": "seaborn", "testpath": "tests/test_docstrings.py", "testname": "test_docstrings.py", "funcname": "test_from_nested_components", "imports": ["from seaborn._docstrings import DocstringComponents"], "code": "def test_from_nested_components(self):\n    obj_inner = DocstringComponents(EXAMPLE_DICT)\n    obj_outer = DocstringComponents.from_nested_components(inner=obj_inner)\n    assert (obj_outer.inner.param_a == 'a : str\\n    The first parameter.')", "masked_code": "def test_from_nested_components(self):\n    obj_inner = DocstringComponents(EXAMPLE_DICT)\n    obj_outer = DocstringComponents.from_nested_components(inner=obj_inner)\n    assert (obj_outer.inner.param_a == '???')", "ground_truth": "'a : str\\n    The first parameter.'", "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestDocstringComponents"}
{"task_id": "seaborn_999", "reponame": "seaborn", "testpath": "tests/_core/test_groupby.py", "testname": "test_groupby.py", "funcname": "test_init_from_dict", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy"], "code": "def test_init_from_dict():\n    order = {'a': [3, 2, 1], 'c': None, 'b': ['x', 'y', 'z']}\n    g = GroupBy(order)\n    assert (g.order == order)", "masked_code": "def test_init_from_dict():\n    order = {'a': [3, 2, 1], 'c': None, 'b': ['x', 'y', 'z']}\n    g = GroupBy(order)\n    assert (g.order == '???')", "ground_truth": "order", "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_998", "reponame": "seaborn", "testpath": "tests/_core/test_groupby.py", "testname": "test_groupby.py", "funcname": "test_init_from_list", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy"], "code": "def test_init_from_list():\n    g = GroupBy(['a', 'c', 'b'])\n    assert (g.order == {'a': None, 'c': None, 'b': None})", "masked_code": "def test_init_from_list():\n    g = GroupBy(['a', 'c', 'b'])\n    assert (g.order == '???')", "ground_truth": "{'a': None, 'c': None, 'b': None}", "quality_analysis": {"complexity_score": 11, "left_complexity": 2, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_715", "reponame": "seaborn", "testpath": "tests/test_miscplot.py", "testname": "test_miscplot.py", "funcname": "test_palplot_size", "imports": ["import matplotlib.pyplot as plt", "from seaborn import miscplot as misc", "from seaborn.palettes import color_palette", "from .test_utils import _network"], "code": "def test_palplot_size(self):\n    pal4 = color_palette('husl', 4)\n    misc.palplot(pal4)\n    size4 = plt.gcf().get_size_inches()\n    assert (tuple(size4) == (4, 1))\n    pal5 = color_palette('husl', 5)\n    misc.palplot(pal5)\n    size5 = plt.gcf().get_size_inches()\n    assert (tuple(size5) == (5, 1))\n    palbig = color_palette('husl', 3)\n    misc.palplot(palbig, 2)\n    sizebig = plt.gcf().get_size_inches()\n    assert (tuple(sizebig) == (6, 2))", "masked_code": "def test_palplot_size(self):\n    pal4 = color_palette('husl', 4)\n    misc.palplot(pal4)\n    size4 = plt.gcf().get_size_inches()\n    assert (tuple(size4) == '???')\n    pal5 = color_palette('husl', 5)\n    misc.palplot(pal5)\n    size5 = plt.gcf().get_size_inches()\n    assert (tuple(size5) == (5, 1))\n    palbig = color_palette('husl', 3)\n    misc.palplot(palbig, 2)\n    sizebig = plt.gcf().get_size_inches()\n    assert (tuple(sizebig) == (6, 2))", "ground_truth": "(4, 1)", "quality_analysis": {"complexity_score": 8, "left_complexity": 4, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestPalPlot"}
{"task_id": "seaborn_716", "reponame": "seaborn", "testpath": "tests/test_miscplot.py", "testname": "test_miscplot.py", "funcname": "test_palplot_size", "imports": ["import matplotlib.pyplot as plt", "from seaborn import miscplot as misc", "from seaborn.palettes import color_palette", "from .test_utils import _network"], "code": "def test_palplot_size(self):\n    pal4 = color_palette('husl', 4)\n    misc.palplot(pal4)\n    size4 = plt.gcf().get_size_inches()\n    assert (tuple(size4) == (4, 1))\n    pal5 = color_palette('husl', 5)\n    misc.palplot(pal5)\n    size5 = plt.gcf().get_size_inches()\n    assert (tuple(size5) == (5, 1))\n    palbig = color_palette('husl', 3)\n    misc.palplot(palbig, 2)\n    sizebig = plt.gcf().get_size_inches()\n    assert (tuple(sizebig) == (6, 2))", "masked_code": "def test_palplot_size(self):\n    pal4 = color_palette('husl', 4)\n    misc.palplot(pal4)\n    size4 = plt.gcf().get_size_inches()\n    assert (tuple(size4) == (4, 1))\n    pal5 = color_palette('husl', 5)\n    misc.palplot(pal5)\n    size5 = plt.gcf().get_size_inches()\n    assert (tuple(size5) == '???')\n    palbig = color_palette('husl', 3)\n    misc.palplot(palbig, 2)\n    sizebig = plt.gcf().get_size_inches()\n    assert (tuple(sizebig) == (6, 2))", "ground_truth": "(5, 1)", "quality_analysis": {"complexity_score": 8, "left_complexity": 4, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestPalPlot"}
{"task_id": "seaborn_717", "reponame": "seaborn", "testpath": "tests/test_miscplot.py", "testname": "test_miscplot.py", "funcname": "test_palplot_size", "imports": ["import matplotlib.pyplot as plt", "from seaborn import miscplot as misc", "from seaborn.palettes import color_palette", "from .test_utils import _network"], "code": "def test_palplot_size(self):\n    pal4 = color_palette('husl', 4)\n    misc.palplot(pal4)\n    size4 = plt.gcf().get_size_inches()\n    assert (tuple(size4) == (4, 1))\n    pal5 = color_palette('husl', 5)\n    misc.palplot(pal5)\n    size5 = plt.gcf().get_size_inches()\n    assert (tuple(size5) == (5, 1))\n    palbig = color_palette('husl', 3)\n    misc.palplot(palbig, 2)\n    sizebig = plt.gcf().get_size_inches()\n    assert (tuple(sizebig) == (6, 2))", "masked_code": "def test_palplot_size(self):\n    pal4 = color_palette('husl', 4)\n    misc.palplot(pal4)\n    size4 = plt.gcf().get_size_inches()\n    assert (tuple(size4) == (4, 1))\n    pal5 = color_palette('husl', 5)\n    misc.palplot(pal5)\n    size5 = plt.gcf().get_size_inches()\n    assert (tuple(size5) == (5, 1))\n    palbig = color_palette('husl', 3)\n    misc.palplot(palbig, 2)\n    sizebig = plt.gcf().get_size_inches()\n    assert (tuple(sizebig) == '???')", "ground_truth": "(6, 2)", "quality_analysis": {"complexity_score": 8, "left_complexity": 4, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestPalPlot"}
{"task_id": "seaborn_1368", "reponame": "seaborn", "testpath": "tests/_stats/test_regression.py", "testname": "test_regression.py", "funcname": "test_one_grouper", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal, assert_array_almost_equal", "from pandas.testing import assert_frame_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.regression import PolyFit"], "code": "def test_one_grouper(self, df):\n    groupby = GroupBy(['group'])\n    gridsize = 50\n    res = PolyFit(gridsize=gridsize)(df, groupby, 'x', {})\n    assert (res.columns.to_list() == ['x', 'y', 'group'])\n    ngroups = df['group'].nunique()\n    assert_array_equal(res.index, np.arange((ngroups * gridsize)))\n    for (_, part) in res.groupby('group'):\n        grid = np.linspace(part['x'].min(), part['x'].max(), gridsize)\n        assert_array_equal(part['x'], grid)\n        assert part['y'].diff().diff().dropna().abs().gt(0).all()", "masked_code": "def test_one_grouper(self, df):\n    groupby = GroupBy(['group'])\n    gridsize = 50\n    res = PolyFit(gridsize=gridsize)(df, groupby, 'x', {})\n    assert (res.columns.to_list() == '???')\n    ngroups = df['group'].nunique()\n    assert_array_equal(res.index, np.arange((ngroups * gridsize)))\n    for (_, part) in res.groupby('group'):\n        grid = np.linspace(part['x'].min(), part['x'].max(), gridsize)\n        assert_array_equal(part['x'], grid)\n        assert part['y'].diff().diff().dropna().abs().gt(0).all()", "ground_truth": "['x', 'y', 'group']", "quality_analysis": {"complexity_score": 8, "left_complexity": 3, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestPolyFit"}
{"task_id": "seaborn_1156", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == '???')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1157", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == '???')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1158", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == '???')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1159", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == '???')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1160", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == '???')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1161", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == '???')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1162", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == '???')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1163", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == '???')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1164", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == '???')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'categorical'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1165", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == '???')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1166", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == '???')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'categorical'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1167", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == '???')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'boolean'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1168", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == '???')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'categorical'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1169", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == '???')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'categorical'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1170", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == '???')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'categorical'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1171", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == '???')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'categorical'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1172", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == '???')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'boolean'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1173", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == '???')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'numeric'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1174", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == '???')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'boolean'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1175", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([1.0, 2.0, 3.0])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(int)) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1, 2, 3, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, np.nan])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([1, 2, pd.NA], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['1', '2', '3'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, False, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.timedelta_range(1, periods=3, freq='D').to_series()\n    assert (variable_type(s) == 'categorical')\n    s_cat = s.astype('category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.Series([pd.Timestamp(1), pd.Timestamp(2)])\n    assert (variable_type(s) == '???')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": "'datetime'", "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
