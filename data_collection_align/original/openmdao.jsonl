{"task_id": "openmdao_4", "reponame": "openmdao", "testpath": "openmdao/core/tests/test_impl_comp.py", "testname": "test_impl_comp.py", "funcname": "test_add_input_output_retval", "imports": ["import unittest", "from io import StringIO", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal, assert_check_totals", "from openmdao.utils.general_utils import remove_whitespace", "from openmdao.test_suite.components.sellar import SellarImplicitDis1, SellarImplicitDis2"], "code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': set()}\n    expected_ivp_output = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': set()}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=3.0, units='ft')\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "masked_code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': set()}\n    expected_ivp_output = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': set()}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=3.0, units='ft')\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "ImplCompTestCase"}
{"task_id": "openmdao_5", "reponame": "openmdao", "testpath": "openmdao/core/tests/test_impl_comp.py", "testname": "test_impl_comp.py", "funcname": "test_add_input_output_retval", "imports": ["import unittest", "from io import StringIO", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal, assert_check_totals", "from openmdao.utils.general_utils import remove_whitespace", "from openmdao.test_suite.components.sellar import SellarImplicitDis1, SellarImplicitDis2"], "code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': set()}\n    expected_ivp_output = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': set()}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=3.0, units='ft')\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "masked_code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': set()}\n    expected_ivp_output = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': set()}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=3.0, units='ft')\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "ImplCompTestCase"}
{"task_id": "openmdao_6", "reponame": "openmdao", "testpath": "openmdao/core/tests/test_impl_comp.py", "testname": "test_impl_comp.py", "funcname": "test_add_input_output_retval", "imports": ["import unittest", "from io import StringIO", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal, assert_check_totals", "from openmdao.utils.general_utils import remove_whitespace", "from openmdao.test_suite.components.sellar import SellarImplicitDis1, SellarImplicitDis2"], "code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': set()}\n    expected_ivp_output = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': set()}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=3.0, units='ft')\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "masked_code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': set()}\n    expected_ivp_output = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': set()}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=3.0, units='ft')\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "ImplCompTestCase"}
{"task_id": "openmdao_7", "reponame": "openmdao", "testpath": "openmdao/core/tests/test_impl_comp.py", "testname": "test_impl_comp.py", "funcname": "test_add_input_output_retval", "imports": ["import unittest", "from io import StringIO", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal, assert_check_totals", "from openmdao.utils.general_utils import remove_whitespace", "from openmdao.test_suite.components.sellar import SellarImplicitDis1, SellarImplicitDis2"], "code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': set()}\n    expected_ivp_output = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': set()}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=3.0, units='ft')\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "masked_code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': set()}\n    expected_ivp_output = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': set()}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=3.0, units='ft')\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "ImplCompTestCase"}
{"task_id": "openmdao_8", "reponame": "openmdao", "testpath": "openmdao/core/tests/test_indep_var_comp.py", "testname": "test_indep_var_comp.py", "funcname": "test_add_output_retval", "imports": ["import unittest", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal"], "code": "def test_add_output_retval(self):\n    expected = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:indep_var', 'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': {'openmdao:indep_var'}}\n\n    class IDVComp(om.IndepVarComp):\n\n        def setup(self):\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('idv', IDVComp())\n    prob.setup()", "masked_code": "def test_add_output_retval(self):\n    expected = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:indep_var', 'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': {'openmdao:indep_var'}}\n\n    class IDVComp(om.IndepVarComp):\n\n        def setup(self):\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('idv', IDVComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestIndepVarComp"}
{"task_id": "openmdao_9", "reponame": "openmdao", "testpath": "openmdao/core/tests/test_indep_var_comp.py", "testname": "test_indep_var_comp.py", "funcname": "test_add_output_retval", "imports": ["import unittest", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal"], "code": "def test_add_output_retval(self):\n    expected = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:indep_var', 'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': {'openmdao:indep_var'}}\n\n    class IDVComp(om.IndepVarComp):\n\n        def setup(self):\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('idv', IDVComp())\n    prob.setup()", "masked_code": "def test_add_output_retval(self):\n    expected = {'val': 3, 'shape': (1,), 'size': 1, 'units': 'ft', 'desc': '', 'tags': {'openmdao:indep_var', 'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 3, 'type': int, 'desc': '', 'tags': {'openmdao:indep_var'}}\n\n    class IDVComp(om.IndepVarComp):\n\n        def setup(self):\n            meta = self.add_output('y', val=3.0, units='ft')\n            for (key, val) in expected.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('disc', val=3)\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('idv', IDVComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestIndepVarComp"}
