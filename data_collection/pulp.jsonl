{"task_id": "pulp_0", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "classname": null, "funcname": "test_lpdot", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_lpdot():\n    x = LpVariable(name='x')\n    product = lpDot(1, (2 * x))\n    assert (product.toDict() == [{'name': 'x', 'value': 2}])", "masked_code": "def test_lpdot():\n    x = LpVariable(name='x')\n    product = lpDot(1, (2 * x))\n    assert (product.toDict() == '???')", "ground_truth": "[{'name': 'x', 'value': 2}]", "quality_analysis": {"complexity_score": 12, "left_complexity": 3, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_1", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "classname": null, "funcname": "test_pulp_002", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_pulp_002():\n    '\\n    Test the lpDot operation\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [1, 2, 3]\n    assert (dict(lpDot([x, y, z], a)) == {x: 1, y: 2, z: 3})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {x: 2, y: 4, z: 6})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {x: 1, y: 3, z: 5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {x: 1, y: 3, z: 5})", "masked_code": "def test_pulp_002():\n    '\\n    Test the lpDot operation\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [1, 2, 3]\n    assert (dict(lpDot([x, y, z], a)) == '???')\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {x: 2, y: 4, z: 6})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {x: 1, y: 3, z: 5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {x: 1, y: 3, z: 5})", "ground_truth": "{x: 1, y: 2, z: 3}", "quality_analysis": {"complexity_score": 21, "left_complexity": 12, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_2", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "classname": null, "funcname": "test_pulp_002", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_pulp_002():\n    '\\n    Test the lpDot operation\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [1, 2, 3]\n    assert (dict(lpDot([x, y, z], a)) == {x: 1, y: 2, z: 3})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {x: 2, y: 4, z: 6})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {x: 1, y: 3, z: 5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {x: 1, y: 3, z: 5})", "masked_code": "def test_pulp_002():\n    '\\n    Test the lpDot operation\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [1, 2, 3]\n    assert (dict(lpDot([x, y, z], a)) == {x: 1, y: 2, z: 3})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == '???')\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {x: 1, y: 3, z: 5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {x: 1, y: 3, z: 5})", "ground_truth": "{x: 2, y: 4, z: 6}", "quality_analysis": {"complexity_score": 30, "left_complexity": 21, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_3", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "classname": null, "funcname": "test_pulp_002", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_pulp_002():\n    '\\n    Test the lpDot operation\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [1, 2, 3]\n    assert (dict(lpDot([x, y, z], a)) == {x: 1, y: 2, z: 3})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {x: 2, y: 4, z: 6})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {x: 1, y: 3, z: 5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {x: 1, y: 3, z: 5})", "masked_code": "def test_pulp_002():\n    '\\n    Test the lpDot operation\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [1, 2, 3]\n    assert (dict(lpDot([x, y, z], a)) == {x: 1, y: 2, z: 3})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {x: 2, y: 4, z: 6})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == '???')\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {x: 1, y: 3, z: 5})", "ground_truth": "{x: 1, y: 3, z: 5}", "quality_analysis": {"complexity_score": 27, "left_complexity": 18, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_4", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "classname": null, "funcname": "test_pulp_002", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_pulp_002():\n    '\\n    Test the lpDot operation\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [1, 2, 3]\n    assert (dict(lpDot([x, y, z], a)) == {x: 1, y: 2, z: 3})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {x: 2, y: 4, z: 6})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {x: 1, y: 3, z: 5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {x: 1, y: 3, z: 5})", "masked_code": "def test_pulp_002():\n    '\\n    Test the lpDot operation\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [1, 2, 3]\n    assert (dict(lpDot([x, y, z], a)) == {x: 1, y: 2, z: 3})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {x: 2, y: 4, z: 6})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {x: 1, y: 3, z: 5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == '???')", "ground_truth": "{x: 1, y: 3, z: 5}", "quality_analysis": {"complexity_score": 27, "left_complexity": 18, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_5", "reponame": "pulp", "testpath": "pulp/tests/test_pulp.py", "testname": "test_pulp.py", "classname": "GLPK_CMDTest", "funcname": "test_issue814_rounding_mip", "imports": ["import functools", "import os", "import re", "import tempfile", "import unittest", "from decimal import Decimal", "from typing import Union, Optional, Type", "from pulp import FixedElasticSubProblem, LpAffineExpression, LpConstraint, LpConstraintVar, LpFractionConstraint, LpProblem, LpVariable, PulpSolverError", "from pulp import constants as const", "from pulp import lpSum", "import pulp.apis as solvers", "from pulp.constants import PulpError", "from pulp.tests.bin_packing_problem import create_bin_packing_problem", "from pulp.utilities import makeDict"], "code": "def test_issue814_rounding_mip(self):\n    '\\n        Test there is no rounding issue for MIP problems as described in #814\\n        '\n    ub = 999999999999\n    assert (int(format(ub, '.12g')) == ub)\n    assert (float(format((ub + 2), '.12g')) != float((ub + 2)))\n    model = LpProblem('mip-814', const.LpMaximize)\n    Q = LpVariable('Q', cat='Integer', lowBound=0, upBound=ub)\n    model += Q\n    model += (Q >= 0)\n    model.solve(self.solver)\n    assert (Q.value() == ub)", "masked_code": "def test_issue814_rounding_mip(self):\n    '\\n        Test there is no rounding issue for MIP problems as described in #814\\n        '\n    ub = 999999999999\n    assert (int(format(ub, '.12g')) == '???')\n    assert (float(format((ub + 2), '.12g')) != float((ub + 2)))\n    model = LpProblem('mip-814', const.LpMaximize)\n    Q = LpVariable('Q', cat='Integer', lowBound=0, upBound=ub)\n    model += Q\n    model += (Q >= 0)\n    model.solve(self.solver)\n    assert (Q.value() == ub)", "ground_truth": "ub", "quality_analysis": {"complexity_score": 9, "left_complexity": 8, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_6", "reponame": "pulp", "testpath": "pulp/tests/test_pulp.py", "testname": "test_pulp.py", "classname": "GLPK_CMDTest", "funcname": "test_issue814_rounding_mip", "imports": ["import functools", "import os", "import re", "import tempfile", "import unittest", "from decimal import Decimal", "from typing import Union, Optional, Type", "from pulp import FixedElasticSubProblem, LpAffineExpression, LpConstraint, LpConstraintVar, LpFractionConstraint, LpProblem, LpVariable, PulpSolverError", "from pulp import constants as const", "from pulp import lpSum", "import pulp.apis as solvers", "from pulp.constants import PulpError", "from pulp.tests.bin_packing_problem import create_bin_packing_problem", "from pulp.utilities import makeDict"], "code": "def test_issue814_rounding_mip(self):\n    '\\n        Test there is no rounding issue for MIP problems as described in #814\\n        '\n    ub = 999999999999\n    assert (int(format(ub, '.12g')) == ub)\n    assert (float(format((ub + 2), '.12g')) != float((ub + 2)))\n    model = LpProblem('mip-814', const.LpMaximize)\n    Q = LpVariable('Q', cat='Integer', lowBound=0, upBound=ub)\n    model += Q\n    model += (Q >= 0)\n    model.solve(self.solver)\n    assert (Q.value() == ub)", "masked_code": "def test_issue814_rounding_mip(self):\n    '\\n        Test there is no rounding issue for MIP problems as described in #814\\n        '\n    ub = 999999999999\n    assert (int(format(ub, '.12g')) == ub)\n    assert (float(format((ub + 2), '.12g')) != float((ub + 2)))\n    model = LpProblem('mip-814', const.LpMaximize)\n    Q = LpVariable('Q', cat='Integer', lowBound=0, upBound=ub)\n    model += Q\n    model += (Q >= 0)\n    model.solve(self.solver)\n    assert (Q.value() == '???')", "ground_truth": "ub", "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_7", "reponame": "pulp", "testpath": "pulp/tests/test_pulp.py", "testname": "test_pulp.py", "classname": "GLPK_CMDTest", "funcname": "test_issue814_rounding_lp", "imports": ["import functools", "import os", "import re", "import tempfile", "import unittest", "from decimal import Decimal", "from typing import Union, Optional, Type", "from pulp import FixedElasticSubProblem, LpAffineExpression, LpConstraint, LpConstraintVar, LpFractionConstraint, LpProblem, LpVariable, PulpSolverError", "from pulp import constants as const", "from pulp import lpSum", "import pulp.apis as solvers", "from pulp.constants import PulpError", "from pulp.tests.bin_packing_problem import create_bin_packing_problem", "from pulp.utilities import makeDict"], "code": "def test_issue814_rounding_lp(self):\n    '\\n        Test there is no rounding issue for LP (simplex method) problems as described in #814\\n        '\n    ub = 999999999999.0\n    assert (float(format(ub, '.12g')) == ub)\n    assert (float(format((ub + 0.1), '.12g')) != (ub + 0.1))\n    for simplex in ['primal', 'dual']:\n        model = LpProblem(f'lp-814-{simplex}', const.LpMaximize)\n        Q = LpVariable('Q', lowBound=0, upBound=ub)\n        model += Q\n        model += (Q >= 0)\n        self.solver.options.append(('--' + simplex))\n        model.solve(self.solver)\n        self.solver.options = self.solver.options[:(- 1)]\n        assert (Q.value() == ub)", "masked_code": "def test_issue814_rounding_lp(self):\n    '\\n        Test there is no rounding issue for LP (simplex method) problems as described in #814\\n        '\n    ub = 999999999999.0\n    assert (float(format(ub, '.12g')) == '???')\n    assert (float(format((ub + 0.1), '.12g')) != (ub + 0.1))\n    for simplex in ['primal', 'dual']:\n        model = LpProblem(f'lp-814-{simplex}', const.LpMaximize)\n        Q = LpVariable('Q', lowBound=0, upBound=ub)\n        model += Q\n        model += (Q >= 0)\n        self.solver.options.append(('--' + simplex))\n        model.solve(self.solver)\n        self.solver.options = self.solver.options[:(- 1)]\n        assert (Q.value() == ub)", "ground_truth": "ub", "quality_analysis": {"complexity_score": 9, "left_complexity": 8, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_8", "reponame": "pulp", "testpath": "pulp/tests/test_pulp.py", "testname": "test_pulp.py", "classname": "GLPK_CMDTest", "funcname": "test_issue814_rounding_lp", "imports": ["import functools", "import os", "import re", "import tempfile", "import unittest", "from decimal import Decimal", "from typing import Union, Optional, Type", "from pulp import FixedElasticSubProblem, LpAffineExpression, LpConstraint, LpConstraintVar, LpFractionConstraint, LpProblem, LpVariable, PulpSolverError", "from pulp import constants as const", "from pulp import lpSum", "import pulp.apis as solvers", "from pulp.constants import PulpError", "from pulp.tests.bin_packing_problem import create_bin_packing_problem", "from pulp.utilities import makeDict"], "code": "def test_issue814_rounding_lp(self):\n    '\\n        Test there is no rounding issue for LP (simplex method) problems as described in #814\\n        '\n    ub = 999999999999.0\n    assert (float(format(ub, '.12g')) == ub)\n    assert (float(format((ub + 0.1), '.12g')) != (ub + 0.1))\n    for simplex in ['primal', 'dual']:\n        model = LpProblem(f'lp-814-{simplex}', const.LpMaximize)\n        Q = LpVariable('Q', lowBound=0, upBound=ub)\n        model += Q\n        model += (Q >= 0)\n        self.solver.options.append(('--' + simplex))\n        model.solve(self.solver)\n        self.solver.options = self.solver.options[:(- 1)]\n        assert (Q.value() == ub)", "masked_code": "def test_issue814_rounding_lp(self):\n    '\\n        Test there is no rounding issue for LP (simplex method) problems as described in #814\\n        '\n    ub = 999999999999.0\n    assert (float(format(ub, '.12g')) == ub)\n    assert (float(format((ub + 0.1), '.12g')) != (ub + 0.1))\n    for simplex in ['primal', 'dual']:\n        model = LpProblem(f'lp-814-{simplex}', const.LpMaximize)\n        Q = LpVariable('Q', lowBound=0, upBound=ub)\n        model += Q\n        model += (Q >= 0)\n        self.solver.options.append(('--' + simplex))\n        model.solve(self.solver)\n        self.solver.options = self.solver.options[:(- 1)]\n        assert (Q.value() == '???')", "ground_truth": "ub", "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_9", "reponame": "pulp", "testpath": "pulp/tests/test_sparse.py", "testname": "test_sparse.py", "classname": "SparseTest", "funcname": "test_sparse", "imports": ["import unittest", "from pulp.sparse import Matrix"], "code": "def test_sparse(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[str](rows, cols)\n    mat.add(1, 52, 'item')\n    mat.add(2, 54, 'stuff')\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], ['item', 'stuff']))\n    assert (mat.get((1, 52)) == 'item')\n    mat.addcol(51, {2: 'hello'})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], ['hello', 'item', 'stuff']))", "masked_code": "def test_sparse(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[str](rows, cols)\n    mat.add(1, 52, 'item')\n    mat.add(2, 54, 'stuff')\n    assert (mat.col_based_arrays() == '???')\n    assert (mat.get((1, 52)) == 'item')\n    mat.addcol(51, {2: 'hello'})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], ['hello', 'item', 'stuff']))", "ground_truth": "(2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], ['item', 'stuff'])", "quality_analysis": {"complexity_score": 39, "left_complexity": 3, "right_complexity": 36, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_10", "reponame": "pulp", "testpath": "pulp/tests/test_sparse.py", "testname": "test_sparse.py", "classname": "SparseTest", "funcname": "test_sparse", "imports": ["import unittest", "from pulp.sparse import Matrix"], "code": "def test_sparse(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[str](rows, cols)\n    mat.add(1, 52, 'item')\n    mat.add(2, 54, 'stuff')\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], ['item', 'stuff']))\n    assert (mat.get((1, 52)) == 'item')\n    mat.addcol(51, {2: 'hello'})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], ['hello', 'item', 'stuff']))", "masked_code": "def test_sparse(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[str](rows, cols)\n    mat.add(1, 52, 'item')\n    mat.add(2, 54, 'stuff')\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], ['item', 'stuff']))\n    assert (mat.get((1, 52)) == '???')\n    mat.addcol(51, {2: 'hello'})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], ['hello', 'item', 'stuff']))", "ground_truth": "'item'", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_11", "reponame": "pulp", "testpath": "pulp/tests/test_sparse.py", "testname": "test_sparse.py", "classname": "SparseTest", "funcname": "test_sparse", "imports": ["import unittest", "from pulp.sparse import Matrix"], "code": "def test_sparse(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[str](rows, cols)\n    mat.add(1, 52, 'item')\n    mat.add(2, 54, 'stuff')\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], ['item', 'stuff']))\n    assert (mat.get((1, 52)) == 'item')\n    mat.addcol(51, {2: 'hello'})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], ['hello', 'item', 'stuff']))", "masked_code": "def test_sparse(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[str](rows, cols)\n    mat.add(1, 52, 'item')\n    mat.add(2, 54, 'stuff')\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], ['item', 'stuff']))\n    assert (mat.get((1, 52)) == 'item')\n    mat.addcol(51, {2: 'hello'})\n    assert (mat.col_based_arrays() == '???')", "ground_truth": "(3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], ['hello', 'item', 'stuff'])", "quality_analysis": {"complexity_score": 41, "left_complexity": 3, "right_complexity": 38, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_12", "reponame": "pulp", "testpath": "pulp/tests/test_sparse.py", "testname": "test_sparse.py", "classname": "SparseTest", "funcname": "test_sparse_floats", "imports": ["import unittest", "from pulp.sparse import Matrix"], "code": "def test_sparse_floats(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[float](rows, cols)\n    mat.add(1, 52, 1.234)\n    mat.add(2, 54, 5.678)\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], [1.234, 5.678]))\n    assert (mat.get((1, 52)) == 1.234)\n    mat.addcol(51, {2: 9.876})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], [9.876, 1.234, 5.678]))", "masked_code": "def test_sparse_floats(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[float](rows, cols)\n    mat.add(1, 52, 1.234)\n    mat.add(2, 54, 5.678)\n    assert (mat.col_based_arrays() == '???')\n    assert (mat.get((1, 52)) == 1.234)\n    mat.addcol(51, {2: 9.876})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], [9.876, 1.234, 5.678]))", "ground_truth": "(2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], [1.234, 5.678])", "quality_analysis": {"complexity_score": 39, "left_complexity": 3, "right_complexity": 36, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_13", "reponame": "pulp", "testpath": "pulp/tests/test_sparse.py", "testname": "test_sparse.py", "classname": "SparseTest", "funcname": "test_sparse_floats", "imports": ["import unittest", "from pulp.sparse import Matrix"], "code": "def test_sparse_floats(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[float](rows, cols)\n    mat.add(1, 52, 1.234)\n    mat.add(2, 54, 5.678)\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], [1.234, 5.678]))\n    assert (mat.get((1, 52)) == 1.234)\n    mat.addcol(51, {2: 9.876})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], [9.876, 1.234, 5.678]))", "masked_code": "def test_sparse_floats(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[float](rows, cols)\n    mat.add(1, 52, 1.234)\n    mat.add(2, 54, 5.678)\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], [1.234, 5.678]))\n    assert (mat.get((1, 52)) == '???')\n    mat.addcol(51, {2: 9.876})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], [9.876, 1.234, 5.678]))", "ground_truth": "1.234", "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pulp_14", "reponame": "pulp", "testpath": "pulp/tests/test_sparse.py", "testname": "test_sparse.py", "classname": "SparseTest", "funcname": "test_sparse_floats", "imports": ["import unittest", "from pulp.sparse import Matrix"], "code": "def test_sparse_floats(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[float](rows, cols)\n    mat.add(1, 52, 1.234)\n    mat.add(2, 54, 5.678)\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], [1.234, 5.678]))\n    assert (mat.get((1, 52)) == 1.234)\n    mat.addcol(51, {2: 9.876})\n    assert (mat.col_based_arrays() == (3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], [9.876, 1.234, 5.678]))", "masked_code": "def test_sparse_floats(self) -> None:\n    rows = list(range(10))\n    cols = list(range(50, 60))\n    mat = Matrix[float](rows, cols)\n    mat.add(1, 52, 1.234)\n    mat.add(2, 54, 5.678)\n    assert (mat.col_based_arrays() == (2, [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 2], [1.234, 5.678]))\n    assert (mat.get((1, 52)) == 1.234)\n    mat.addcol(51, {2: 9.876})\n    assert (mat.col_based_arrays() == '???')", "ground_truth": "(3, [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], [9.876, 1.234, 5.678])", "quality_analysis": {"complexity_score": 41, "left_complexity": 3, "right_complexity": 38, "is_quality": true, "reason": "High quality assertion"}}
