{"task_id": "climlab_0", "reponame": "climlab", "testpath": "climlab/tests/test_bandrc.py", "testname": "test_bandrc.py", "classname": null, "funcname": "test_model_creation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.fast\ndef test_model_creation(model):\n    'Just make sure we can create a model.'\n    assert (len(model.Tatm) == 30)", "masked_code": "@pytest.mark.fast\ndef test_model_creation(model):\n    'Just make sure we can create a model.'\n    assert (len(model.Tatm) == '???')", "ground_truth": "30", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_1", "reponame": "climlab", "testpath": "climlab/tests/test_cam3rad.py", "testname": "test_cam3rad.py", "classname": null, "funcname": "test_cam3_multidim", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "from climlab.tests.xarray_test import to_xarray", "import pytest"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_cam3_multidim():\n    state = climlab.column_state(num_lev=40, num_lat=3, water_depth=5.0)\n    rad = climlab.radiation.CAM3(state=state)\n    rad.step_forward()\n    assert (rad.OLR.shape == rad.Ts.shape)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_cam3_multidim():\n    state = climlab.column_state(num_lev=40, num_lat=3, water_depth=5.0)\n    rad = climlab.radiation.CAM3(state=state)\n    rad.step_forward()\n    assert (rad.OLR.shape == '???')", "ground_truth": "rad.Ts.shape", "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_2", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "classname": null, "funcname": "test_state", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_state():\n    initialT0 = 15.0\n    sfc = climlab.domain.surface_2D(num_lat=90, num_lon=180)\n    sfc = climlab.domain.surface_2D(lat=[(- 90.0), 0.0, 90.0], lon=[(- 180.0), 0.0, 180.0])\n    state = climlab.surface_state(T0=initialT0, num_lat=90, num_lon=180)\n    assert (state.Ts.ndim == 3)\n    assert (state.Ts.shape == (90, 180, 1))\n    assert np.isclose(climlab.global_mean(state.Ts), initialT0, atol=0.01)", "masked_code": "@pytest.mark.fast\ndef test_state():\n    initialT0 = 15.0\n    sfc = climlab.domain.surface_2D(num_lat=90, num_lon=180)\n    sfc = climlab.domain.surface_2D(lat=[(- 90.0), 0.0, 90.0], lon=[(- 180.0), 0.0, 180.0])\n    state = climlab.surface_state(T0=initialT0, num_lat=90, num_lon=180)\n    assert (state.Ts.ndim == '???')\n    assert (state.Ts.shape == (90, 180, 1))\n    assert np.isclose(climlab.global_mean(state.Ts), initialT0, atol=0.01)", "ground_truth": "3", "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_3", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "classname": null, "funcname": "test_state", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_state():\n    initialT0 = 15.0\n    sfc = climlab.domain.surface_2D(num_lat=90, num_lon=180)\n    sfc = climlab.domain.surface_2D(lat=[(- 90.0), 0.0, 90.0], lon=[(- 180.0), 0.0, 180.0])\n    state = climlab.surface_state(T0=initialT0, num_lat=90, num_lon=180)\n    assert (state.Ts.ndim == 3)\n    assert (state.Ts.shape == (90, 180, 1))\n    assert np.isclose(climlab.global_mean(state.Ts), initialT0, atol=0.01)", "masked_code": "@pytest.mark.fast\ndef test_state():\n    initialT0 = 15.0\n    sfc = climlab.domain.surface_2D(num_lat=90, num_lon=180)\n    sfc = climlab.domain.surface_2D(lat=[(- 90.0), 0.0, 90.0], lon=[(- 180.0), 0.0, 180.0])\n    state = climlab.surface_state(T0=initialT0, num_lat=90, num_lon=180)\n    assert (state.Ts.ndim == 3)\n    assert (state.Ts.shape == '???')\n    assert np.isclose(climlab.global_mean(state.Ts), initialT0, atol=0.01)", "ground_truth": "(90, 180, 1)", "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_4", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "classname": null, "funcname": "test_2D_EBM", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_2D_EBM():\n    'Can we step forward a 2D lat/lon EBM?'\n    m = climlab.EBM_annual(num_lon=4)\n    m.step_forward()\n    assert (m.state.Ts.shape == (90, 4, 1))\n    m.to_xarray()", "masked_code": "@pytest.mark.fast\ndef test_2D_EBM():\n    'Can we step forward a 2D lat/lon EBM?'\n    m = climlab.EBM_annual(num_lon=4)\n    m.step_forward()\n    assert (m.state.Ts.shape == '???')\n    m.to_xarray()", "ground_truth": "(90, 4, 1)", "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_5", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "classname": null, "funcname": "test_2D_EBM_seasonal", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_2D_EBM_seasonal():\n    'Can we step forward a 2D seasonal lat/lon EBM?'\n    m = climlab.EBM_seasonal(num_lon=4)\n    m.step_forward()\n    assert (m.state.Ts.shape == (90, 4, 1))\n    m.to_xarray()", "masked_code": "@pytest.mark.fast\ndef test_2D_EBM_seasonal():\n    'Can we step forward a 2D seasonal lat/lon EBM?'\n    m = climlab.EBM_seasonal(num_lon=4)\n    m.step_forward()\n    assert (m.state.Ts.shape == '???')\n    m.to_xarray()", "ground_truth": "(90, 4, 1)", "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_6", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "classname": null, "funcname": "test_2D_insolation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_2D_insolation():\n    m = climlab.EBM_annual(num_lon=4)\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(299.3046767096183))\n    sfc = m.domains['Ts']\n    m.add_subprocess('insolation', climlab.radiation.P2Insolation(domains=sfc, **m.param))\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(300.344))", "masked_code": "@pytest.mark.fast\ndef test_2D_insolation():\n    m = climlab.EBM_annual(num_lon=4)\n    assert (np.mean(m.subprocess['insolation'].insolation) == '???')\n    sfc = m.domains['Ts']\n    m.add_subprocess('insolation', climlab.radiation.P2Insolation(domains=sfc, **m.param))\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(300.344))", "ground_truth": "pytest.approx(299.3046767096183)", "quality_analysis": {"complexity_score": 9, "left_complexity": 5, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_7", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "classname": null, "funcname": "test_2D_insolation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_2D_insolation():\n    m = climlab.EBM_annual(num_lon=4)\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(299.3046767096183))\n    sfc = m.domains['Ts']\n    m.add_subprocess('insolation', climlab.radiation.P2Insolation(domains=sfc, **m.param))\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(300.344))", "masked_code": "@pytest.mark.fast\ndef test_2D_insolation():\n    m = climlab.EBM_annual(num_lon=4)\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(299.3046767096183))\n    sfc = m.domains['Ts']\n    m.add_subprocess('insolation', climlab.radiation.P2Insolation(domains=sfc, **m.param))\n    assert (np.mean(m.subprocess['insolation'].insolation) == '???')", "ground_truth": "pytest.approx(300.344)", "quality_analysis": {"complexity_score": 9, "left_complexity": 5, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_8", "reponame": "climlab", "testpath": "climlab/tests/test_ebm.py", "testname": "test_ebm.py", "classname": null, "funcname": "test_model_creation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.tests.xarray_test import to_xarray", "from climlab.utils.legendre import P2"], "code": "@pytest.mark.fast\ndef test_model_creation(EBM_seasonal):\n    'Just make sure we can create a model.'\n    assert (len(EBM_seasonal.Ts) == 90)", "masked_code": "@pytest.mark.fast\ndef test_model_creation(EBM_seasonal):\n    'Just make sure we can create a model.'\n    assert (len(EBM_seasonal.Ts) == '???')", "ground_truth": "90", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_9", "reponame": "climlab", "testpath": "climlab/tests/test_emanuel_convection.py", "testname": "test_emanuel_convection.py", "classname": null, "funcname": "test_convect_tendencies", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "from climlab.convection import emanuel_convection", "from climlab.tests.xarray_test import to_xarray", "import pytest", "import sys"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_convect_tendencies():\n    state = climlab.column_state(num_lev=num_lev)\n    state.Tatm[:] = T\n    state['q'] = ((state.Tatm * 0.0) + Q)\n    state['U'] = ((state.Tatm * 0.0) + U)\n    state['V'] = ((state.Tatm * 0.0) + V)\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert (conv.IFLAG == 1)\n    tol = 1e-05\n    assert (conv.CBMF == pytest.approx(CBMF, rel=tol))\n    tend = conv.tendencies\n    assert (FT == pytest.approx(tend['Tatm'], rel=tol))\n    assert (FQ == pytest.approx(tend['q'], rel=tol))\n    assert (FU == pytest.approx(tend['U'], rel=tol))\n    assert (FV == pytest.approx(tend['V'], rel=tol))", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_convect_tendencies():\n    state = climlab.column_state(num_lev=num_lev)\n    state.Tatm[:] = T\n    state['q'] = ((state.Tatm * 0.0) + Q)\n    state['U'] = ((state.Tatm * 0.0) + U)\n    state['V'] = ((state.Tatm * 0.0) + V)\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert (conv.IFLAG == 1)\n    tol = 1e-05\n    assert (conv.CBMF == '???')\n    tend = conv.tendencies\n    assert (FT == pytest.approx(tend['Tatm'], rel=tol))\n    assert (FQ == pytest.approx(tend['q'], rel=tol))\n    assert (FU == pytest.approx(tend['U'], rel=tol))\n    assert (FV == pytest.approx(tend['V'], rel=tol))", "ground_truth": "pytest.approx(CBMF, rel=tol)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_10", "reponame": "climlab", "testpath": "climlab/tests/test_emanuel_convection.py", "testname": "test_emanuel_convection.py", "classname": null, "funcname": "test_multidim_tendencies", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "from climlab.convection import emanuel_convection", "from climlab.tests.xarray_test import to_xarray", "import pytest", "import sys"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim_tendencies():\n    num_lat = 2\n    state = climlab.column_state(num_lev=num_lev, num_lat=num_lat)\n    state['q'] = (state.Tatm * 0.0)\n    state['U'] = (state.Tatm * 0.0)\n    state['V'] = (state.Tatm * 0.0)\n    for i in range(num_lat):\n        state.Tatm[(i, :)] = T\n        state['q'][(i, :)] += Q\n        state['U'][(i, :)] += U\n        state['V'][(i, :)] += V\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert np.all((conv.IFLAG == 1))\n    tol = 1e-05\n    assert np.all((conv.CBMF == pytest.approx(CBMF, rel=tol)))\n    tend = conv.tendencies\n    assert (np.tile(FT, (num_lat, 1)) == pytest.approx(tend['Tatm'], rel=tol))\n    assert (np.tile(FQ, (num_lat, 1)) == pytest.approx(tend['q'], rel=tol))\n    assert (np.tile(FU, (num_lat, 1)) == pytest.approx(tend['U'], rel=tol))\n    assert (np.tile(FV, (num_lat, 1)) == pytest.approx(tend['V'], rel=tol))", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim_tendencies():\n    num_lat = 2\n    state = climlab.column_state(num_lev=num_lev, num_lat=num_lat)\n    state['q'] = (state.Tatm * 0.0)\n    state['U'] = (state.Tatm * 0.0)\n    state['V'] = (state.Tatm * 0.0)\n    for i in range(num_lat):\n        state.Tatm[(i, :)] = T\n        state['q'][(i, :)] += Q\n        state['U'][(i, :)] += U\n        state['V'][(i, :)] += V\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert np.all((conv.IFLAG == 1))\n    tol = 1e-05\n    assert np.all((conv.CBMF == pytest.approx(CBMF, rel=tol)))\n    tend = conv.tendencies\n    assert (np.tile(FT, (num_lat, 1)) == '???')\n    assert (np.tile(FQ, (num_lat, 1)) == pytest.approx(tend['q'], rel=tol))\n    assert (np.tile(FU, (num_lat, 1)) == pytest.approx(tend['U'], rel=tol))\n    assert (np.tile(FV, (num_lat, 1)) == pytest.approx(tend['V'], rel=tol))", "ground_truth": "pytest.approx(tend['Tatm'], rel=tol)", "quality_analysis": {"complexity_score": 16, "left_complexity": 8, "right_complexity": 8, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_11", "reponame": "climlab", "testpath": "climlab/tests/test_emanuel_convection.py", "testname": "test_emanuel_convection.py", "classname": null, "funcname": "test_multidim_tendencies", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "from climlab.convection import emanuel_convection", "from climlab.tests.xarray_test import to_xarray", "import pytest", "import sys"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim_tendencies():\n    num_lat = 2\n    state = climlab.column_state(num_lev=num_lev, num_lat=num_lat)\n    state['q'] = (state.Tatm * 0.0)\n    state['U'] = (state.Tatm * 0.0)\n    state['V'] = (state.Tatm * 0.0)\n    for i in range(num_lat):\n        state.Tatm[(i, :)] = T\n        state['q'][(i, :)] += Q\n        state['U'][(i, :)] += U\n        state['V'][(i, :)] += V\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert np.all((conv.IFLAG == 1))\n    tol = 1e-05\n    assert np.all((conv.CBMF == pytest.approx(CBMF, rel=tol)))\n    tend = conv.tendencies\n    assert (np.tile(FT, (num_lat, 1)) == pytest.approx(tend['Tatm'], rel=tol))\n    assert (np.tile(FQ, (num_lat, 1)) == pytest.approx(tend['q'], rel=tol))\n    assert (np.tile(FU, (num_lat, 1)) == pytest.approx(tend['U'], rel=tol))\n    assert (np.tile(FV, (num_lat, 1)) == pytest.approx(tend['V'], rel=tol))", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim_tendencies():\n    num_lat = 2\n    state = climlab.column_state(num_lev=num_lev, num_lat=num_lat)\n    state['q'] = (state.Tatm * 0.0)\n    state['U'] = (state.Tatm * 0.0)\n    state['V'] = (state.Tatm * 0.0)\n    for i in range(num_lat):\n        state.Tatm[(i, :)] = T\n        state['q'][(i, :)] += Q\n        state['U'][(i, :)] += U\n        state['V'][(i, :)] += V\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert np.all((conv.IFLAG == 1))\n    tol = 1e-05\n    assert np.all((conv.CBMF == pytest.approx(CBMF, rel=tol)))\n    tend = conv.tendencies\n    assert (np.tile(FT, (num_lat, 1)) == pytest.approx(tend['Tatm'], rel=tol))\n    assert (np.tile(FQ, (num_lat, 1)) == '???')\n    assert (np.tile(FU, (num_lat, 1)) == pytest.approx(tend['U'], rel=tol))\n    assert (np.tile(FV, (num_lat, 1)) == pytest.approx(tend['V'], rel=tol))", "ground_truth": "pytest.approx(tend['q'], rel=tol)", "quality_analysis": {"complexity_score": 16, "left_complexity": 8, "right_complexity": 8, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_12", "reponame": "climlab", "testpath": "climlab/tests/test_emanuel_convection.py", "testname": "test_emanuel_convection.py", "classname": null, "funcname": "test_multidim_tendencies", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "from climlab.convection import emanuel_convection", "from climlab.tests.xarray_test import to_xarray", "import pytest", "import sys"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim_tendencies():\n    num_lat = 2\n    state = climlab.column_state(num_lev=num_lev, num_lat=num_lat)\n    state['q'] = (state.Tatm * 0.0)\n    state['U'] = (state.Tatm * 0.0)\n    state['V'] = (state.Tatm * 0.0)\n    for i in range(num_lat):\n        state.Tatm[(i, :)] = T\n        state['q'][(i, :)] += Q\n        state['U'][(i, :)] += U\n        state['V'][(i, :)] += V\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert np.all((conv.IFLAG == 1))\n    tol = 1e-05\n    assert np.all((conv.CBMF == pytest.approx(CBMF, rel=tol)))\n    tend = conv.tendencies\n    assert (np.tile(FT, (num_lat, 1)) == pytest.approx(tend['Tatm'], rel=tol))\n    assert (np.tile(FQ, (num_lat, 1)) == pytest.approx(tend['q'], rel=tol))\n    assert (np.tile(FU, (num_lat, 1)) == pytest.approx(tend['U'], rel=tol))\n    assert (np.tile(FV, (num_lat, 1)) == pytest.approx(tend['V'], rel=tol))", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim_tendencies():\n    num_lat = 2\n    state = climlab.column_state(num_lev=num_lev, num_lat=num_lat)\n    state['q'] = (state.Tatm * 0.0)\n    state['U'] = (state.Tatm * 0.0)\n    state['V'] = (state.Tatm * 0.0)\n    for i in range(num_lat):\n        state.Tatm[(i, :)] = T\n        state['q'][(i, :)] += Q\n        state['U'][(i, :)] += U\n        state['V'][(i, :)] += V\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert np.all((conv.IFLAG == 1))\n    tol = 1e-05\n    assert np.all((conv.CBMF == pytest.approx(CBMF, rel=tol)))\n    tend = conv.tendencies\n    assert (np.tile(FT, (num_lat, 1)) == pytest.approx(tend['Tatm'], rel=tol))\n    assert (np.tile(FQ, (num_lat, 1)) == pytest.approx(tend['q'], rel=tol))\n    assert (np.tile(FU, (num_lat, 1)) == '???')\n    assert (np.tile(FV, (num_lat, 1)) == pytest.approx(tend['V'], rel=tol))", "ground_truth": "pytest.approx(tend['U'], rel=tol)", "quality_analysis": {"complexity_score": 16, "left_complexity": 8, "right_complexity": 8, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_13", "reponame": "climlab", "testpath": "climlab/tests/test_emanuel_convection.py", "testname": "test_emanuel_convection.py", "classname": null, "funcname": "test_multidim_tendencies", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "from climlab.convection import emanuel_convection", "from climlab.tests.xarray_test import to_xarray", "import pytest", "import sys"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim_tendencies():\n    num_lat = 2\n    state = climlab.column_state(num_lev=num_lev, num_lat=num_lat)\n    state['q'] = (state.Tatm * 0.0)\n    state['U'] = (state.Tatm * 0.0)\n    state['V'] = (state.Tatm * 0.0)\n    for i in range(num_lat):\n        state.Tatm[(i, :)] = T\n        state['q'][(i, :)] += Q\n        state['U'][(i, :)] += U\n        state['V'][(i, :)] += V\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert np.all((conv.IFLAG == 1))\n    tol = 1e-05\n    assert np.all((conv.CBMF == pytest.approx(CBMF, rel=tol)))\n    tend = conv.tendencies\n    assert (np.tile(FT, (num_lat, 1)) == pytest.approx(tend['Tatm'], rel=tol))\n    assert (np.tile(FQ, (num_lat, 1)) == pytest.approx(tend['q'], rel=tol))\n    assert (np.tile(FU, (num_lat, 1)) == pytest.approx(tend['U'], rel=tol))\n    assert (np.tile(FV, (num_lat, 1)) == pytest.approx(tend['V'], rel=tol))", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim_tendencies():\n    num_lat = 2\n    state = climlab.column_state(num_lev=num_lev, num_lat=num_lat)\n    state['q'] = (state.Tatm * 0.0)\n    state['U'] = (state.Tatm * 0.0)\n    state['V'] = (state.Tatm * 0.0)\n    for i in range(num_lat):\n        state.Tatm[(i, :)] = T\n        state['q'][(i, :)] += Q\n        state['U'][(i, :)] += U\n        state['V'][(i, :)] += V\n    assert hasattr(state, 'Tatm')\n    assert hasattr(state, 'q')\n    assert hasattr(state, 'U')\n    assert hasattr(state, 'V')\n    conv = emanuel_convection.EmanuelConvection(state=state, timestep=DELT)\n    conv.step_forward()\n    assert np.all((conv.IFLAG == 1))\n    tol = 1e-05\n    assert np.all((conv.CBMF == pytest.approx(CBMF, rel=tol)))\n    tend = conv.tendencies\n    assert (np.tile(FT, (num_lat, 1)) == pytest.approx(tend['Tatm'], rel=tol))\n    assert (np.tile(FQ, (num_lat, 1)) == pytest.approx(tend['q'], rel=tol))\n    assert (np.tile(FU, (num_lat, 1)) == pytest.approx(tend['U'], rel=tol))\n    assert (np.tile(FV, (num_lat, 1)) == '???')", "ground_truth": "pytest.approx(tend['V'], rel=tol)", "quality_analysis": {"complexity_score": 16, "left_complexity": 8, "right_complexity": 8, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_14", "reponame": "climlab", "testpath": "climlab/tests/test_grey_radiation.py", "testname": "test_grey_radiation.py", "classname": null, "funcname": "test_model_creation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.fast\ndef test_model_creation(model):\n    'Just make sure we can create a model.'\n    assert (len(model.lat) == 90)\n    to_xarray(model)", "masked_code": "@pytest.mark.fast\ndef test_model_creation(model):\n    'Just make sure we can create a model.'\n    assert (len(model.lat) == '???')\n    to_xarray(model)", "ground_truth": "90", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_15", "reponame": "climlab", "testpath": "climlab/tests/test_grey_radiation.py", "testname": "test_grey_radiation.py", "classname": null, "funcname": "test_external_tendency", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.fast\ndef test_external_tendency():\n    'Check that we can add an externally defined tendency to a\\n    radiative-convective model.'\n    model = climlab.GreyRadiationModel(num_lev=30)\n    model2 = climlab.process_like(model)\n    model.step_forward()\n    ext = climlab.process.ExternalForcing(state=model2.state)\n    temp_tend = 1e-05\n    ext.forcing_tendencies['Tatm'][:] = temp_tend\n    model2.add_subprocess('External', ext)\n    model2.step_forward()\n    assert ((model.tendencies['Tatm'] + temp_tend) == pytest.approx(model2.tendencies['Tatm']))", "masked_code": "@pytest.mark.fast\ndef test_external_tendency():\n    'Check that we can add an externally defined tendency to a\\n    radiative-convective model.'\n    model = climlab.GreyRadiationModel(num_lev=30)\n    model2 = climlab.process_like(model)\n    model.step_forward()\n    ext = climlab.process.ExternalForcing(state=model2.state)\n    temp_tend = 1e-05\n    ext.forcing_tendencies['Tatm'][:] = temp_tend\n    model2.add_subprocess('External', ext)\n    model2.step_forward()\n    assert ((model.tendencies['Tatm'] + temp_tend) == '???')", "ground_truth": "pytest.approx(model2.tendencies['Tatm'])", "quality_analysis": {"complexity_score": 18, "left_complexity": 9, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_16", "reponame": "climlab", "testpath": "climlab/tests/test_insolation.py", "testname": "test_insolation.py", "classname": null, "funcname": "test_orbital_cycles", "imports": ["from __future__ import division, print_function, absolute_import", "import numpy as np", "from climlab import constants as const", "from climlab.solar.insolation import daily_insolation", "from climlab.solar.orbital import OrbitalTable", "from climlab.solar.orbital.long import OrbitalTable as LongOrbitalTable", "from climlab import EBM_seasonal", "from climlab.solar.orbital_cycles import OrbitalCycles", "from climlab.surface import StepFunctionAlbedo", "import pytest"], "code": "@pytest.mark.slow\ndef test_orbital_cycles():\n    ebm = EBM_seasonal()\n    alb = StepFunctionAlbedo(state=ebm.state, **ebm.param)\n    ebm.add_subprocess('albedo', alb)\n    ebm.subprocess['SW'].albedo = alb.albedo\n    experiment = OrbitalCycles(ebm, kyear_start=(- 20), kyear_stop=(- 19), orbital_year_factor=10.0)\n    assert (experiment.orb_kyear == (- 20.0))\n    np.testing.assert_almost_equal(experiment.T_segments_global, 11.48520525)", "masked_code": "@pytest.mark.slow\ndef test_orbital_cycles():\n    ebm = EBM_seasonal()\n    alb = StepFunctionAlbedo(state=ebm.state, **ebm.param)\n    ebm.add_subprocess('albedo', alb)\n    ebm.subprocess['SW'].albedo = alb.albedo\n    experiment = OrbitalCycles(ebm, kyear_start=(- 20), kyear_stop=(- 19), orbital_year_factor=10.0)\n    assert (experiment.orb_kyear == '???')\n    np.testing.assert_almost_equal(experiment.T_segments_global, 11.48520525)", "ground_truth": "(- 20.0)", "quality_analysis": {"complexity_score": 5, "left_complexity": 2, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_17", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "classname": null, "funcname": "test_multidim", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim():\n    state = climlab.column_state(num_lev=40, num_lat=3, water_depth=5.0)\n    rad = climlab.radiation.RRTMG_LW(state=state)\n    assert np.all((_rrtm_to_climlab(_climlab_to_rrtm(rad.Ts)) == rad.Ts))\n    assert np.all((_rrtm_to_climlab(_climlab_to_rrtm(rad.Tatm)) == rad.Tatm))\n    rad.step_forward()\n    assert (rad.OLR.shape == rad.Ts.shape)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_multidim():\n    state = climlab.column_state(num_lev=40, num_lat=3, water_depth=5.0)\n    rad = climlab.radiation.RRTMG_LW(state=state)\n    assert np.all((_rrtm_to_climlab(_climlab_to_rrtm(rad.Ts)) == rad.Ts))\n    assert np.all((_rrtm_to_climlab(_climlab_to_rrtm(rad.Tatm)) == rad.Tatm))\n    rad.step_forward()\n    assert (rad.OLR.shape == '???')", "ground_truth": "rad.Ts.shape", "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_18", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "classname": null, "funcname": "test_sw_insol_propagate", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_sw_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.insolation == rad.subprocess['SW'].insolation)\n    rad.insolation *= 1.01\n    assert (rad.insolation == rad.subprocess['SW'].insolation)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_sw_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.insolation == '???')\n    rad.insolation *= 1.01\n    assert (rad.insolation == rad.subprocess['SW'].insolation)", "ground_truth": "rad.subprocess['SW'].insolation", "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_19", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "classname": null, "funcname": "test_sw_insol_propagate", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_sw_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.insolation == rad.subprocess['SW'].insolation)\n    rad.insolation *= 1.01\n    assert (rad.insolation == rad.subprocess['SW'].insolation)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_sw_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.insolation == rad.subprocess['SW'].insolation)\n    rad.insolation *= 1.01\n    assert (rad.insolation == '???')", "ground_truth": "rad.subprocess['SW'].insolation", "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_20", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "classname": null, "funcname": "test_coszen_insol_propagate", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_coszen_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.coszen == rad.subprocess['SW'].coszen)\n    rad.coszen *= 1.01\n    assert (rad.coszen == rad.subprocess['SW'].coszen)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_coszen_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.coszen == '???')\n    rad.coszen *= 1.01\n    assert (rad.coszen == rad.subprocess['SW'].coszen)", "ground_truth": "rad.subprocess['SW'].coszen", "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "climlab_21", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "classname": null, "funcname": "test_coszen_insol_propagate", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_coszen_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.coszen == rad.subprocess['SW'].coszen)\n    rad.coszen *= 1.01\n    assert (rad.coszen == rad.subprocess['SW'].coszen)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_coszen_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.coszen == rad.subprocess['SW'].coszen)\n    rad.coszen *= 1.01\n    assert (rad.coszen == '???')", "ground_truth": "rad.subprocess['SW'].coszen", "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}}
