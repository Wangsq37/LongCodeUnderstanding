{"task_id": "pykalman_0", "reponame": "pykalman", "testpath": "pykalman/sqrt/tests/test_unscented.py", "testname": "test_unscented.py", "classname": null, "funcname": "test_additive_sample", "imports": ["import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from scipy import linalg", "from ..unscented import AdditiveUnscentedKalmanFilter, cholupdate, qr"], "code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == (100, 1))", "masked_code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == '???')\n    assert (z.shape == (100, 1))", "ground_truth": "(100, 2)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pykalman_1", "reponame": "pykalman", "testpath": "pykalman/sqrt/tests/test_unscented.py", "testname": "test_unscented.py", "classname": null, "funcname": "test_additive_sample", "imports": ["import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from scipy import linalg", "from ..unscented import AdditiveUnscentedKalmanFilter, cholupdate, qr"], "code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == (100, 1))", "masked_code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == '???')", "ground_truth": "(100, 1)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pykalman_2", "reponame": "pykalman", "testpath": "pykalman/sqrt/tests/test_unscented.py", "testname": "test_unscented.py", "classname": null, "funcname": "test_qr", "imports": ["import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from scipy import linalg", "from ..unscented import AdditiveUnscentedKalmanFilter, cholupdate, qr"], "code": "def test_qr():\n    A = np.array([[1, 0.2, 1], [0.2, 0.8, 2]]).T\n    R = qr(A)\n    assert (R.shape == (2, 2))\n    assert_array_almost_equal(R.T.dot(R), A.T.dot(A))", "masked_code": "def test_qr():\n    A = np.array([[1, 0.2, 1], [0.2, 0.8, 2]]).T\n    R = qr(A)\n    assert (R.shape == '???')\n    assert_array_almost_equal(R.T.dot(R), A.T.dot(A))", "ground_truth": "(2, 2)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pykalman_3", "reponame": "pykalman", "testpath": "pykalman/tests/test_standard.py", "testname": "test_standard.py", "classname": "TestKalmanFilter", "funcname": "test_kalman_sampling", "imports": ["import pickle", "from io import BytesIO", "import numpy as np", "import pytest", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..sqrt import BiermanKalmanFilter, CholeskyKalmanFilter", "from ..standard import KalmanFilter"], "code": "def test_kalman_sampling(self, kf_cls, data):\n    kf = kf_cls(data.transition_matrix, data.observation_matrix, data.transition_covariance, data.observation_covariance, data.transition_offsets, data.observation_offset, data.initial_state_mean, data.initial_state_covariance)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, data.transition_matrix.shape[0]))\n    assert (z.shape == (100, data.observation_matrix.shape[0]))", "masked_code": "def test_kalman_sampling(self, kf_cls, data):\n    kf = kf_cls(data.transition_matrix, data.observation_matrix, data.transition_covariance, data.observation_covariance, data.transition_offsets, data.observation_offset, data.initial_state_mean, data.initial_state_covariance)\n    (x, z) = kf.sample(100)\n    assert (x.shape == '???')\n    assert (z.shape == (100, data.observation_matrix.shape[0]))", "ground_truth": "(100, data.transition_matrix.shape[0])", "quality_analysis": {"complexity_score": 11, "left_complexity": 2, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pykalman_4", "reponame": "pykalman", "testpath": "pykalman/tests/test_standard.py", "testname": "test_standard.py", "classname": "TestKalmanFilter", "funcname": "test_kalman_sampling", "imports": ["import pickle", "from io import BytesIO", "import numpy as np", "import pytest", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..sqrt import BiermanKalmanFilter, CholeskyKalmanFilter", "from ..standard import KalmanFilter"], "code": "def test_kalman_sampling(self, kf_cls, data):\n    kf = kf_cls(data.transition_matrix, data.observation_matrix, data.transition_covariance, data.observation_covariance, data.transition_offsets, data.observation_offset, data.initial_state_mean, data.initial_state_covariance)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, data.transition_matrix.shape[0]))\n    assert (z.shape == (100, data.observation_matrix.shape[0]))", "masked_code": "def test_kalman_sampling(self, kf_cls, data):\n    kf = kf_cls(data.transition_matrix, data.observation_matrix, data.transition_covariance, data.observation_covariance, data.transition_offsets, data.observation_offset, data.initial_state_mean, data.initial_state_covariance)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, data.transition_matrix.shape[0]))\n    assert (z.shape == '???')", "ground_truth": "(100, data.observation_matrix.shape[0])", "quality_analysis": {"complexity_score": 11, "left_complexity": 2, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pykalman_5", "reponame": "pykalman", "testpath": "pykalman/tests/test_unscented.py", "testname": "test_unscented.py", "classname": null, "funcname": "test_unscented_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_unscented_sample():\n    kf = build_unscented_filter(UnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == (100, 1))", "masked_code": "def test_unscented_sample():\n    kf = build_unscented_filter(UnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == '???')\n    assert (z.shape == (100, 1))", "ground_truth": "(100, 2)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pykalman_6", "reponame": "pykalman", "testpath": "pykalman/tests/test_unscented.py", "testname": "test_unscented.py", "classname": null, "funcname": "test_unscented_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_unscented_sample():\n    kf = build_unscented_filter(UnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == (100, 1))", "masked_code": "def test_unscented_sample():\n    kf = build_unscented_filter(UnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == '???')", "ground_truth": "(100, 1)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pykalman_7", "reponame": "pykalman", "testpath": "pykalman/tests/test_unscented.py", "testname": "test_unscented.py", "classname": null, "funcname": "test_additive_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == (100, 1))", "masked_code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == '???')\n    assert (z.shape == (100, 1))", "ground_truth": "(100, 2)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "pykalman_8", "reponame": "pykalman", "testpath": "pykalman/tests/test_unscented.py", "testname": "test_unscented.py", "classname": null, "funcname": "test_additive_sample", "imports": ["import inspect", "import numpy as np", "from numpy import ma", "from numpy.testing import assert_array_almost_equal", "from ..datasets import load_robot", "from ..unscented import AdditiveUnscentedKalmanFilter, UnscentedKalmanFilter"], "code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == (100, 1))", "masked_code": "def test_additive_sample():\n    kf = build_unscented_filter(AdditiveUnscentedKalmanFilter)\n    (x, z) = kf.sample(100)\n    assert (x.shape == (100, 2))\n    assert (z.shape == '???')", "ground_truth": "(100, 1)", "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}}
