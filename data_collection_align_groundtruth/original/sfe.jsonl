{"task_id": "sfe_2", "reponame": "sfe", "testpath": "tests/test_basis.py", "testname": "test_basis.py", "funcname": "test_oriented_saveload", "imports": ["import pickle", "from unittest import TestCase", "from pathlib import Path", "import pytest", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal, assert_array_equal", "from skfem import BilinearForm, LinearForm, asm, solve, condense, projection", "from skfem.mesh import Mesh, MeshTri, MeshTet, MeshHex, MeshQuad, MeshLine1, MeshWedge1", "from skfem.assembly import CellBasis, FacetBasis, Dofs, Functional, InteriorFacetBasis", "from skfem.mapping import MappingIsoparametric", "from skfem.element import ElementVectorH1, ElementTriP2, ElementTriP1, ElementTetP2, ElementHexS2, ElementHex2, ElementQuad2, ElementLineP2, ElementTriP0, ElementLineP0, ElementQuad1, ElementQuad0, ElementTetP1, ElementTetP0, ElementHex1, ElementHex0, ElementLineP1, ElementLineMini, ElementWedge1, ElementTriRT0, ElementQuadRT0, ElementTriP1", "from skfem.helpers import dot, grad", "from skfem.utils import enforce", "from skfem.io.meshio import to_meshio, from_meshio", "from skfem.models.poisson import laplace"], "code": "@pytest.mark.parametrize('m', [MeshLine1(), MeshTri(), MeshQuad(), MeshTet(), MeshHex()])\ndef test_oriented_saveload(m: Mesh):\n    m = m.refined(4)\n    m = m.with_boundaries({'mid': m.facets_around([5])})\n    assert (len(m.boundaries['mid'].ori) == m.refdom.nfacets)\n    M = from_meshio(to_meshio(m))\n    assert_array_equal(m.boundaries['mid'].ori, M.boundaries['mid'].ori)", "masked_code": "@pytest.mark.parametrize('m', [MeshLine1(), MeshTri(), MeshQuad(), MeshTet(), MeshHex()])\ndef test_oriented_saveload(m: Mesh):\n    m = m.refined(4)\n    m = m.with_boundaries({'mid': m.facets_around([5])})\n    assert (len(m.boundaries['mid'].ori) == '???')\n    M = from_meshio(to_meshio(m))\n    assert_array_equal(m.boundaries['mid'].ori, M.boundaries['mid'].ori)", "ground_truth": ["m.refdom.nfacets"], "quality_analysis": {"complexity_score": 7, "left_complexity": 5, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "sfe_3", "reponame": "sfe", "testpath": "tests/test_basis.py", "testname": "test_basis.py", "funcname": "test_with_elements", "imports": ["import pickle", "from unittest import TestCase", "from pathlib import Path", "import pytest", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal, assert_array_equal", "from skfem import BilinearForm, LinearForm, asm, solve, condense, projection", "from skfem.mesh import Mesh, MeshTri, MeshTet, MeshHex, MeshQuad, MeshLine1, MeshWedge1", "from skfem.assembly import CellBasis, FacetBasis, Dofs, Functional, InteriorFacetBasis", "from skfem.mapping import MappingIsoparametric", "from skfem.element import ElementVectorH1, ElementTriP2, ElementTriP1, ElementTetP2, ElementHexS2, ElementHex2, ElementQuad2, ElementLineP2, ElementTriP0, ElementLineP0, ElementQuad1, ElementQuad0, ElementTetP1, ElementTetP0, ElementHex1, ElementHex0, ElementLineP1, ElementLineMini, ElementWedge1, ElementTriRT0, ElementQuadRT0, ElementTriP1", "from skfem.helpers import dot, grad", "from skfem.utils import enforce", "from skfem.io.meshio import to_meshio, from_meshio", "from skfem.models.poisson import laplace"], "code": "def test_with_elements():\n    mesh = MeshTri().refined(3).with_subdomains({'a': (lambda x: (x[0] < 0.5))})\n    basis = CellBasis(mesh, ElementTriP0())\n    basis_half = basis.with_elements('a')\n    assert (basis.mesh == basis_half.mesh)\n    assert (basis.elem == basis_half.elem)\n    assert (basis.mapping == basis_half.mapping)\n    assert (basis.quadrature == basis_half.quadrature)\n    assert all((basis_half.tind == basis.mesh.normalize_elements('a')))", "masked_code": "def test_with_elements():\n    mesh = MeshTri().refined(3).with_subdomains({'a': (lambda x: (x[0] < 0.5))})\n    basis = CellBasis(mesh, ElementTriP0())\n    basis_half = basis.with_elements('a')\n    assert (basis.mesh == '???')\n    assert (basis.elem == basis_half.elem)\n    assert (basis.mapping == basis_half.mapping)\n    assert (basis.quadrature == basis_half.quadrature)\n    assert all((basis_half.tind == basis.mesh.normalize_elements('a')))", "ground_truth": ["basis_half.mesh"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "sfe_4", "reponame": "sfe", "testpath": "tests/test_basis.py", "testname": "test_basis.py", "funcname": "test_with_elements", "imports": ["import pickle", "from unittest import TestCase", "from pathlib import Path", "import pytest", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal, assert_array_equal", "from skfem import BilinearForm, LinearForm, asm, solve, condense, projection", "from skfem.mesh import Mesh, MeshTri, MeshTet, MeshHex, MeshQuad, MeshLine1, MeshWedge1", "from skfem.assembly import CellBasis, FacetBasis, Dofs, Functional, InteriorFacetBasis", "from skfem.mapping import MappingIsoparametric", "from skfem.element import ElementVectorH1, ElementTriP2, ElementTriP1, ElementTetP2, ElementHexS2, ElementHex2, ElementQuad2, ElementLineP2, ElementTriP0, ElementLineP0, ElementQuad1, ElementQuad0, ElementTetP1, ElementTetP0, ElementHex1, ElementHex0, ElementLineP1, ElementLineMini, ElementWedge1, ElementTriRT0, ElementQuadRT0, ElementTriP1", "from skfem.helpers import dot, grad", "from skfem.utils import enforce", "from skfem.io.meshio import to_meshio, from_meshio", "from skfem.models.poisson import laplace"], "code": "def test_with_elements():\n    mesh = MeshTri().refined(3).with_subdomains({'a': (lambda x: (x[0] < 0.5))})\n    basis = CellBasis(mesh, ElementTriP0())\n    basis_half = basis.with_elements('a')\n    assert (basis.mesh == basis_half.mesh)\n    assert (basis.elem == basis_half.elem)\n    assert (basis.mapping == basis_half.mapping)\n    assert (basis.quadrature == basis_half.quadrature)\n    assert all((basis_half.tind == basis.mesh.normalize_elements('a')))", "masked_code": "def test_with_elements():\n    mesh = MeshTri().refined(3).with_subdomains({'a': (lambda x: (x[0] < 0.5))})\n    basis = CellBasis(mesh, ElementTriP0())\n    basis_half = basis.with_elements('a')\n    assert (basis.mesh == basis_half.mesh)\n    assert (basis.elem == '???')\n    assert (basis.mapping == basis_half.mapping)\n    assert (basis.quadrature == basis_half.quadrature)\n    assert all((basis_half.tind == basis.mesh.normalize_elements('a')))", "ground_truth": ["basis_half.elem"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "sfe_5", "reponame": "sfe", "testpath": "tests/test_basis.py", "testname": "test_basis.py", "funcname": "test_with_elements", "imports": ["import pickle", "from unittest import TestCase", "from pathlib import Path", "import pytest", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal, assert_array_equal", "from skfem import BilinearForm, LinearForm, asm, solve, condense, projection", "from skfem.mesh import Mesh, MeshTri, MeshTet, MeshHex, MeshQuad, MeshLine1, MeshWedge1", "from skfem.assembly import CellBasis, FacetBasis, Dofs, Functional, InteriorFacetBasis", "from skfem.mapping import MappingIsoparametric", "from skfem.element import ElementVectorH1, ElementTriP2, ElementTriP1, ElementTetP2, ElementHexS2, ElementHex2, ElementQuad2, ElementLineP2, ElementTriP0, ElementLineP0, ElementQuad1, ElementQuad0, ElementTetP1, ElementTetP0, ElementHex1, ElementHex0, ElementLineP1, ElementLineMini, ElementWedge1, ElementTriRT0, ElementQuadRT0, ElementTriP1", "from skfem.helpers import dot, grad", "from skfem.utils import enforce", "from skfem.io.meshio import to_meshio, from_meshio", "from skfem.models.poisson import laplace"], "code": "def test_with_elements():\n    mesh = MeshTri().refined(3).with_subdomains({'a': (lambda x: (x[0] < 0.5))})\n    basis = CellBasis(mesh, ElementTriP0())\n    basis_half = basis.with_elements('a')\n    assert (basis.mesh == basis_half.mesh)\n    assert (basis.elem == basis_half.elem)\n    assert (basis.mapping == basis_half.mapping)\n    assert (basis.quadrature == basis_half.quadrature)\n    assert all((basis_half.tind == basis.mesh.normalize_elements('a')))", "masked_code": "def test_with_elements():\n    mesh = MeshTri().refined(3).with_subdomains({'a': (lambda x: (x[0] < 0.5))})\n    basis = CellBasis(mesh, ElementTriP0())\n    basis_half = basis.with_elements('a')\n    assert (basis.mesh == basis_half.mesh)\n    assert (basis.elem == basis_half.elem)\n    assert (basis.mapping == '???')\n    assert (basis.quadrature == basis_half.quadrature)\n    assert all((basis_half.tind == basis.mesh.normalize_elements('a')))", "ground_truth": ["basis_half.mapping"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "sfe_6", "reponame": "sfe", "testpath": "tests/test_basis.py", "testname": "test_basis.py", "funcname": "test_with_elements", "imports": ["import pickle", "from unittest import TestCase", "from pathlib import Path", "import pytest", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal, assert_array_equal", "from skfem import BilinearForm, LinearForm, asm, solve, condense, projection", "from skfem.mesh import Mesh, MeshTri, MeshTet, MeshHex, MeshQuad, MeshLine1, MeshWedge1", "from skfem.assembly import CellBasis, FacetBasis, Dofs, Functional, InteriorFacetBasis", "from skfem.mapping import MappingIsoparametric", "from skfem.element import ElementVectorH1, ElementTriP2, ElementTriP1, ElementTetP2, ElementHexS2, ElementHex2, ElementQuad2, ElementLineP2, ElementTriP0, ElementLineP0, ElementQuad1, ElementQuad0, ElementTetP1, ElementTetP0, ElementHex1, ElementHex0, ElementLineP1, ElementLineMini, ElementWedge1, ElementTriRT0, ElementQuadRT0, ElementTriP1", "from skfem.helpers import dot, grad", "from skfem.utils import enforce", "from skfem.io.meshio import to_meshio, from_meshio", "from skfem.models.poisson import laplace"], "code": "def test_with_elements():\n    mesh = MeshTri().refined(3).with_subdomains({'a': (lambda x: (x[0] < 0.5))})\n    basis = CellBasis(mesh, ElementTriP0())\n    basis_half = basis.with_elements('a')\n    assert (basis.mesh == basis_half.mesh)\n    assert (basis.elem == basis_half.elem)\n    assert (basis.mapping == basis_half.mapping)\n    assert (basis.quadrature == basis_half.quadrature)\n    assert all((basis_half.tind == basis.mesh.normalize_elements('a')))", "masked_code": "def test_with_elements():\n    mesh = MeshTri().refined(3).with_subdomains({'a': (lambda x: (x[0] < 0.5))})\n    basis = CellBasis(mesh, ElementTriP0())\n    basis_half = basis.with_elements('a')\n    assert (basis.mesh == basis_half.mesh)\n    assert (basis.elem == basis_half.elem)\n    assert (basis.mapping == basis_half.mapping)\n    assert (basis.quadrature == '???')\n    assert all((basis_half.tind == basis.mesh.normalize_elements('a')))", "ground_truth": ["basis_half.quadrature"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
