{"task_id": "phonopy_1", "reponame": "phonopy", "testpath": "test/test_file_IO.py", "testname": "test_file_IO.py", "funcname": "test_write_force_constants_to_hdf5", "imports": ["import pathlib", "import numpy as np", "import pytest", "import phonopy", "from phonopy.file_IO import parse_BORN, read_force_constants_hdf5, write_force_constants_to_hdf5"], "code": "def test_write_force_constants_to_hdf5():\n    'Test write_force_constants_to_hdf5.'\n    pytest.importorskip('h5py')\n    write_force_constants_to_hdf5(np.zeros(1), physical_unit='eV/angstrom^2')\n    for created_filename in ['force_constants.hdf5']:\n        file_path = pathlib.Path((cwd_called / created_filename))\n        assert file_path.exists()\n        (fc, physical_unit) = read_force_constants_hdf5(file_path, return_physical_unit=True)\n        assert (fc[0] == pytest.approx(0))\n        assert (physical_unit == 'eV/angstrom^2')\n        file_path.unlink()", "masked_code": "def test_write_force_constants_to_hdf5():\n    'Test write_force_constants_to_hdf5.'\n    pytest.importorskip('h5py')\n    write_force_constants_to_hdf5(np.zeros(1), physical_unit='eV/angstrom^2')\n    for created_filename in ['force_constants.hdf5']:\n        file_path = pathlib.Path((cwd_called / created_filename))\n        assert file_path.exists()\n        (fc, physical_unit) = read_force_constants_hdf5(file_path, return_physical_unit=True)\n        assert (fc[0] == '???')\n        assert (physical_unit == 'eV/angstrom^2')\n        file_path.unlink()", "ground_truth": ["0", "0.0", "pytest.approx(0)"], "quality_analysis": {"complexity_score": 9, "left_complexity": 5, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "phonopy_59", "reponame": "phonopy", "testpath": "test/interface/test_pwscf.py", "testname": "test_pwscf.py", "funcname": "test_read_pwscf_NaCl_Xn", "imports": ["import pathlib", "import numpy as np", "from phonopy.interface.phonopy_yaml import read_cell_yaml", "from phonopy.interface.qe import read_pwscf", "from phonopy.structure.symmetry import Symmetry"], "code": "def test_read_pwscf_NaCl_Xn():\n    'Test of read_pwscf.'\n    (cell, pp_filenames) = read_pwscf((cwd / 'NaCl-pwscf-Xn.in'))\n    print(cell)\n    symnums = pp_filenames.keys()\n    assert (set(symnums) == {'Na', 'Cl', 'Cl1'})\n    np.testing.assert_allclose(cell.masses, [22.98976928, 22.98976928, 22.98976928, 22.98976928, 35.453, 35.453, 70.0, 70.0])\n    assert (['Na', 'Na', 'Na', 'Na', 'Cl', 'Cl', 'Cl1', 'Cl1'] == cell.symbols)\n    (cell_ref, pp_filenames) = read_pwscf((cwd / 'NaCl-pwscf.in'))\n    symops = Symmetry(cell).symmetry_operations\n    symops_ref = Symmetry(cell_ref).symmetry_operations\n    np.testing.assert_allclose(symops['translations'], symops_ref['translations'])\n    np.testing.assert_array_equal(symops['rotations'], symops_ref['rotations'])", "masked_code": "def test_read_pwscf_NaCl_Xn():\n    'Test of read_pwscf.'\n    (cell, pp_filenames) = read_pwscf((cwd / 'NaCl-pwscf-Xn.in'))\n    print(cell)\n    symnums = pp_filenames.keys()\n    assert (set(symnums) == '???')\n    np.testing.assert_allclose(cell.masses, [22.98976928, 22.98976928, 22.98976928, 22.98976928, 35.453, 35.453, 70.0, 70.0])\n    assert (['Na', 'Na', 'Na', 'Na', 'Cl', 'Cl', 'Cl1', 'Cl1'] == cell.symbols)\n    (cell_ref, pp_filenames) = read_pwscf((cwd / 'NaCl-pwscf.in'))\n    symops = Symmetry(cell).symmetry_operations\n    symops_ref = Symmetry(cell_ref).symmetry_operations\n    np.testing.assert_allclose(symops['translations'], symops_ref['translations'])\n    np.testing.assert_array_equal(symops['rotations'], symops_ref['rotations'])", "ground_truth": ["{'Cl', 'Na', 'Cl1'}", "{'Na', 'Cl', 'Cl1'}"], "quality_analysis": {"complexity_score": 4, "left_complexity": 4, "right_complexity": 0, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "phonopy_60", "reponame": "phonopy", "testpath": "test/interface/test_pwscf.py", "testname": "test_pwscf.py", "funcname": "test_read_pwscf_NaCl_Xn", "imports": ["import pathlib", "import numpy as np", "from phonopy.interface.phonopy_yaml import read_cell_yaml", "from phonopy.interface.qe import read_pwscf", "from phonopy.structure.symmetry import Symmetry"], "code": "def test_read_pwscf_NaCl_Xn():\n    'Test of read_pwscf.'\n    (cell, pp_filenames) = read_pwscf((cwd / 'NaCl-pwscf-Xn.in'))\n    print(cell)\n    symnums = pp_filenames.keys()\n    assert (set(symnums) == {'Na', 'Cl', 'Cl1'})\n    np.testing.assert_allclose(cell.masses, [22.98976928, 22.98976928, 22.98976928, 22.98976928, 35.453, 35.453, 70.0, 70.0])\n    assert (['Na', 'Na', 'Na', 'Na', 'Cl', 'Cl', 'Cl1', 'Cl1'] == cell.symbols)\n    (cell_ref, pp_filenames) = read_pwscf((cwd / 'NaCl-pwscf.in'))\n    symops = Symmetry(cell).symmetry_operations\n    symops_ref = Symmetry(cell_ref).symmetry_operations\n    np.testing.assert_allclose(symops['translations'], symops_ref['translations'])\n    np.testing.assert_array_equal(symops['rotations'], symops_ref['rotations'])", "masked_code": "def test_read_pwscf_NaCl_Xn():\n    'Test of read_pwscf.'\n    (cell, pp_filenames) = read_pwscf((cwd / 'NaCl-pwscf-Xn.in'))\n    print(cell)\n    symnums = pp_filenames.keys()\n    assert (set(symnums) == {'Na', 'Cl', 'Cl1'})\n    np.testing.assert_allclose(cell.masses, [22.98976928, 22.98976928, 22.98976928, 22.98976928, 35.453, 35.453, 70.0, 70.0])\n    assert (['Na', 'Na', 'Na', 'Na', 'Cl', 'Cl', 'Cl1', 'Cl1'] == '???')\n    (cell_ref, pp_filenames) = read_pwscf((cwd / 'NaCl-pwscf.in'))\n    symops = Symmetry(cell).symmetry_operations\n    symops_ref = Symmetry(cell_ref).symmetry_operations\n    np.testing.assert_allclose(symops['translations'], symops_ref['translations'])\n    np.testing.assert_array_equal(symops['rotations'], symops_ref['rotations'])", "ground_truth": ["['Na', 'Na', 'Na', 'Na', 'Cl', 'Cl', 'Cl1', 'Cl1']", "cell.symbols"], "quality_analysis": {"complexity_score": 12, "left_complexity": 10, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "phonopy_61", "reponame": "phonopy", "testpath": "test/interface/test_qlm.py", "testname": "test_qlm.py", "funcname": "test_cell2struct_and_read_qlm", "imports": ["import os", "import tempfile", "import numpy as np", "from phonopy.interface.qlm import parse_set_of_forces, read_qlm"], "code": "def test_cell2struct_and_read_qlm():\n    'Test read_qlm and get_qlm_structure.'\n    sitex_ref = ('% site-data vn=3.0 xpos fast io=15 nbas=8' + ' alat=10.7531113565 plat= 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0\\n#                            pos\\n Na        0.0000000000   0.0000000000   0.0000000000\\n Na        0.0000000000   0.5000000000   0.5000000000\\n Na2       0.5000000000   0.0000000000   0.5000000000\\n Na3       0.5000000000   0.5000000000   0.0000000000\\n Cl        0.5000000000   0.5000000000   0.5000000000\\n Clu       0.5000000000   0.0000000000   0.0000000000\\n Cl        0.0000000000   0.5000000000   0.0000000000\\n Cld       0.0000000000   0.0000000000   0.5000000000\\n')\n    try:\n        fl1 = tempfile.NamedTemporaryFile(delete=False)\n        fl1.write(sitex_ref.encode())\n        fl1.close()\n        (cell1, (inst1,)) = read_qlm(fl1.name)\n        fl2 = tempfile.NamedTemporaryFile(delete=False)\n        fl2.write(inst1.to_site_str(cell1).encode())\n        fl2.close()\n        (cell2, _) = read_qlm(fl2.name)\n        np.testing.assert_allclose(cell1.cell, cell2.cell, atol=1e-07)\n        np.testing.assert_allclose(cell1.scaled_positions, cell2.scaled_positions, atol=1e-07)\n        assert (cell1.symbols == cell2.symbols)\n    finally:\n        os.unlink(fl1.name)\n        os.unlink(fl2.name)", "masked_code": "def test_cell2struct_and_read_qlm():\n    'Test read_qlm and get_qlm_structure.'\n    sitex_ref = ('% site-data vn=3.0 xpos fast io=15 nbas=8' + ' alat=10.7531113565 plat= 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0\\n#                            pos\\n Na        0.0000000000   0.0000000000   0.0000000000\\n Na        0.0000000000   0.5000000000   0.5000000000\\n Na2       0.5000000000   0.0000000000   0.5000000000\\n Na3       0.5000000000   0.5000000000   0.0000000000\\n Cl        0.5000000000   0.5000000000   0.5000000000\\n Clu       0.5000000000   0.0000000000   0.0000000000\\n Cl        0.0000000000   0.5000000000   0.0000000000\\n Cld       0.0000000000   0.0000000000   0.5000000000\\n')\n    try:\n        fl1 = tempfile.NamedTemporaryFile(delete=False)\n        fl1.write(sitex_ref.encode())\n        fl1.close()\n        (cell1, (inst1,)) = read_qlm(fl1.name)\n        fl2 = tempfile.NamedTemporaryFile(delete=False)\n        fl2.write(inst1.to_site_str(cell1).encode())\n        fl2.close()\n        (cell2, _) = read_qlm(fl2.name)\n        np.testing.assert_allclose(cell1.cell, cell2.cell, atol=1e-07)\n        np.testing.assert_allclose(cell1.scaled_positions, cell2.scaled_positions, atol=1e-07)\n        assert (cell1.symbols == '???')\n    finally:\n        os.unlink(fl1.name)\n        os.unlink(fl2.name)", "ground_truth": ["['Na', 'Na', 'Na2', 'Na3', 'Cl', 'Cl4', 'Cl', 'Cl5']", "cell2.symbols"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "phonopy_70", "reponame": "phonopy", "testpath": "test/interface/test_vasp.py", "testname": "test_vasp.py", "funcname": "test_get_vasp_structure_lines", "imports": ["import tarfile", "import tempfile", "from io import StringIO", "from pathlib import Path", "import numpy as np", "import pytest", "from phonopy.file_IO import parse_FORCE_SETS", "from phonopy.interface.phonopy_yaml import read_cell_yaml", "from phonopy.interface.vasp import Vasprun, VasprunxmlExpat, get_vasp_structure_lines, parse_set_of_forces, read_vasp, read_vasp_from_strings, read_XDATCAR, write_XDATCAR"], "code": "@pytest.mark.parametrize('first_line_str, is_vasp4', [(None, True), (None, False), ('my_comment', True), ('my_comment', False)])\ndef test_get_vasp_structure_lines(helper_methods, is_vasp4, first_line_str):\n    'Test get_vasp_structure_lines (almost write_vasp).'\n    filename = (cwd / 'NaCl-vasp.yaml')\n    cell_ref = read_cell_yaml(filename)\n    lines = get_vasp_structure_lines(cell_ref, direct=True, is_vasp4=is_vasp4, first_line_str=first_line_str)\n    cell = read_vasp_from_strings('\\n'.join(lines))\n    helper_methods.compare_cells_with_order(cell, cell_ref)\n    if is_vasp4:\n        assert (lines[0] == 'Na Cl')\n    elif first_line_str:\n        assert (lines[0] == first_line_str)", "masked_code": "@pytest.mark.parametrize('first_line_str, is_vasp4', [(None, True), (None, False), ('my_comment', True), ('my_comment', False)])\ndef test_get_vasp_structure_lines(helper_methods, is_vasp4, first_line_str):\n    'Test get_vasp_structure_lines (almost write_vasp).'\n    filename = (cwd / 'NaCl-vasp.yaml')\n    cell_ref = read_cell_yaml(filename)\n    lines = get_vasp_structure_lines(cell_ref, direct=True, is_vasp4=is_vasp4, first_line_str=first_line_str)\n    cell = read_vasp_from_strings('\\n'.join(lines))\n    helper_methods.compare_cells_with_order(cell, cell_ref)\n    if is_vasp4:\n        assert (lines[0] == '???')\n    elif first_line_str:\n        assert (lines[0] == first_line_str)", "ground_truth": ["'Na Cl'"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
