{"task_id": "climlab_0", "reponame": "climlab", "testpath": "climlab/tests/test_bandrc.py", "testname": "test_bandrc.py", "funcname": "test_model_creation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.fast\ndef test_model_creation(model):\n    'Just make sure we can create a model.'\n    assert (len(model.Tatm) == 30)", "masked_code": "@pytest.mark.fast\ndef test_model_creation(model):\n    'Just make sure we can create a model.'\n    assert (len(model.Tatm) == '???')", "ground_truth": ["30"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_4", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "funcname": "test_2D_EBM", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_2D_EBM():\n    'Can we step forward a 2D lat/lon EBM?'\n    m = climlab.EBM_annual(num_lon=4)\n    m.step_forward()\n    assert (m.state.Ts.shape == (90, 4, 1))\n    m.to_xarray()", "masked_code": "@pytest.mark.fast\ndef test_2D_EBM():\n    'Can we step forward a 2D lat/lon EBM?'\n    m = climlab.EBM_annual(num_lon=4)\n    m.step_forward()\n    assert (m.state.Ts.shape == '???')\n    m.to_xarray()", "ground_truth": ["(90, 4, 1)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_5", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "funcname": "test_2D_EBM_seasonal", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_2D_EBM_seasonal():\n    'Can we step forward a 2D seasonal lat/lon EBM?'\n    m = climlab.EBM_seasonal(num_lon=4)\n    m.step_forward()\n    assert (m.state.Ts.shape == (90, 4, 1))\n    m.to_xarray()", "masked_code": "@pytest.mark.fast\ndef test_2D_EBM_seasonal():\n    'Can we step forward a 2D seasonal lat/lon EBM?'\n    m = climlab.EBM_seasonal(num_lon=4)\n    m.step_forward()\n    assert (m.state.Ts.shape == '???')\n    m.to_xarray()", "ground_truth": ["(90, 4, 1)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_6", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "funcname": "test_2D_insolation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_2D_insolation():\n    m = climlab.EBM_annual(num_lon=4)\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(299.3046767096183))\n    sfc = m.domains['Ts']\n    m.add_subprocess('insolation', climlab.radiation.P2Insolation(domains=sfc, **m.param))\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(300.344))", "masked_code": "@pytest.mark.fast\ndef test_2D_insolation():\n    m = climlab.EBM_annual(num_lon=4)\n    assert (np.mean(m.subprocess['insolation'].insolation) == '???')\n    sfc = m.domains['Ts']\n    m.add_subprocess('insolation', climlab.radiation.P2Insolation(domains=sfc, **m.param))\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(300.344))", "ground_truth": ["299.3046767096183", "pytest.approx(299.3046767096183)"], "quality_analysis": {"complexity_score": 9, "left_complexity": 5, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_7", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "funcname": "test_2D_insolation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_2D_insolation():\n    m = climlab.EBM_annual(num_lon=4)\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(299.3046767096183))\n    sfc = m.domains['Ts']\n    m.add_subprocess('insolation', climlab.radiation.P2Insolation(domains=sfc, **m.param))\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(300.344))", "masked_code": "@pytest.mark.fast\ndef test_2D_insolation():\n    m = climlab.EBM_annual(num_lon=4)\n    assert (np.mean(m.subprocess['insolation'].insolation) == pytest.approx(299.3046767096183))\n    sfc = m.domains['Ts']\n    m.add_subprocess('insolation', climlab.radiation.P2Insolation(domains=sfc, **m.param))\n    assert (np.mean(m.subprocess['insolation'].insolation) == '???')", "ground_truth": ["300.344", "pytest.approx(300.344)"], "quality_analysis": {"complexity_score": 9, "left_complexity": 5, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_2", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "funcname": "test_state", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_state():\n    initialT0 = 15.0\n    sfc = climlab.domain.surface_2D(num_lat=90, num_lon=180)\n    sfc = climlab.domain.surface_2D(lat=[(- 90.0), 0.0, 90.0], lon=[(- 180.0), 0.0, 180.0])\n    state = climlab.surface_state(T0=initialT0, num_lat=90, num_lon=180)\n    assert (state.Ts.ndim == 3)\n    assert (state.Ts.shape == (90, 180, 1))\n    assert np.isclose(climlab.global_mean(state.Ts), initialT0, atol=0.01)", "masked_code": "@pytest.mark.fast\ndef test_state():\n    initialT0 = 15.0\n    sfc = climlab.domain.surface_2D(num_lat=90, num_lon=180)\n    sfc = climlab.domain.surface_2D(lat=[(- 90.0), 0.0, 90.0], lon=[(- 180.0), 0.0, 180.0])\n    state = climlab.surface_state(T0=initialT0, num_lat=90, num_lon=180)\n    assert (state.Ts.ndim == '???')\n    assert (state.Ts.shape == (90, 180, 1))\n    assert np.isclose(climlab.global_mean(state.Ts), initialT0, atol=0.01)", "ground_truth": ["3"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_3", "reponame": "climlab", "testpath": "climlab/tests/test_domain2D.py", "testname": "test_domain2D.py", "funcname": "test_state", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest"], "code": "@pytest.mark.fast\ndef test_state():\n    initialT0 = 15.0\n    sfc = climlab.domain.surface_2D(num_lat=90, num_lon=180)\n    sfc = climlab.domain.surface_2D(lat=[(- 90.0), 0.0, 90.0], lon=[(- 180.0), 0.0, 180.0])\n    state = climlab.surface_state(T0=initialT0, num_lat=90, num_lon=180)\n    assert (state.Ts.ndim == 3)\n    assert (state.Ts.shape == (90, 180, 1))\n    assert np.isclose(climlab.global_mean(state.Ts), initialT0, atol=0.01)", "masked_code": "@pytest.mark.fast\ndef test_state():\n    initialT0 = 15.0\n    sfc = climlab.domain.surface_2D(num_lat=90, num_lon=180)\n    sfc = climlab.domain.surface_2D(lat=[(- 90.0), 0.0, 90.0], lon=[(- 180.0), 0.0, 180.0])\n    state = climlab.surface_state(T0=initialT0, num_lat=90, num_lon=180)\n    assert (state.Ts.ndim == 3)\n    assert (state.Ts.shape == '???')\n    assert np.isclose(climlab.global_mean(state.Ts), initialT0, atol=0.01)", "ground_truth": ["(90, 180, 1)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_8", "reponame": "climlab", "testpath": "climlab/tests/test_ebm.py", "testname": "test_ebm.py", "funcname": "test_model_creation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.tests.xarray_test import to_xarray", "from climlab.utils.legendre import P2"], "code": "@pytest.mark.fast\ndef test_model_creation(EBM_seasonal):\n    'Just make sure we can create a model.'\n    assert (len(EBM_seasonal.Ts) == 90)", "masked_code": "@pytest.mark.fast\ndef test_model_creation(EBM_seasonal):\n    'Just make sure we can create a model.'\n    assert (len(EBM_seasonal.Ts) == '???')", "ground_truth": ["90"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_14", "reponame": "climlab", "testpath": "climlab/tests/test_grey_radiation.py", "testname": "test_grey_radiation.py", "funcname": "test_model_creation", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.fast\ndef test_model_creation(model):\n    'Just make sure we can create a model.'\n    assert (len(model.lat) == 90)\n    to_xarray(model)", "masked_code": "@pytest.mark.fast\ndef test_model_creation(model):\n    'Just make sure we can create a model.'\n    assert (len(model.lat) == '???')\n    to_xarray(model)", "ground_truth": ["90"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_20", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "funcname": "test_coszen_insol_propagate", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_coszen_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.coszen == rad.subprocess['SW'].coszen)\n    rad.coszen *= 1.01\n    assert (rad.coszen == rad.subprocess['SW'].coszen)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_coszen_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.coszen == '???')\n    rad.coszen *= 1.01\n    assert (rad.coszen == rad.subprocess['SW'].coszen)", "ground_truth": ["0.25", "rad.subprocess['SW'].coszen"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_21", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "funcname": "test_coszen_insol_propagate", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_coszen_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.coszen == rad.subprocess['SW'].coszen)\n    rad.coszen *= 1.01\n    assert (rad.coszen == rad.subprocess['SW'].coszen)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_coszen_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.coszen == rad.subprocess['SW'].coszen)\n    rad.coszen *= 1.01\n    assert (rad.coszen == '???')", "ground_truth": ["0.25", "rad.subprocess['SW'].coszen"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_18", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "funcname": "test_sw_insol_propagate", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_sw_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.insolation == rad.subprocess['SW'].insolation)\n    rad.insolation *= 1.01\n    assert (rad.insolation == rad.subprocess['SW'].insolation)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_sw_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.insolation == '???')\n    rad.insolation *= 1.01\n    assert (rad.insolation == rad.subprocess['SW'].insolation)", "ground_truth": ["341.3", "rad.subprocess['SW'].insolation"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "climlab_19", "reponame": "climlab", "testpath": "climlab/tests/test_rrtm.py", "testname": "test_rrtm.py", "funcname": "test_sw_insol_propagate", "imports": ["from __future__ import division", "import numpy as np", "import climlab", "import pytest", "from climlab.radiation.rrtm import _climlab_to_rrtm, _rrtm_to_climlab", "from climlab.tests.xarray_test import to_xarray"], "code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_sw_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.insolation == rad.subprocess['SW'].insolation)\n    rad.insolation *= 1.01\n    assert (rad.insolation == rad.subprocess['SW'].insolation)", "masked_code": "@pytest.mark.compiled\n@pytest.mark.fast\ndef test_sw_insol_propagate():\n    state = climlab.column_state()\n    rad = climlab.radiation.RRTMG(state=state)\n    assert (rad.insolation == rad.subprocess['SW'].insolation)\n    rad.insolation *= 1.01\n    assert (rad.insolation == '???')", "ground_truth": ["341.3", "rad.subprocess['SW'].insolation"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
