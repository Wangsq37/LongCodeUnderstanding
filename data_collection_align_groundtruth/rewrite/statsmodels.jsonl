{"task_id": "statsmodels_111", "reponame": "statsmodels", "testpath": "statsmodels/robust/tests/test_covariance.py", "testname": "test_covariance.py", "funcname": "test_tyler", "imports": ["import os", "import numpy as np", "from scipy import linalg", "from numpy.testing import assert_allclose, assert_equal", "import pandas as pd", "from statsmodels import robust", "import statsmodels.robust.norms as robnorms", "import statsmodels.robust.covariance as robcov", "import statsmodels.robust.scale as robscale", "from .results import results_cov as res_cov"], "code": "def test_tyler():\n    np.random.seed(42)\n    sample_data = (np.random.randn(50, 4) * 1000)\n    sample_data[0] = np.zeros(4)\n    sample_data[1] = (- np.abs(sample_data[1]))\n    sample_data[2] = sample_data[1]\n    sample_data[3] = np.full(4, (- 99999))\n    sample_data[4] = np.full(4, 99999)\n    center = np.median(sample_data, axis=0)\n    k_vars = len(center)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='trace')\n    assert_allclose(np.trace(res1.cov), k_vars, rtol=1e-13)\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='det')\n    assert_allclose(np.linalg.det(res1.cov), 1, rtol=1e-13)\n    assert (res1.cov.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='normal')\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center))\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)", "masked_code": "def test_tyler():\n    np.random.seed(42)\n    sample_data = (np.random.randn(50, 4) * 1000)\n    sample_data[0] = np.zeros(4)\n    sample_data[1] = (- np.abs(sample_data[1]))\n    sample_data[2] = sample_data[1]\n    sample_data[3] = np.full(4, (- 99999))\n    sample_data[4] = np.full(4, 99999)\n    center = np.median(sample_data, axis=0)\n    k_vars = len(center)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='trace')\n    assert_allclose(np.trace(res1.cov), k_vars, rtol=1e-13)\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == '???')\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='det')\n    assert_allclose(np.linalg.det(res1.cov), 1, rtol=1e-13)\n    assert (res1.cov.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='normal')\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center))\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)", "ground_truth": ["(4, 4)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_112", "reponame": "statsmodels", "testpath": "statsmodels/robust/tests/test_covariance.py", "testname": "test_covariance.py", "funcname": "test_tyler", "imports": ["import os", "import numpy as np", "from scipy import linalg", "from numpy.testing import assert_allclose, assert_equal", "import pandas as pd", "from statsmodels import robust", "import statsmodels.robust.norms as robnorms", "import statsmodels.robust.covariance as robcov", "import statsmodels.robust.scale as robscale", "from .results import results_cov as res_cov"], "code": "def test_tyler():\n    np.random.seed(42)\n    sample_data = (np.random.randn(50, 4) * 1000)\n    sample_data[0] = np.zeros(4)\n    sample_data[1] = (- np.abs(sample_data[1]))\n    sample_data[2] = sample_data[1]\n    sample_data[3] = np.full(4, (- 99999))\n    sample_data[4] = np.full(4, 99999)\n    center = np.median(sample_data, axis=0)\n    k_vars = len(center)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='trace')\n    assert_allclose(np.trace(res1.cov), k_vars, rtol=1e-13)\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='det')\n    assert_allclose(np.linalg.det(res1.cov), 1, rtol=1e-13)\n    assert (res1.cov.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='normal')\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center))\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)", "masked_code": "def test_tyler():\n    np.random.seed(42)\n    sample_data = (np.random.randn(50, 4) * 1000)\n    sample_data[0] = np.zeros(4)\n    sample_data[1] = (- np.abs(sample_data[1]))\n    sample_data[2] = sample_data[1]\n    sample_data[3] = np.full(4, (- 99999))\n    sample_data[4] = np.full(4, 99999)\n    center = np.median(sample_data, axis=0)\n    k_vars = len(center)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='trace')\n    assert_allclose(np.trace(res1.cov), k_vars, rtol=1e-13)\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='det')\n    assert_allclose(np.linalg.det(res1.cov), 1, rtol=1e-13)\n    assert (res1.cov.shape == '???')\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='normal')\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center))\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)", "ground_truth": ["(4, 4)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_113", "reponame": "statsmodels", "testpath": "statsmodels/robust/tests/test_covariance.py", "testname": "test_covariance.py", "funcname": "test_tyler", "imports": ["import os", "import numpy as np", "from scipy import linalg", "from numpy.testing import assert_allclose, assert_equal", "import pandas as pd", "from statsmodels import robust", "import statsmodels.robust.norms as robnorms", "import statsmodels.robust.covariance as robcov", "import statsmodels.robust.scale as robscale", "from .results import results_cov as res_cov"], "code": "def test_tyler():\n    np.random.seed(42)\n    sample_data = (np.random.randn(50, 4) * 1000)\n    sample_data[0] = np.zeros(4)\n    sample_data[1] = (- np.abs(sample_data[1]))\n    sample_data[2] = sample_data[1]\n    sample_data[3] = np.full(4, (- 99999))\n    sample_data[4] = np.full(4, 99999)\n    center = np.median(sample_data, axis=0)\n    k_vars = len(center)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='trace')\n    assert_allclose(np.trace(res1.cov), k_vars, rtol=1e-13)\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='det')\n    assert_allclose(np.linalg.det(res1.cov), 1, rtol=1e-13)\n    assert (res1.cov.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='normal')\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center))\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)", "masked_code": "def test_tyler():\n    np.random.seed(42)\n    sample_data = (np.random.randn(50, 4) * 1000)\n    sample_data[0] = np.zeros(4)\n    sample_data[1] = (- np.abs(sample_data[1]))\n    sample_data[2] = sample_data[1]\n    sample_data[3] = np.full(4, (- 99999))\n    sample_data[4] = np.full(4, 99999)\n    center = np.median(sample_data, axis=0)\n    k_vars = len(center)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='trace')\n    assert_allclose(np.trace(res1.cov), k_vars, rtol=1e-13)\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='det')\n    assert_allclose(np.linalg.det(res1.cov), 1, rtol=1e-13)\n    assert (res1.cov.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='normal')\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == '???')\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center))\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)", "ground_truth": ["(4, 4)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_114", "reponame": "statsmodels", "testpath": "statsmodels/robust/tests/test_covariance.py", "testname": "test_covariance.py", "funcname": "test_tyler", "imports": ["import os", "import numpy as np", "from scipy import linalg", "from numpy.testing import assert_allclose, assert_equal", "import pandas as pd", "from statsmodels import robust", "import statsmodels.robust.norms as robnorms", "import statsmodels.robust.covariance as robcov", "import statsmodels.robust.scale as robscale", "from .results import results_cov as res_cov"], "code": "def test_tyler():\n    np.random.seed(42)\n    sample_data = (np.random.randn(50, 4) * 1000)\n    sample_data[0] = np.zeros(4)\n    sample_data[1] = (- np.abs(sample_data[1]))\n    sample_data[2] = sample_data[1]\n    sample_data[3] = np.full(4, (- 99999))\n    sample_data[4] = np.full(4, 99999)\n    center = np.median(sample_data, axis=0)\n    k_vars = len(center)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='trace')\n    assert_allclose(np.trace(res1.cov), k_vars, rtol=1e-13)\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='det')\n    assert_allclose(np.linalg.det(res1.cov), 1, rtol=1e-13)\n    assert (res1.cov.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='normal')\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center))\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)", "masked_code": "def test_tyler():\n    np.random.seed(42)\n    sample_data = (np.random.randn(50, 4) * 1000)\n    sample_data[0] = np.zeros(4)\n    sample_data[1] = (- np.abs(sample_data[1]))\n    sample_data[2] = sample_data[1]\n    sample_data[3] = np.full(4, (- 99999))\n    sample_data[4] = np.full(4, 99999)\n    center = np.median(sample_data, axis=0)\n    k_vars = len(center)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='trace')\n    assert_allclose(np.trace(res1.cov), k_vars, rtol=1e-13)\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='det')\n    assert_allclose(np.linalg.det(res1.cov), 1, rtol=1e-13)\n    assert (res1.cov.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center), normalize='normal')\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == (4, 4))\n    assert (res1.n_iter > 1)\n    res1 = robcov.cov_tyler((sample_data - center))\n    cov_det = (res1.cov / (np.linalg.det(res1.cov) ** (1.0 / k_vars)))\n    assert (cov_det.shape == '???')\n    assert (res1.n_iter > 1)", "ground_truth": ["(4, 4)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_206", "reponame": "statsmodels", "testpath": "statsmodels/tsa/statespace/tests/test_exponential_smoothing.py", "testname": "test_exponential_smoothing.py", "funcname": "test_parameterless_model", "imports": ["import numpy as np", "import pandas as pd", "import os", "import pytest", "from numpy.testing import assert_, assert_equal, assert_allclose", "from statsmodels.tsa.statespace.exponential_smoothing import ExponentialSmoothing"], "code": "def test_parameterless_model(reset_randomstate):\n    x = np.empty(1001)\n    x[0] = 0.0\n    x[1] = (- 10.0)\n    x[2] = 10000000000.0\n    x[3] = (- 10000000000.0)\n    x[4] = 1e-08\n    x[5:995] = 7.2\n    x[995] = 0.0\n    x[996] = np.nan\n    x[997] = 39.9\n    x[998] = (- 8.3)\n    x[999] = 0.0\n    x[1000] = 9999.99\n    x = np.nan_to_num(x, nan=0.0)\n    ses = ExponentialSmoothing(x, initial_level=(- 999.0), initialization_method='known')\n    with ses.fix_params({'smoothing_level': 0.25}):\n        res = ses.fit()\n    assert np.isnan(res.bse).all()\n    assert (res.fixed_params == ['smoothing_level'])", "masked_code": "def test_parameterless_model(reset_randomstate):\n    x = np.empty(1001)\n    x[0] = 0.0\n    x[1] = (- 10.0)\n    x[2] = 10000000000.0\n    x[3] = (- 10000000000.0)\n    x[4] = 1e-08\n    x[5:995] = 7.2\n    x[995] = 0.0\n    x[996] = np.nan\n    x[997] = 39.9\n    x[998] = (- 8.3)\n    x[999] = 0.0\n    x[1000] = 9999.99\n    x = np.nan_to_num(x, nan=0.0)\n    ses = ExponentialSmoothing(x, initial_level=(- 999.0), initialization_method='known')\n    with ses.fix_params({'smoothing_level': 0.25}):\n        res = ses.fit()\n    assert np.isnan(res.bse).all()\n    assert (res.fixed_params == '???')", "ground_truth": ["['smoothing_level']"], "quality_analysis": {"complexity_score": 5, "left_complexity": 2, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_29", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_formula.py", "testname": "test_formula.py", "funcname": "test_endog_names", "imports": ["from statsmodels.compat.pandas import assert_series_equal", "import contextlib", "from io import StringIO", "import warnings", "import numpy as np", "import numpy.testing as npt", "import pandas as pd", "import pytest", "from statsmodels.datasets import cpunish", "from statsmodels.datasets.longley import load, load_pandas", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager", "from statsmodels.formula.api import ols", "from statsmodels.formula.formulatools import make_hypotheses_matrices", "from statsmodels.tools import add_constant", "from statsmodels.tools.testing import assert_equal"], "code": "def test_endog_names(self):\n    data = pd.DataFrame({'output': [4.2, 3.2, 7.1], 'input1': [2.0, 0.0, (- 1.0)], 'input2': [10, 5, 20]})\n    model = ols('output ~ input1 + input2', data)\n    assert (model.endog_names == 'output')", "masked_code": "def test_endog_names(self):\n    data = pd.DataFrame({'output': [4.2, 3.2, 7.1], 'input1': [2.0, 0.0, (- 1.0)], 'input2': [10, 5, 20]})\n    model = ols('output ~ input1 + input2', data)\n    assert (model.endog_names == '???')", "ground_truth": ["'output'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "CheckFormulaOLS"}
{"task_id": "statsmodels_30", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_formula.py", "testname": "test_formula.py", "funcname": "test_exog_names", "imports": ["from statsmodels.compat.pandas import assert_series_equal", "import contextlib", "from io import StringIO", "import warnings", "import numpy as np", "import numpy.testing as npt", "import pandas as pd", "import pytest", "from statsmodels.datasets import cpunish", "from statsmodels.datasets.longley import load, load_pandas", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager", "from statsmodels.formula.api import ols", "from statsmodels.formula.formulatools import make_hypotheses_matrices", "from statsmodels.tools import add_constant", "from statsmodels.tools.testing import assert_equal"], "code": "def test_exog_names(self):\n    data = pd.DataFrame({'target': [0, 0, 1000000, (- 50)], 'a1': [0.1, (- 1.2), 2.3, 0.0], 'a2': [1, 1, 1, 1], 'a3': ['cat', 'dog', 'cat', 'mouse']})\n    model = ols('target ~ a1 + a2 + a3', data)\n    assert (model.exog_names == ['Intercept', 'a3[T.dog]', 'a3[T.mouse]', 'a1', 'a2'])", "masked_code": "def test_exog_names(self):\n    data = pd.DataFrame({'target': [0, 0, 1000000, (- 50)], 'a1': [0.1, (- 1.2), 2.3, 0.0], 'a2': [1, 1, 1, 1], 'a3': ['cat', 'dog', 'cat', 'mouse']})\n    model = ols('target ~ a1 + a2 + a3', data)\n    assert (model.exog_names == '???')", "ground_truth": ["['Intercept', 'a3[T.dog]', 'a3[T.mouse]', 'a1', 'a2']"], "quality_analysis": {"complexity_score": 9, "left_complexity": 2, "right_complexity": 7, "is_quality": true, "reason": "High quality assertion"}, "classname": "CheckFormulaOLS"}
{"task_id": "statsmodels_28", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_formula.py", "testname": "test_formula.py", "funcname": "test_formula_predict_series_exog", "imports": ["from statsmodels.compat.pandas import assert_series_equal", "import contextlib", "from io import StringIO", "import warnings", "import numpy as np", "import numpy.testing as npt", "import pandas as pd", "import pytest", "from statsmodels.datasets import cpunish", "from statsmodels.datasets.longley import load, load_pandas", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager", "from statsmodels.formula.api import ols", "from statsmodels.formula.formulatools import make_hypotheses_matrices", "from statsmodels.tools import add_constant", "from statsmodels.tools.testing import assert_equal"], "code": "def test_formula_predict_series_exog():\n    x = (np.random.standard_normal((1000, 4)) * 1000)\n    data_full = pd.DataFrame(x, columns=['y', 'x', 'z1', 'z2'])\n    data = data_full.iloc[:700]\n    res = ols(formula='y ~ x + z1 + z2', data=data).fit()\n    oos = data_full.iloc[700:][['x', 'z1', 'z2']]\n    prediction = res.get_prediction(oos)\n    assert (prediction.predicted_mean.shape[0] == 300)", "masked_code": "def test_formula_predict_series_exog():\n    x = (np.random.standard_normal((1000, 4)) * 1000)\n    data_full = pd.DataFrame(x, columns=['y', 'x', 'z1', 'z2'])\n    data = data_full.iloc[:700]\n    res = ols(formula='y ~ x + z1 + z2', data=data).fit()\n    oos = data_full.iloc[700:][['x', 'z1', 'z2']]\n    prediction = res.get_prediction(oos)\n    assert (prediction.predicted_mean.shape[0] == '???')", "ground_truth": ["300"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_79", "reponame": "statsmodels", "testpath": "statsmodels/miscmodels/tests/test_generic_mle.py", "testname": "test_generic_mle.py", "funcname": "test_df", "imports": ["import numpy as np", "from scipy import stats", "from statsmodels.base.model import GenericLikelihoodModel", "from numpy.testing import assert_array_less, assert_almost_equal, assert_allclose"], "code": "def test_df(self):\n    res = self.res1\n    k_extra = getattr(self, 'k_extra', 0)\n    if (res.model.exog is not None):\n        (nobs, k_vars) = res.model.exog.shape\n        k_constant = 1\n    else:\n        (nobs, k_vars) = (res.model.endog.shape[0], 0)\n        k_constant = 0\n    fake_k_extra = 5\n    fake_nobs = 200\n    fake_k_vars = 0\n    fake_k_constant = 0\n    assert (((fake_nobs - fake_k_vars) - fake_k_extra) == 195)\n    assert ((fake_k_vars - fake_k_constant) == 0)\n    assert ((fake_k_vars + fake_k_extra) == 5)", "masked_code": "def test_df(self):\n    res = self.res1\n    k_extra = getattr(self, 'k_extra', 0)\n    if (res.model.exog is not None):\n        (nobs, k_vars) = res.model.exog.shape\n        k_constant = 1\n    else:\n        (nobs, k_vars) = (res.model.endog.shape[0], 0)\n        k_constant = 0\n    fake_k_extra = 5\n    fake_nobs = 200\n    fake_k_vars = 0\n    fake_k_constant = 0\n    assert (((fake_nobs - fake_k_vars) - fake_k_extra) == '???')\n    assert ((fake_k_vars - fake_k_constant) == 0)\n    assert ((fake_k_vars + fake_k_extra) == 5)", "ground_truth": ["195"], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "CheckGenericMixin"}
{"task_id": "statsmodels_80", "reponame": "statsmodels", "testpath": "statsmodels/miscmodels/tests/test_generic_mle.py", "testname": "test_generic_mle.py", "funcname": "test_df", "imports": ["import numpy as np", "from scipy import stats", "from statsmodels.base.model import GenericLikelihoodModel", "from numpy.testing import assert_array_less, assert_almost_equal, assert_allclose"], "code": "def test_df(self):\n    res = self.res1\n    k_extra = getattr(self, 'k_extra', 0)\n    if (res.model.exog is not None):\n        (nobs, k_vars) = res.model.exog.shape\n        k_constant = 1\n    else:\n        (nobs, k_vars) = (res.model.endog.shape[0], 0)\n        k_constant = 0\n    fake_k_extra = 5\n    fake_nobs = 200\n    fake_k_vars = 0\n    fake_k_constant = 0\n    assert (((fake_nobs - fake_k_vars) - fake_k_extra) == 195)\n    assert ((fake_k_vars - fake_k_constant) == 0)\n    assert ((fake_k_vars + fake_k_extra) == 5)", "masked_code": "def test_df(self):\n    res = self.res1\n    k_extra = getattr(self, 'k_extra', 0)\n    if (res.model.exog is not None):\n        (nobs, k_vars) = res.model.exog.shape\n        k_constant = 1\n    else:\n        (nobs, k_vars) = (res.model.endog.shape[0], 0)\n        k_constant = 0\n    fake_k_extra = 5\n    fake_nobs = 200\n    fake_k_vars = 0\n    fake_k_constant = 0\n    assert (((fake_nobs - fake_k_vars) - fake_k_extra) == 195)\n    assert ((fake_k_vars - fake_k_constant) == 0)\n    assert ((fake_k_vars + fake_k_extra) == '???')", "ground_truth": ["5"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "CheckGenericMixin"}
{"task_id": "statsmodels_82", "reponame": "statsmodels", "testpath": "statsmodels/miscmodels/tests/test_generic_mle.py", "testname": "test_generic_mle.py", "funcname": "test_fit", "imports": ["import numpy as np", "from scipy import stats", "from statsmodels.base.model import GenericLikelihoodModel", "from numpy.testing import assert_array_less, assert_almost_equal, assert_allclose"], "code": "def test_fit(self):\n    np.random.seed(111)\n    llh_noexog = TwoPeakLLHNoExog(self.X, signal=self.pdf_a, background=self.pdf_b)\n    res = llh_noexog.fit()\n    assert_allclose(res.params, self.params, rtol=0.1)\n    assert (res.df_resid == 403)\n    assert (res.df_model == 0)\n    res_bs = res.bootstrap(nrep=25)\n    assert_allclose(res_bs[2].mean(0), self.params, rtol=0.1)\n    res.summary()", "masked_code": "def test_fit(self):\n    np.random.seed(111)\n    llh_noexog = TwoPeakLLHNoExog(self.X, signal=self.pdf_a, background=self.pdf_b)\n    res = llh_noexog.fit()\n    assert_allclose(res.params, self.params, rtol=0.1)\n    assert (res.df_resid == '???')\n    assert (res.df_model == 0)\n    res_bs = res.bootstrap(nrep=25)\n    assert_allclose(res_bs[2].mean(0), self.params, rtol=0.1)\n    res.summary()", "ground_truth": ["403"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestTwoPeakLLHNoExog"}
{"task_id": "statsmodels_70", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_fit_params", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "def test_fit_params(self):\n    data = np.linspace((- 50), 50, 200)\n    prbplt = ProbPlot(data, dist=stats.beta, distargs=(5, 2), fit=True)\n    assert (prbplt.fit_params[(- 2)] == prbplt.loc)\n    assert (prbplt.fit_params[(- 1)] == prbplt.scale)", "masked_code": "def test_fit_params(self):\n    data = np.linspace((- 50), 50, 200)\n    prbplt = ProbPlot(data, dist=stats.beta, distargs=(5, 2), fit=True)\n    assert (prbplt.fit_params[(- 2)] == '???')\n    assert (prbplt.fit_params[(- 1)] == prbplt.scale)", "ground_truth": ["prbplt.loc"], "quality_analysis": {"complexity_score": 10, "left_complexity": 8, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": "BaseProbplotMixin"}
{"task_id": "statsmodels_71", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_fit_params", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "def test_fit_params(self):\n    data = np.linspace((- 50), 50, 200)\n    prbplt = ProbPlot(data, dist=stats.beta, distargs=(5, 2), fit=True)\n    assert (prbplt.fit_params[(- 2)] == prbplt.loc)\n    assert (prbplt.fit_params[(- 1)] == prbplt.scale)", "masked_code": "def test_fit_params(self):\n    data = np.linspace((- 50), 50, 200)\n    prbplt = ProbPlot(data, dist=stats.beta, distargs=(5, 2), fit=True)\n    assert (prbplt.fit_params[(- 2)] == prbplt.loc)\n    assert (prbplt.fit_params[(- 1)] == '???')", "ground_truth": ["prbplt.scale"], "quality_analysis": {"complexity_score": 10, "left_complexity": 8, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": "BaseProbplotMixin"}
{"task_id": "statsmodels_72", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_loc_set", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "def test_loc_set(self):\n    assert (self.prbplt.loc == 10.75)", "masked_code": "def test_loc_set(self):\n    assert (self.prbplt.loc == '???')", "ground_truth": ["10.75"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestProbPlotRandomNormalLocScaleDist"}
{"task_id": "statsmodels_74", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_loc_set", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "def test_loc_set(self):\n    assert (self.prbplt.loc == 3)", "masked_code": "def test_loc_set(self):\n    assert (self.prbplt.loc == '???')", "ground_truth": ["3"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestProbPlotRandomNormalLocScaleDist"}
{"task_id": "statsmodels_76", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_loc_set_in_dist", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "def test_loc_set_in_dist(self):\n    assert (self.prbplt.dist.mean() == 3.0)", "masked_code": "def test_loc_set_in_dist(self):\n    assert (self.prbplt.dist.mean() == '???')", "ground_truth": ["3.0"], "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestProbPlotRandomNormalLocScaleDist"}
{"task_id": "statsmodels_69", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_qqplot_2samples_kwargs", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "@pytest.mark.matplotlib\ndef test_qqplot_2samples_kwargs(close_figures):\n    data1 = np.random.normal((- 20), 0.1, 15)\n    data2 = np.random.chisquare(0.5, 15)\n    fig_with_kwarg = qqplot_2samples(data1, data2, color='orange')\n    ax = fig_with_kwarg.get_axes()[0]\n    scatter = ax.get_children()[0]\n    assert (scatter.get_color() == 'orange')\n    fig_without_kwarg = qqplot_2samples(data1, data2)\n    ax_default = fig_without_kwarg.get_axes()[0]\n    scatter_default = ax_default.get_children()[0]\n    assert (scatter_default.get_color() != 'orange')", "masked_code": "@pytest.mark.matplotlib\ndef test_qqplot_2samples_kwargs(close_figures):\n    data1 = np.random.normal((- 20), 0.1, 15)\n    data2 = np.random.chisquare(0.5, 15)\n    fig_with_kwarg = qqplot_2samples(data1, data2, color='orange')\n    ax = fig_with_kwarg.get_axes()[0]\n    scatter = ax.get_children()[0]\n    assert (scatter.get_color() == '???')\n    fig_without_kwarg = qqplot_2samples(data1, data2)\n    ax_default = fig_without_kwarg.get_axes()[0]\n    scatter_default = ax_default.get_children()[0]\n    assert (scatter_default.get_color() != 'orange')", "ground_truth": ["'orange'"], "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_67", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_qqplot_2samples_labels", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "@pytest.mark.matplotlib\ndef test_qqplot_2samples_labels():\n    try:\n        import matplotlib.pyplot as plt\n    except ImportError:\n        pass\n    data1 = np.random.normal((- 1000), 500, (10, 10))\n    data2 = np.random.normal(3000, 2500, (10, 10))\n    fig = qqplot_2samples(data1.ravel(), data2.ravel(), xlabel='NEG_SAMPLE', ylabel='POS_SAMPLE')\n    ax = fig.get_axes()[0]\n    assert (ax.get_xlabel() == 'NEG_SAMPLE')\n    assert (ax.get_ylabel() == 'POS_SAMPLE')\n    plt.close(ax.figure)", "masked_code": "@pytest.mark.matplotlib\ndef test_qqplot_2samples_labels():\n    try:\n        import matplotlib.pyplot as plt\n    except ImportError:\n        pass\n    data1 = np.random.normal((- 1000), 500, (10, 10))\n    data2 = np.random.normal(3000, 2500, (10, 10))\n    fig = qqplot_2samples(data1.ravel(), data2.ravel(), xlabel='NEG_SAMPLE', ylabel='POS_SAMPLE')\n    ax = fig.get_axes()[0]\n    assert (ax.get_xlabel() == '???')\n    assert (ax.get_ylabel() == 'POS_SAMPLE')\n    plt.close(ax.figure)", "ground_truth": ["'NEG_SAMPLE'"], "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_68", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_qqplot_2samples_labels", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "@pytest.mark.matplotlib\ndef test_qqplot_2samples_labels():\n    try:\n        import matplotlib.pyplot as plt\n    except ImportError:\n        pass\n    data1 = np.random.normal((- 1000), 500, (10, 10))\n    data2 = np.random.normal(3000, 2500, (10, 10))\n    fig = qqplot_2samples(data1.ravel(), data2.ravel(), xlabel='NEG_SAMPLE', ylabel='POS_SAMPLE')\n    ax = fig.get_axes()[0]\n    assert (ax.get_xlabel() == 'NEG_SAMPLE')\n    assert (ax.get_ylabel() == 'POS_SAMPLE')\n    plt.close(ax.figure)", "masked_code": "@pytest.mark.matplotlib\ndef test_qqplot_2samples_labels():\n    try:\n        import matplotlib.pyplot as plt\n    except ImportError:\n        pass\n    data1 = np.random.normal((- 1000), 500, (10, 10))\n    data2 = np.random.normal(3000, 2500, (10, 10))\n    fig = qqplot_2samples(data1.ravel(), data2.ravel(), xlabel='NEG_SAMPLE', ylabel='POS_SAMPLE')\n    ax = fig.get_axes()[0]\n    assert (ax.get_xlabel() == 'NEG_SAMPLE')\n    assert (ax.get_ylabel() == '???')\n    plt.close(ax.figure)", "ground_truth": ["'POS_SAMPLE'"], "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_73", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_scale_set", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "def test_scale_set(self):\n    assert (self.prbplt.scale == 2.5)", "masked_code": "def test_scale_set(self):\n    assert (self.prbplt.scale == '???')", "ground_truth": ["2.5"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestProbPlotRandomNormalLocScaleDist"}
{"task_id": "statsmodels_75", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_scale_set", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "def test_scale_set(self):\n    assert (self.prbplt.scale == 7)", "masked_code": "def test_scale_set(self):\n    assert (self.prbplt.scale == '???')", "ground_truth": ["7"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestProbPlotRandomNormalLocScaleDist"}
{"task_id": "statsmodels_77", "reponame": "statsmodels", "testpath": "statsmodels/graphics/tests/test_gofplots.py", "testname": "test_gofplots.py", "funcname": "test_scale_set_in_dist", "imports": ["from statsmodels.compat.python import PYTHON_IMPL_WASM", "import numpy as np", "import numpy.testing as nptest", "from numpy.testing import assert_equal", "import pytest", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.graphics import gofplots", "from statsmodels.graphics.gofplots import ProbPlot, qqline, qqplot, qqplot_2samples", "from statsmodels.graphics.utils import _import_mpl"], "code": "def test_scale_set_in_dist(self):\n    assert (self.prbplt.dist.var() == 49.0)", "masked_code": "def test_scale_set_in_dist(self):\n    assert (self.prbplt.dist.var() == '???')", "ground_truth": ["49.0"], "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestProbPlotRandomNormalLocScaleDist"}
{"task_id": "statsmodels_198", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_fixed_basic", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "def test_fixed_basic(ses):\n    mod = ExponentialSmoothing(ses, initialization_method='estimated')\n    fixed_value = 1e-05\n    with mod.fix_params({'smoothing_level': fixed_value}):\n        res = mod.fit()\n    assert (res.params['smoothing_level'] == fixed_value)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', damped_trend=True, initialization_method='estimated')\n    fixed_damping = 0.99999\n    with mod.fix_params({'damping_trend': fixed_damping}):\n        res = mod.fit()\n    assert (res.params['damping_trend'] == fixed_damping)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.5, 'smoothing_level': 0.4}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.5)\n    assert (res.params['smoothing_level'] == 0.4)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.999, 'smoothing_level': 0.001}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.999)\n    assert (res.params['smoothing_level'] == 0.001)\n    assert isinstance(res.summary().as_text(), str)", "masked_code": "def test_fixed_basic(ses):\n    mod = ExponentialSmoothing(ses, initialization_method='estimated')\n    fixed_value = 1e-05\n    with mod.fix_params({'smoothing_level': fixed_value}):\n        res = mod.fit()\n    assert (res.params['smoothing_level'] == '???')\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', damped_trend=True, initialization_method='estimated')\n    fixed_damping = 0.99999\n    with mod.fix_params({'damping_trend': fixed_damping}):\n        res = mod.fit()\n    assert (res.params['damping_trend'] == fixed_damping)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.5, 'smoothing_level': 0.4}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.5)\n    assert (res.params['smoothing_level'] == 0.4)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.999, 'smoothing_level': 0.001}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.999)\n    assert (res.params['smoothing_level'] == 0.001)\n    assert isinstance(res.summary().as_text(), str)", "ground_truth": ["1e-05", "fixed_value"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_199", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_fixed_basic", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "def test_fixed_basic(ses):\n    mod = ExponentialSmoothing(ses, initialization_method='estimated')\n    fixed_value = 1e-05\n    with mod.fix_params({'smoothing_level': fixed_value}):\n        res = mod.fit()\n    assert (res.params['smoothing_level'] == fixed_value)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', damped_trend=True, initialization_method='estimated')\n    fixed_damping = 0.99999\n    with mod.fix_params({'damping_trend': fixed_damping}):\n        res = mod.fit()\n    assert (res.params['damping_trend'] == fixed_damping)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.5, 'smoothing_level': 0.4}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.5)\n    assert (res.params['smoothing_level'] == 0.4)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.999, 'smoothing_level': 0.001}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.999)\n    assert (res.params['smoothing_level'] == 0.001)\n    assert isinstance(res.summary().as_text(), str)", "masked_code": "def test_fixed_basic(ses):\n    mod = ExponentialSmoothing(ses, initialization_method='estimated')\n    fixed_value = 1e-05\n    with mod.fix_params({'smoothing_level': fixed_value}):\n        res = mod.fit()\n    assert (res.params['smoothing_level'] == fixed_value)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', damped_trend=True, initialization_method='estimated')\n    fixed_damping = 0.99999\n    with mod.fix_params({'damping_trend': fixed_damping}):\n        res = mod.fit()\n    assert (res.params['damping_trend'] == '???')\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.5, 'smoothing_level': 0.4}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.5)\n    assert (res.params['smoothing_level'] == 0.4)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.999, 'smoothing_level': 0.001}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.999)\n    assert (res.params['smoothing_level'] == 0.001)\n    assert isinstance(res.summary().as_text(), str)", "ground_truth": ["0.99999", "fixed_damping"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_200", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_fixed_basic", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "def test_fixed_basic(ses):\n    mod = ExponentialSmoothing(ses, initialization_method='estimated')\n    fixed_value = 1e-05\n    with mod.fix_params({'smoothing_level': fixed_value}):\n        res = mod.fit()\n    assert (res.params['smoothing_level'] == fixed_value)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', damped_trend=True, initialization_method='estimated')\n    fixed_damping = 0.99999\n    with mod.fix_params({'damping_trend': fixed_damping}):\n        res = mod.fit()\n    assert (res.params['damping_trend'] == fixed_damping)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.5, 'smoothing_level': 0.4}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.5)\n    assert (res.params['smoothing_level'] == 0.4)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.999, 'smoothing_level': 0.001}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.999)\n    assert (res.params['smoothing_level'] == 0.001)\n    assert isinstance(res.summary().as_text(), str)", "masked_code": "def test_fixed_basic(ses):\n    mod = ExponentialSmoothing(ses, initialization_method='estimated')\n    fixed_value = 1e-05\n    with mod.fix_params({'smoothing_level': fixed_value}):\n        res = mod.fit()\n    assert (res.params['smoothing_level'] == fixed_value)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', damped_trend=True, initialization_method='estimated')\n    fixed_damping = 0.99999\n    with mod.fix_params({'damping_trend': fixed_damping}):\n        res = mod.fit()\n    assert (res.params['damping_trend'] == fixed_damping)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.5, 'smoothing_level': 0.4}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == '???')\n    assert (res.params['smoothing_level'] == 0.4)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.999, 'smoothing_level': 0.001}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.999)\n    assert (res.params['smoothing_level'] == 0.001)\n    assert isinstance(res.summary().as_text(), str)", "ground_truth": ["0.5"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_201", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_fixed_basic", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "def test_fixed_basic(ses):\n    mod = ExponentialSmoothing(ses, initialization_method='estimated')\n    fixed_value = 1e-05\n    with mod.fix_params({'smoothing_level': fixed_value}):\n        res = mod.fit()\n    assert (res.params['smoothing_level'] == fixed_value)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', damped_trend=True, initialization_method='estimated')\n    fixed_damping = 0.99999\n    with mod.fix_params({'damping_trend': fixed_damping}):\n        res = mod.fit()\n    assert (res.params['damping_trend'] == fixed_damping)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.5, 'smoothing_level': 0.4}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.5)\n    assert (res.params['smoothing_level'] == 0.4)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.999, 'smoothing_level': 0.001}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.999)\n    assert (res.params['smoothing_level'] == 0.001)\n    assert isinstance(res.summary().as_text(), str)", "masked_code": "def test_fixed_basic(ses):\n    mod = ExponentialSmoothing(ses, initialization_method='estimated')\n    fixed_value = 1e-05\n    with mod.fix_params({'smoothing_level': fixed_value}):\n        res = mod.fit()\n    assert (res.params['smoothing_level'] == fixed_value)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', damped_trend=True, initialization_method='estimated')\n    fixed_damping = 0.99999\n    with mod.fix_params({'damping_trend': fixed_damping}):\n        res = mod.fit()\n    assert (res.params['damping_trend'] == fixed_damping)\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.5, 'smoothing_level': 0.4}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.5)\n    assert (res.params['smoothing_level'] == '???')\n    assert isinstance(res.summary().as_text(), str)\n    mod = ExponentialSmoothing(ses, trend='add', seasonal='add', initialization_method='estimated')\n    with mod.fix_params({'smoothing_seasonal': 0.999, 'smoothing_level': 0.001}):\n        res = mod.fit()\n    assert (res.params['smoothing_seasonal'] == 0.999)\n    assert (res.params['smoothing_level'] == 0.001)\n    assert isinstance(res.summary().as_text(), str)", "ground_truth": ["0.4"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_203", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_forecast_1_simulation", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "@pytest.mark.parametrize('repetitions', [0, 3])\n@pytest.mark.parametrize('random_errors', [None, 'bootstrap'])\ndef test_forecast_1_simulation(random_errors, repetitions, ses):\n    fit = ExponentialSmoothing(ses, seasonal_periods=4, trend='add', seasonal='add', damped_trend=False, initialization_method='estimated').fit()\n    sim = None\n    if (repetitions != 0):\n        sim = fit.simulate(1, anchor=0, random_errors=random_errors, repetitions=repetitions)\n        expected_shape = sim.shape\n        assert (sim.shape == expected_shape)\n        sim = fit.simulate(5, anchor=0, random_errors=random_errors, repetitions=repetitions)\n        expected_shape = sim.shape\n        assert (sim.shape == expected_shape)", "masked_code": "@pytest.mark.parametrize('repetitions', [0, 3])\n@pytest.mark.parametrize('random_errors', [None, 'bootstrap'])\ndef test_forecast_1_simulation(random_errors, repetitions, ses):\n    fit = ExponentialSmoothing(ses, seasonal_periods=4, trend='add', seasonal='add', damped_trend=False, initialization_method='estimated').fit()\n    sim = None\n    if (repetitions != 0):\n        sim = fit.simulate(1, anchor=0, random_errors=random_errors, repetitions=repetitions)\n        expected_shape = sim.shape\n        assert (sim.shape == '???')\n        sim = fit.simulate(5, anchor=0, random_errors=random_errors, repetitions=repetitions)\n        expected_shape = sim.shape\n        assert (sim.shape == expected_shape)", "ground_truth": ["(1, 3)", "expected_shape"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_204", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_forecast_1_simulation", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "@pytest.mark.parametrize('repetitions', [0, 3])\n@pytest.mark.parametrize('random_errors', [None, 'bootstrap'])\ndef test_forecast_1_simulation(random_errors, repetitions, ses):\n    fit = ExponentialSmoothing(ses, seasonal_periods=4, trend='add', seasonal='add', damped_trend=False, initialization_method='estimated').fit()\n    sim = None\n    if (repetitions != 0):\n        sim = fit.simulate(1, anchor=0, random_errors=random_errors, repetitions=repetitions)\n        expected_shape = sim.shape\n        assert (sim.shape == expected_shape)\n        sim = fit.simulate(5, anchor=0, random_errors=random_errors, repetitions=repetitions)\n        expected_shape = sim.shape\n        assert (sim.shape == expected_shape)", "masked_code": "@pytest.mark.parametrize('repetitions', [0, 3])\n@pytest.mark.parametrize('random_errors', [None, 'bootstrap'])\ndef test_forecast_1_simulation(random_errors, repetitions, ses):\n    fit = ExponentialSmoothing(ses, seasonal_periods=4, trend='add', seasonal='add', damped_trend=False, initialization_method='estimated').fit()\n    sim = None\n    if (repetitions != 0):\n        sim = fit.simulate(1, anchor=0, random_errors=random_errors, repetitions=repetitions)\n        expected_shape = sim.shape\n        assert (sim.shape == expected_shape)\n        sim = fit.simulate(5, anchor=0, random_errors=random_errors, repetitions=repetitions)\n        expected_shape = sim.shape\n        assert (sim.shape == '???')", "ground_truth": ["(1, 3)", "expected_shape"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_196", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_forecast_index", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "@pytest.mark.parametrize('ix', [1, 0, 10000000, (- 100)])\ndef test_forecast_index(ix):\n    ts_1 = pd.Series([85601, 89662, 85122, 84400, 78250, 84434, 71072, 70357, 72635, 73210], index=range(ix, (ix + 10)))\n    model = ExponentialSmoothing(ts_1, trend='add', damped_trend=False).fit()\n    index = model.forecast(steps=10).index\n    assert (index[0] == (ix + 10))\n    assert (index[(- 1)] == (ix + 19))", "masked_code": "@pytest.mark.parametrize('ix', [1, 0, 10000000, (- 100)])\ndef test_forecast_index(ix):\n    ts_1 = pd.Series([85601, 89662, 85122, 84400, 78250, 84434, 71072, 70357, 72635, 73210], index=range(ix, (ix + 10)))\n    model = ExponentialSmoothing(ts_1, trend='add', damped_trend=False).fit()\n    index = model.forecast(steps=10).index\n    assert (index[0] == '???')\n    assert (index[(- 1)] == (ix + 19))", "ground_truth": ["(ix + 10)", "-90"], "quality_analysis": {"complexity_score": 9, "left_complexity": 5, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_197", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_forecast_index", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "@pytest.mark.parametrize('ix', [1, 0, 10000000, (- 100)])\ndef test_forecast_index(ix):\n    ts_1 = pd.Series([85601, 89662, 85122, 84400, 78250, 84434, 71072, 70357, 72635, 73210], index=range(ix, (ix + 10)))\n    model = ExponentialSmoothing(ts_1, trend='add', damped_trend=False).fit()\n    index = model.forecast(steps=10).index\n    assert (index[0] == (ix + 10))\n    assert (index[(- 1)] == (ix + 19))", "masked_code": "@pytest.mark.parametrize('ix', [1, 0, 10000000, (- 100)])\ndef test_forecast_index(ix):\n    ts_1 = pd.Series([85601, 89662, 85122, 84400, 78250, 84434, 71072, 70357, 72635, 73210], index=range(ix, (ix + 10)))\n    model = ExponentialSmoothing(ts_1, trend='add', damped_trend=False).fit()\n    index = model.forecast(steps=10).index\n    assert (index[0] == (ix + 10))\n    assert (index[(- 1)] == '???')", "ground_truth": ["(ix + 19)", "19"], "quality_analysis": {"complexity_score": 11, "left_complexity": 7, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_205", "reponame": "statsmodels", "testpath": "statsmodels/tsa/holtwinters/tests/test_holtwinters.py", "testname": "test_holtwinters.py", "funcname": "test_invalid_index", "imports": ["from statsmodels.compat.pandas import MONTH_END", "from statsmodels.compat.pytest import pytest_warns", "import os", "import re", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal", "import pandas as pd", "import pytest", "import scipy.stats", "from statsmodels.tools.sm_exceptions import ValueWarning", "from statsmodels.tsa.holtwinters import PY_SMOOTHERS, SMOOTHERS, ExponentialSmoothing, Holt, SimpleExpSmoothing", "from statsmodels.tsa.holtwinters._exponential_smoothers import HoltWintersArgs, _test_to_restricted", "from statsmodels.tsa.holtwinters._smoothers import HoltWintersArgs as PyHoltWintersArgs, to_restricted, to_unrestricted"], "code": "def test_invalid_index(reset_randomstate):\n    y = np.random.standard_normal((12 * 30))\n    df_y = pd.DataFrame(data=y)\n    df_y.index.freq = 'weird-freq-string'\n    model = ExponentialSmoothing(df_y, seasonal_periods=6, trend='add', seasonal='add', initialization_method='heuristic')\n    fitted = model.fit(optimized=True, use_brute=True)\n    fcast = fitted.forecast(steps=1000)\n    assert (fcast.shape[0] == 1000)\n    index = [f'xdate{i}' for i in range(df_y.shape[0])]\n    df_y2 = df_y.copy()\n    df_y2.index = index\n    assert isinstance(df_y2.index, pd.Index)\n    with pytest.warns(ValueWarning, match='unsupported index was provided'):\n        model = ExponentialSmoothing(df_y2, seasonal_periods=6, trend='add', seasonal='add', initialization_method='heuristic')\n    fitted = model.fit(optimized=True, use_brute=True)\n    with pytest.warns(FutureWarning, match='No supported'):\n        fitted.forecast(steps=1000)", "masked_code": "def test_invalid_index(reset_randomstate):\n    y = np.random.standard_normal((12 * 30))\n    df_y = pd.DataFrame(data=y)\n    df_y.index.freq = 'weird-freq-string'\n    model = ExponentialSmoothing(df_y, seasonal_periods=6, trend='add', seasonal='add', initialization_method='heuristic')\n    fitted = model.fit(optimized=True, use_brute=True)\n    fcast = fitted.forecast(steps=1000)\n    assert (fcast.shape[0] == '???')\n    index = [f'xdate{i}' for i in range(df_y.shape[0])]\n    df_y2 = df_y.copy()\n    df_y2.index = index\n    assert isinstance(df_y2.index, pd.Index)\n    with pytest.warns(ValueWarning, match='unsupported index was provided'):\n        model = ExponentialSmoothing(df_y2, seasonal_periods=6, trend='add', seasonal='add', initialization_method='heuristic')\n    fitted = model.fit(optimized=True, use_brute=True)\n    with pytest.warns(FutureWarning, match='No supported'):\n        fitted.forecast(steps=1000)", "ground_truth": ["1000"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_39", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_default_value", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_default_value():\n    from statsmodels.formula._manager import _Default, _NoDefault\n    assert isinstance(_NoDefault, _Default)\n    _NoDefault.__str__()\n    assert (str(_NoDefault) == '<no default value>')\n    assert (repr(_NoDefault) == '<no default value>')\n    assert (_NoDefault != 'default')\n    assert (_NoDefault != None)", "masked_code": "def test_default_value():\n    from statsmodels.formula._manager import _Default, _NoDefault\n    assert isinstance(_NoDefault, _Default)\n    _NoDefault.__str__()\n    assert (str(_NoDefault) == '???')\n    assert (repr(_NoDefault) == '<no default value>')\n    assert (_NoDefault != 'default')\n    assert (_NoDefault != None)", "ground_truth": ["'<no default value>'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_40", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_default_value", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_default_value():\n    from statsmodels.formula._manager import _Default, _NoDefault\n    assert isinstance(_NoDefault, _Default)\n    _NoDefault.__str__()\n    assert (str(_NoDefault) == '<no default value>')\n    assert (repr(_NoDefault) == '<no default value>')\n    assert (_NoDefault != 'default')\n    assert (_NoDefault != None)", "masked_code": "def test_default_value():\n    from statsmodels.formula._manager import _Default, _NoDefault\n    assert isinstance(_NoDefault, _Default)\n    _NoDefault.__str__()\n    assert (str(_NoDefault) == '<no default value>')\n    assert (repr(_NoDefault) == '???')\n    assert (_NoDefault != 'default')\n    assert (_NoDefault != None)", "ground_truth": ["'<no default value>'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_38", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_engine", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_engine(engine):\n    mgr = FormulaManager(engine=engine)\n    assert (mgr.engine == engine)\n    with pytest.raises(ValueError):\n        FormulaManager(engine='other_engine')", "masked_code": "def test_engine(engine):\n    mgr = FormulaManager(engine=engine)\n    assert (mgr.engine == '???')\n    with pytest.raises(ValueError):\n        FormulaManager(engine='other_engine')", "ground_truth": ["engine"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_31", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_engine_options_engine", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_engine_options_engine(engine):\n    default = statsmodels.formula.options.formula_engine\n    assert (default in ('patsy', 'formulaic'))\n    statsmodels.formula.options.formula_engine = engine\n    mgr = FormulaManager(engine=engine)\n    assert (mgr.engine == engine)\n    if HAS_FORMULAIC:\n        statsmodels.formula.options.formula_engine = 'formulaic'\n        mgr = FormulaManager()\n        assert (mgr.engine == 'formulaic')\n        if HAS_PATSY:\n            mgr = FormulaManager(engine='patsy')\n            assert (mgr.engine == 'patsy')\n    statsmodels.formula.options.formula_engine = default", "masked_code": "def test_engine_options_engine(engine):\n    default = statsmodels.formula.options.formula_engine\n    assert (default in ('patsy', 'formulaic'))\n    statsmodels.formula.options.formula_engine = engine\n    mgr = FormulaManager(engine=engine)\n    assert (mgr.engine == '???')\n    if HAS_FORMULAIC:\n        statsmodels.formula.options.formula_engine = 'formulaic'\n        mgr = FormulaManager()\n        assert (mgr.engine == 'formulaic')\n        if HAS_PATSY:\n            mgr = FormulaManager(engine='patsy')\n            assert (mgr.engine == 'patsy')\n    statsmodels.formula.options.formula_engine = default", "ground_truth": ["engine"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_32", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_engine_options_engine", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_engine_options_engine(engine):\n    default = statsmodels.formula.options.formula_engine\n    assert (default in ('patsy', 'formulaic'))\n    statsmodels.formula.options.formula_engine = engine\n    mgr = FormulaManager(engine=engine)\n    assert (mgr.engine == engine)\n    if HAS_FORMULAIC:\n        statsmodels.formula.options.formula_engine = 'formulaic'\n        mgr = FormulaManager()\n        assert (mgr.engine == 'formulaic')\n        if HAS_PATSY:\n            mgr = FormulaManager(engine='patsy')\n            assert (mgr.engine == 'patsy')\n    statsmodels.formula.options.formula_engine = default", "masked_code": "def test_engine_options_engine(engine):\n    default = statsmodels.formula.options.formula_engine\n    assert (default in ('patsy', 'formulaic'))\n    statsmodels.formula.options.formula_engine = engine\n    mgr = FormulaManager(engine=engine)\n    assert (mgr.engine == engine)\n    if HAS_FORMULAIC:\n        statsmodels.formula.options.formula_engine = 'formulaic'\n        mgr = FormulaManager()\n        assert (mgr.engine == '???')\n        if HAS_PATSY:\n            mgr = FormulaManager(engine='patsy')\n            assert (mgr.engine == 'patsy')\n    statsmodels.formula.options.formula_engine = default", "ground_truth": ["'formulaic'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_33", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_engine_options_engine", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_engine_options_engine(engine):\n    default = statsmodels.formula.options.formula_engine\n    assert (default in ('patsy', 'formulaic'))\n    statsmodels.formula.options.formula_engine = engine\n    mgr = FormulaManager(engine=engine)\n    assert (mgr.engine == engine)\n    if HAS_FORMULAIC:\n        statsmodels.formula.options.formula_engine = 'formulaic'\n        mgr = FormulaManager()\n        assert (mgr.engine == 'formulaic')\n        if HAS_PATSY:\n            mgr = FormulaManager(engine='patsy')\n            assert (mgr.engine == 'patsy')\n    statsmodels.formula.options.formula_engine = default", "masked_code": "def test_engine_options_engine(engine):\n    default = statsmodels.formula.options.formula_engine\n    assert (default in ('patsy', 'formulaic'))\n    statsmodels.formula.options.formula_engine = engine\n    mgr = FormulaManager(engine=engine)\n    assert (mgr.engine == engine)\n    if HAS_FORMULAIC:\n        statsmodels.formula.options.formula_engine = 'formulaic'\n        mgr = FormulaManager()\n        assert (mgr.engine == 'formulaic')\n        if HAS_PATSY:\n            mgr = FormulaManager(engine='patsy')\n            assert (mgr.engine == '???')\n    statsmodels.formula.options.formula_engine = default", "ground_truth": ["'patsy'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_34", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_engine_options_order", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "@pytest.mark.parametrize('ordering', ['degree', 'sort', 'none', 'legacy', 'NONE', 'SORT'])\ndef test_engine_options_order(ordering):\n    default = statsmodels.formula.options.ordering\n    assert (default in ('degree', 'sort', 'none', 'legacy'))\n    if ordering.isupper():\n        statsmodels.formula.options.ordering = ordering.lower()\n        assert (statsmodels.formula.options.ordering == ordering.lower())\n        statsmodels.formula.options.ordering = default\n    else:\n        statsmodels.formula.options.ordering = ordering\n        assert (statsmodels.formula.options.ordering == ordering)\n        statsmodels.formula.options.ordering = default\n    with pytest.raises(ValueError):\n        statsmodels.formula.options.ordering = 'unknown_ordering'", "masked_code": "@pytest.mark.parametrize('ordering', ['degree', 'sort', 'none', 'legacy', 'NONE', 'SORT'])\ndef test_engine_options_order(ordering):\n    default = statsmodels.formula.options.ordering\n    assert (default in ('degree', 'sort', 'none', 'legacy'))\n    if ordering.isupper():\n        statsmodels.formula.options.ordering = ordering.lower()\n        assert (statsmodels.formula.options.ordering == '???')\n        statsmodels.formula.options.ordering = default\n    else:\n        statsmodels.formula.options.ordering = ordering\n        assert (statsmodels.formula.options.ordering == ordering)\n        statsmodels.formula.options.ordering = default\n    with pytest.raises(ValueError):\n        statsmodels.formula.options.ordering = 'unknown_ordering'", "ground_truth": ["ordering.lower()"], "quality_analysis": {"complexity_score": 5, "left_complexity": 2, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_35", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_engine_options_order_effect", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "@require_formulaic\ndef test_engine_options_order_effect(data):\n    default = statsmodels.formula.options.ordering\n    statsmodels.formula.options.ordering = 'degree'\n    mgr = FormulaManager(engine='formulaic')\n    (_, rhs0) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'sort'\n    (_, rhs1) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'none'\n    (_, rhs2) = mgr.get_matrices('y ~ x + 1 + c + z', data)\n    assert (len(rhs0.columns) == 5)\n    assert (len(rhs1.columns) == 5)\n    assert (len(rhs2.columns) == 5)\n    assert (list(rhs0.columns) != list(rhs1.columns))\n    assert (list(rhs0.columns) != list(rhs2.columns))\n    assert (list(rhs1.columns) != list(rhs2.columns))\n    statsmodels.formula.options.ordering = default", "masked_code": "@require_formulaic\ndef test_engine_options_order_effect(data):\n    default = statsmodels.formula.options.ordering\n    statsmodels.formula.options.ordering = 'degree'\n    mgr = FormulaManager(engine='formulaic')\n    (_, rhs0) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'sort'\n    (_, rhs1) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'none'\n    (_, rhs2) = mgr.get_matrices('y ~ x + 1 + c + z', data)\n    assert (len(rhs0.columns) == '???')\n    assert (len(rhs1.columns) == 5)\n    assert (len(rhs2.columns) == 5)\n    assert (list(rhs0.columns) != list(rhs1.columns))\n    assert (list(rhs0.columns) != list(rhs2.columns))\n    assert (list(rhs1.columns) != list(rhs2.columns))\n    statsmodels.formula.options.ordering = default", "ground_truth": ["5"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_36", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_engine_options_order_effect", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "@require_formulaic\ndef test_engine_options_order_effect(data):\n    default = statsmodels.formula.options.ordering\n    statsmodels.formula.options.ordering = 'degree'\n    mgr = FormulaManager(engine='formulaic')\n    (_, rhs0) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'sort'\n    (_, rhs1) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'none'\n    (_, rhs2) = mgr.get_matrices('y ~ x + 1 + c + z', data)\n    assert (len(rhs0.columns) == 5)\n    assert (len(rhs1.columns) == 5)\n    assert (len(rhs2.columns) == 5)\n    assert (list(rhs0.columns) != list(rhs1.columns))\n    assert (list(rhs0.columns) != list(rhs2.columns))\n    assert (list(rhs1.columns) != list(rhs2.columns))\n    statsmodels.formula.options.ordering = default", "masked_code": "@require_formulaic\ndef test_engine_options_order_effect(data):\n    default = statsmodels.formula.options.ordering\n    statsmodels.formula.options.ordering = 'degree'\n    mgr = FormulaManager(engine='formulaic')\n    (_, rhs0) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'sort'\n    (_, rhs1) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'none'\n    (_, rhs2) = mgr.get_matrices('y ~ x + 1 + c + z', data)\n    assert (len(rhs0.columns) == 5)\n    assert (len(rhs1.columns) == '???')\n    assert (len(rhs2.columns) == 5)\n    assert (list(rhs0.columns) != list(rhs1.columns))\n    assert (list(rhs0.columns) != list(rhs2.columns))\n    assert (list(rhs1.columns) != list(rhs2.columns))\n    statsmodels.formula.options.ordering = default", "ground_truth": ["5"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_37", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_engine_options_order_effect", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "@require_formulaic\ndef test_engine_options_order_effect(data):\n    default = statsmodels.formula.options.ordering\n    statsmodels.formula.options.ordering = 'degree'\n    mgr = FormulaManager(engine='formulaic')\n    (_, rhs0) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'sort'\n    (_, rhs1) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'none'\n    (_, rhs2) = mgr.get_matrices('y ~ x + 1 + c + z', data)\n    assert (len(rhs0.columns) == 5)\n    assert (len(rhs1.columns) == 5)\n    assert (len(rhs2.columns) == 5)\n    assert (list(rhs0.columns) != list(rhs1.columns))\n    assert (list(rhs0.columns) != list(rhs2.columns))\n    assert (list(rhs1.columns) != list(rhs2.columns))\n    statsmodels.formula.options.ordering = default", "masked_code": "@require_formulaic\ndef test_engine_options_order_effect(data):\n    default = statsmodels.formula.options.ordering\n    statsmodels.formula.options.ordering = 'degree'\n    mgr = FormulaManager(engine='formulaic')\n    (_, rhs0) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'sort'\n    (_, rhs1) = mgr.get_matrices('y ~ 1 + x + z + c', data)\n    statsmodels.formula.options.ordering = 'none'\n    (_, rhs2) = mgr.get_matrices('y ~ x + 1 + c + z', data)\n    assert (len(rhs0.columns) == 5)\n    assert (len(rhs1.columns) == 5)\n    assert (len(rhs2.columns) == '???')\n    assert (list(rhs0.columns) != list(rhs1.columns))\n    assert (list(rhs0.columns) != list(rhs2.columns))\n    assert (list(rhs1.columns) != list(rhs2.columns))\n    statsmodels.formula.options.ordering = default", "ground_truth": ["5"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_43", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_get_na_action", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_get_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    result = mgr.get_na_action('drop')\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'drop')\n        assert (result.NA_types == ('None', 'NaN'))\n    else:\n        assert (result == 'drop')\n    result = mgr.get_na_action(action='raise', types=['None', 'NaN'])\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'raise')\n        assert (set(result.NA_types) == set(('None', 'NaN')))\n    else:\n        assert (result == 'raise')", "masked_code": "def test_get_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    result = mgr.get_na_action('drop')\n    if (engine == 'patsy'):\n        assert (result.on_NA == '???')\n        assert (result.NA_types == ('None', 'NaN'))\n    else:\n        assert (result == 'drop')\n    result = mgr.get_na_action(action='raise', types=['None', 'NaN'])\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'raise')\n        assert (set(result.NA_types) == set(('None', 'NaN')))\n    else:\n        assert (result == 'raise')", "ground_truth": ["'drop'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_44", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_get_na_action", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_get_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    result = mgr.get_na_action('drop')\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'drop')\n        assert (result.NA_types == ('None', 'NaN'))\n    else:\n        assert (result == 'drop')\n    result = mgr.get_na_action(action='raise', types=['None', 'NaN'])\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'raise')\n        assert (set(result.NA_types) == set(('None', 'NaN')))\n    else:\n        assert (result == 'raise')", "masked_code": "def test_get_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    result = mgr.get_na_action('drop')\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'drop')\n        assert (result.NA_types == '???')\n    else:\n        assert (result == 'drop')\n    result = mgr.get_na_action(action='raise', types=['None', 'NaN'])\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'raise')\n        assert (set(result.NA_types) == set(('None', 'NaN')))\n    else:\n        assert (result == 'raise')", "ground_truth": ["('None', 'NaN')"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_45", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_get_na_action", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_get_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    result = mgr.get_na_action('drop')\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'drop')\n        assert (result.NA_types == ('None', 'NaN'))\n    else:\n        assert (result == 'drop')\n    result = mgr.get_na_action(action='raise', types=['None', 'NaN'])\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'raise')\n        assert (set(result.NA_types) == set(('None', 'NaN')))\n    else:\n        assert (result == 'raise')", "masked_code": "def test_get_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    result = mgr.get_na_action('drop')\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'drop')\n        assert (result.NA_types == ('None', 'NaN'))\n    else:\n        assert (result == 'drop')\n    result = mgr.get_na_action(action='raise', types=['None', 'NaN'])\n    if (engine == 'patsy'):\n        assert (result.on_NA == '???')\n        assert (set(result.NA_types) == set(('None', 'NaN')))\n    else:\n        assert (result == 'raise')", "ground_truth": ["'raise'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_46", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_get_na_action", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_get_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    result = mgr.get_na_action('drop')\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'drop')\n        assert (result.NA_types == ('None', 'NaN'))\n    else:\n        assert (result == 'drop')\n    result = mgr.get_na_action(action='raise', types=['None', 'NaN'])\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'raise')\n        assert (set(result.NA_types) == set(('None', 'NaN')))\n    else:\n        assert (result == 'raise')", "masked_code": "def test_get_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    result = mgr.get_na_action('drop')\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'drop')\n        assert (result.NA_types == ('None', 'NaN'))\n    else:\n        assert (result == 'drop')\n    result = mgr.get_na_action(action='raise', types=['None', 'NaN'])\n    if (engine == 'patsy'):\n        assert (result.on_NA == 'raise')\n        assert (set(result.NA_types) == '???')\n    else:\n        assert (result == 'raise')", "ground_truth": ["set(('None', 'NaN'))"], "quality_analysis": {"complexity_score": 12, "left_complexity": 5, "right_complexity": 7, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_41", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_get_spec", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_get_spec(engine):\n    mgr = FormulaManager(engine=engine)\n    spec = mgr.get_spec('y ~ 1 + x + z + c')\n    if (engine == 'patsy'):\n        assert isinstance(spec, patsy.desc.ModelDesc)\n        assert (len(spec.lhs_termlist) == 1)\n        assert (len(spec.rhs_termlist) == 4)\n    else:\n        assert isinstance(spec, formulaic.formula.Formula)\n        assert (len(spec.lhs) == 1)\n        assert (len(spec.rhs) == 4)", "masked_code": "def test_get_spec(engine):\n    mgr = FormulaManager(engine=engine)\n    spec = mgr.get_spec('y ~ 1 + x + z + c')\n    if (engine == 'patsy'):\n        assert isinstance(spec, patsy.desc.ModelDesc)\n        assert (len(spec.lhs_termlist) == 1)\n        assert (len(spec.rhs_termlist) == '???')\n    else:\n        assert isinstance(spec, formulaic.formula.Formula)\n        assert (len(spec.lhs) == 1)\n        assert (len(spec.rhs) == 4)", "ground_truth": ["4"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_42", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_get_spec", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_get_spec(engine):\n    mgr = FormulaManager(engine=engine)\n    spec = mgr.get_spec('y ~ 1 + x + z + c')\n    if (engine == 'patsy'):\n        assert isinstance(spec, patsy.desc.ModelDesc)\n        assert (len(spec.lhs_termlist) == 1)\n        assert (len(spec.rhs_termlist) == 4)\n    else:\n        assert isinstance(spec, formulaic.formula.Formula)\n        assert (len(spec.lhs) == 1)\n        assert (len(spec.rhs) == 4)", "masked_code": "def test_get_spec(engine):\n    mgr = FormulaManager(engine=engine)\n    spec = mgr.get_spec('y ~ 1 + x + z + c')\n    if (engine == 'patsy'):\n        assert isinstance(spec, patsy.desc.ModelDesc)\n        assert (len(spec.lhs_termlist) == 1)\n        assert (len(spec.rhs_termlist) == 4)\n    else:\n        assert isinstance(spec, formulaic.formula.Formula)\n        assert (len(spec.lhs) == 1)\n        assert (len(spec.rhs) == '???')", "ground_truth": ["4"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_51", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_get_term_name_slices", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_get_term_name_slices(engine, data):\n    mgr = FormulaManager(engine=engine)\n    fmla = 'y ~ 1 + x + z + c'\n    (lhs, rhs) = mgr.get_matrices(fmla, data)\n    slices = mgr.get_term_name_slices(rhs)\n    if (engine == 'patsy'):\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 4, None), 2: slice(4, 5, None), 3: slice(5, 6, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    else:\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 3, None), 2: slice(3, 4, None), 3: slice(4, 5, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    slices = mgr.get_term_name_slices(mgr.get_model_spec(rhs))\n    if (engine == 'patsy'):\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 4, None), 2: slice(4, 5, None), 3: slice(5, 6, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    else:\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 3, None), 2: slice(3, 4, None), 3: slice(4, 5, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])", "masked_code": "def test_get_term_name_slices(engine, data):\n    mgr = FormulaManager(engine=engine)\n    fmla = 'y ~ 1 + x + z + c'\n    (lhs, rhs) = mgr.get_matrices(fmla, data)\n    slices = mgr.get_term_name_slices(rhs)\n    if (engine == 'patsy'):\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 4, None), 2: slice(4, 5, None), 3: slice(5, 6, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == '???')\n    else:\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 3, None), 2: slice(3, 4, None), 3: slice(4, 5, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    slices = mgr.get_term_name_slices(mgr.get_model_spec(rhs))\n    if (engine == 'patsy'):\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 4, None), 2: slice(4, 5, None), 3: slice(5, 6, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    else:\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 3, None), 2: slice(3, 4, None), 3: slice(4, 5, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])", "ground_truth": ["expected[i]"], "quality_analysis": {"complexity_score": 10, "left_complexity": 5, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_52", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_get_term_name_slices", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_get_term_name_slices(engine, data):\n    mgr = FormulaManager(engine=engine)\n    fmla = 'y ~ 1 + x + z + c'\n    (lhs, rhs) = mgr.get_matrices(fmla, data)\n    slices = mgr.get_term_name_slices(rhs)\n    if (engine == 'patsy'):\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 4, None), 2: slice(4, 5, None), 3: slice(5, 6, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    else:\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 3, None), 2: slice(3, 4, None), 3: slice(4, 5, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    slices = mgr.get_term_name_slices(mgr.get_model_spec(rhs))\n    if (engine == 'patsy'):\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 4, None), 2: slice(4, 5, None), 3: slice(5, 6, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    else:\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 3, None), 2: slice(3, 4, None), 3: slice(4, 5, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])", "masked_code": "def test_get_term_name_slices(engine, data):\n    mgr = FormulaManager(engine=engine)\n    fmla = 'y ~ 1 + x + z + c'\n    (lhs, rhs) = mgr.get_matrices(fmla, data)\n    slices = mgr.get_term_name_slices(rhs)\n    if (engine == 'patsy'):\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 4, None), 2: slice(4, 5, None), 3: slice(5, 6, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    else:\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 3, None), 2: slice(3, 4, None), 3: slice(4, 5, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == '???')\n    slices = mgr.get_term_name_slices(mgr.get_model_spec(rhs))\n    if (engine == 'patsy'):\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 4, None), 2: slice(4, 5, None), 3: slice(5, 6, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])\n    else:\n        keys = list(slices.keys())\n        expected = {0: slice(0, 1, None), 1: slice(1, 3, None), 2: slice(3, 4, None), 3: slice(4, 5, None)}\n        for (i, key) in enumerate(keys):\n            assert (slices[key] == expected[i])", "ground_truth": ["expected[i]"], "quality_analysis": {"complexity_score": 10, "left_complexity": 5, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_53", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_legacy_orderer", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "@require_formulaic\n@require_patsy\ndef test_legacy_orderer(formula):\n    np.random.seed(0)\n    n = 100\n    data = pd.DataFrame({'y': np.random.standard_normal(n), 'a': np.random.standard_normal(n), 'b': np.random.standard_normal(n), 'c': np.append(np.random.standard_normal((n - 5)), ([np.nan] * 5)), 'd': pd.Series(np.random.choice(['a', 'b', 'c', ''], size=n), dtype='category'), 'e': pd.Series(np.random.choice(['a', 'b', 'c', None], size=n), dtype='category'), 'f': pd.Series(np.random.choice(['a', 'b', 'c', 'Z'], size=n), dtype='category')})\n    mgr = FormulaManager(engine='formulaic')\n    ordered_formula = mgr._legacy_orderer(formula, data, 0)\n    mm = mgr.get_matrices(ordered_formula, data)\n    (_, patsy_rhs) = patsy.dmatrices(formula, data, return_type='dataframe')\n    index = list(patsy_rhs.columns)\n    patsy_rhs.columns = index\n    assert (list(mm[1].columns) == list(patsy_rhs.columns))", "masked_code": "@require_formulaic\n@require_patsy\ndef test_legacy_orderer(formula):\n    np.random.seed(0)\n    n = 100\n    data = pd.DataFrame({'y': np.random.standard_normal(n), 'a': np.random.standard_normal(n), 'b': np.random.standard_normal(n), 'c': np.append(np.random.standard_normal((n - 5)), ([np.nan] * 5)), 'd': pd.Series(np.random.choice(['a', 'b', 'c', ''], size=n), dtype='category'), 'e': pd.Series(np.random.choice(['a', 'b', 'c', None], size=n), dtype='category'), 'f': pd.Series(np.random.choice(['a', 'b', 'c', 'Z'], size=n), dtype='category')})\n    mgr = FormulaManager(engine='formulaic')\n    ordered_formula = mgr._legacy_orderer(formula, data, 0)\n    mm = mgr.get_matrices(ordered_formula, data)\n    (_, patsy_rhs) = patsy.dmatrices(formula, data, return_type='dataframe')\n    index = list(patsy_rhs.columns)\n    patsy_rhs.columns = index\n    assert (list(mm[1].columns) == '???')", "ground_truth": ["list(patsy_rhs.columns)"], "quality_analysis": {"complexity_score": 10, "left_complexity": 5, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_47", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_na_action", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    fmla = 'y ~ 1 + x + z'\n    missing = data.copy()\n    missing.iloc[(::2, 1)] = np.nan\n    dropper = mgr.get_na_action('drop')\n    (lhs, rhs) = mgr.get_matrices(fmla, missing, na_action=dropper)\n    assert (rhs.shape[0] == 1)\n    raiser = mgr.get_na_action('raise')\n    if (engine == 'patsy'):\n        exception = patsy.PatsyError\n    else:\n        exception = ValueError\n    with pytest.raises(exception):\n        mgr.get_matrices(fmla, missing, na_action=raiser)\n    if (engine == 'patsy'):\n        return\n    ignorer = mgr.get_na_action('ignore')\n    (lhs, rhs) = mgr.get_matrices(fmla, missing, na_action=ignorer)\n    assert (lhs.shape[0] == rhs.shape[0])\n    assert (rhs.shape[0] == missing.shape[0])", "masked_code": "def test_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    fmla = 'y ~ 1 + x + z'\n    missing = data.copy()\n    missing.iloc[(::2, 1)] = np.nan\n    dropper = mgr.get_na_action('drop')\n    (lhs, rhs) = mgr.get_matrices(fmla, missing, na_action=dropper)\n    assert (rhs.shape[0] == 1)\n    raiser = mgr.get_na_action('raise')\n    if (engine == 'patsy'):\n        exception = patsy.PatsyError\n    else:\n        exception = ValueError\n    with pytest.raises(exception):\n        mgr.get_matrices(fmla, missing, na_action=raiser)\n    if (engine == 'patsy'):\n        return\n    ignorer = mgr.get_na_action('ignore')\n    (lhs, rhs) = mgr.get_matrices(fmla, missing, na_action=ignorer)\n    assert (lhs.shape[0] == '???')\n    assert (rhs.shape[0] == missing.shape[0])", "ground_truth": ["rhs.shape[0]"], "quality_analysis": {"complexity_score": 12, "left_complexity": 6, "right_complexity": 6, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_48", "reponame": "statsmodels", "testpath": "statsmodels/formula/tests/test_manager.py", "testname": "test_manager.py", "funcname": "test_na_action", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "import statsmodels.formula", "from statsmodels.formula._manager import FormulaManager, LinearConstraintValues"], "code": "def test_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    fmla = 'y ~ 1 + x + z'\n    missing = data.copy()\n    missing.iloc[(::2, 1)] = np.nan\n    dropper = mgr.get_na_action('drop')\n    (lhs, rhs) = mgr.get_matrices(fmla, missing, na_action=dropper)\n    assert (rhs.shape[0] == 1)\n    raiser = mgr.get_na_action('raise')\n    if (engine == 'patsy'):\n        exception = patsy.PatsyError\n    else:\n        exception = ValueError\n    with pytest.raises(exception):\n        mgr.get_matrices(fmla, missing, na_action=raiser)\n    if (engine == 'patsy'):\n        return\n    ignorer = mgr.get_na_action('ignore')\n    (lhs, rhs) = mgr.get_matrices(fmla, missing, na_action=ignorer)\n    assert (lhs.shape[0] == rhs.shape[0])\n    assert (rhs.shape[0] == missing.shape[0])", "masked_code": "def test_na_action(engine, data):\n    mgr = FormulaManager(engine=engine)\n    fmla = 'y ~ 1 + x + z'\n    missing = data.copy()\n    missing.iloc[(::2, 1)] = np.nan\n    dropper = mgr.get_na_action('drop')\n    (lhs, rhs) = mgr.get_matrices(fmla, missing, na_action=dropper)\n    assert (rhs.shape[0] == 1)\n    raiser = mgr.get_na_action('raise')\n    if (engine == 'patsy'):\n        exception = patsy.PatsyError\n    else:\n        exception = ValueError\n    with pytest.raises(exception):\n        mgr.get_matrices(fmla, missing, na_action=raiser)\n    if (engine == 'patsy'):\n        return\n    ignorer = mgr.get_na_action('ignore')\n    (lhs, rhs) = mgr.get_matrices(fmla, missing, na_action=ignorer)\n    assert (lhs.shape[0] == rhs.shape[0])\n    assert (rhs.shape[0] == '???')", "ground_truth": ["missing.shape[0]"], "quality_analysis": {"complexity_score": 12, "left_complexity": 6, "right_complexity": 6, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_115", "reponame": "statsmodels", "testpath": "statsmodels/robust/tests/test_norms.py", "testname": "test_norms.py", "funcname": "test_norm", "imports": ["import pytest", "import numpy as np", "from numpy.testing import assert_allclose", "from statsmodels.robust import norms", "from statsmodels.tools.numdiff import _approx_fprime_scalar", "from .results import results_norms as res_r"], "code": "@pytest.mark.parametrize('dtype', dtypes)\n@pytest.mark.parametrize('case', cases)\ndef test_norm(case, dtype):\n    (ncls, args, res) = case\n    if ((ncls in [norms.HuberT]) and (dtype == np.complex128)):\n        return\n    norm = ncls(*args)\n    x = np.array([(- 100), (- 50), (- 10), (- 2.0001), (- 1.0), 0, 0, 1, 1.999, 2.0001, 10, 50, 100, 10000000000.0, (- 10000000000.0)], dtype=dtype)\n    weights = norm.weights(x)\n    rho = norm.rho(x)\n    psi = norm.psi(x)\n    psi_deriv = norm.psi_deriv(x)\n    assert np.all((weights >= 0))\n    assert np.all((weights <= 1))\n    assert np.all((rho >= 0))\n    assert (psi.shape == x.shape)\n    assert (psi_deriv.shape == x.shape)\n    dtype2 = np.promote_types(dtype, 'float')\n    assert (weights.dtype == dtype2)\n    assert (rho.dtype == dtype2)\n    assert (psi.dtype == dtype2)\n    assert (psi_deriv.dtype == dtype2)\n    psid = _approx_fprime_scalar(x, norm.rho)\n    assert_allclose(psid, psi, rtol=1e-06, atol=1e-08)\n    psidd = _approx_fprime_scalar(x, norm.psi)\n    assert_allclose(psidd, psi_deriv, rtol=1e-06, atol=1e-08)\n    methods = ['weights', 'rho', 'psi', 'psi_deriv']\n    for meth in methods:\n        resm = [getattr(norm, meth)(xi) for xi in x]\n        arr = getattr(norm, meth)(x)\n        assert_allclose(resm, arr, rtol=1e-06, atol=1e-08)", "masked_code": "@pytest.mark.parametrize('dtype', dtypes)\n@pytest.mark.parametrize('case', cases)\ndef test_norm(case, dtype):\n    (ncls, args, res) = case\n    if ((ncls in [norms.HuberT]) and (dtype == np.complex128)):\n        return\n    norm = ncls(*args)\n    x = np.array([(- 100), (- 50), (- 10), (- 2.0001), (- 1.0), 0, 0, 1, 1.999, 2.0001, 10, 50, 100, 10000000000.0, (- 10000000000.0)], dtype=dtype)\n    weights = norm.weights(x)\n    rho = norm.rho(x)\n    psi = norm.psi(x)\n    psi_deriv = norm.psi_deriv(x)\n    assert np.all((weights >= 0))\n    assert np.all((weights <= 1))\n    assert np.all((rho >= 0))\n    assert (psi.shape == '???')\n    assert (psi_deriv.shape == x.shape)\n    dtype2 = np.promote_types(dtype, 'float')\n    assert (weights.dtype == dtype2)\n    assert (rho.dtype == dtype2)\n    assert (psi.dtype == dtype2)\n    assert (psi_deriv.dtype == dtype2)\n    psid = _approx_fprime_scalar(x, norm.rho)\n    assert_allclose(psid, psi, rtol=1e-06, atol=1e-08)\n    psidd = _approx_fprime_scalar(x, norm.psi)\n    assert_allclose(psidd, psi_deriv, rtol=1e-06, atol=1e-08)\n    methods = ['weights', 'rho', 'psi', 'psi_deriv']\n    for meth in methods:\n        resm = [getattr(norm, meth)(xi) for xi in x]\n        arr = getattr(norm, meth)(x)\n        assert_allclose(resm, arr, rtol=1e-06, atol=1e-08)", "ground_truth": ["(15,)", "x.shape"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_116", "reponame": "statsmodels", "testpath": "statsmodels/robust/tests/test_norms.py", "testname": "test_norms.py", "funcname": "test_norm", "imports": ["import pytest", "import numpy as np", "from numpy.testing import assert_allclose", "from statsmodels.robust import norms", "from statsmodels.tools.numdiff import _approx_fprime_scalar", "from .results import results_norms as res_r"], "code": "@pytest.mark.parametrize('dtype', dtypes)\n@pytest.mark.parametrize('case', cases)\ndef test_norm(case, dtype):\n    (ncls, args, res) = case\n    if ((ncls in [norms.HuberT]) and (dtype == np.complex128)):\n        return\n    norm = ncls(*args)\n    x = np.array([(- 100), (- 50), (- 10), (- 2.0001), (- 1.0), 0, 0, 1, 1.999, 2.0001, 10, 50, 100, 10000000000.0, (- 10000000000.0)], dtype=dtype)\n    weights = norm.weights(x)\n    rho = norm.rho(x)\n    psi = norm.psi(x)\n    psi_deriv = norm.psi_deriv(x)\n    assert np.all((weights >= 0))\n    assert np.all((weights <= 1))\n    assert np.all((rho >= 0))\n    assert (psi.shape == x.shape)\n    assert (psi_deriv.shape == x.shape)\n    dtype2 = np.promote_types(dtype, 'float')\n    assert (weights.dtype == dtype2)\n    assert (rho.dtype == dtype2)\n    assert (psi.dtype == dtype2)\n    assert (psi_deriv.dtype == dtype2)\n    psid = _approx_fprime_scalar(x, norm.rho)\n    assert_allclose(psid, psi, rtol=1e-06, atol=1e-08)\n    psidd = _approx_fprime_scalar(x, norm.psi)\n    assert_allclose(psidd, psi_deriv, rtol=1e-06, atol=1e-08)\n    methods = ['weights', 'rho', 'psi', 'psi_deriv']\n    for meth in methods:\n        resm = [getattr(norm, meth)(xi) for xi in x]\n        arr = getattr(norm, meth)(x)\n        assert_allclose(resm, arr, rtol=1e-06, atol=1e-08)", "masked_code": "@pytest.mark.parametrize('dtype', dtypes)\n@pytest.mark.parametrize('case', cases)\ndef test_norm(case, dtype):\n    (ncls, args, res) = case\n    if ((ncls in [norms.HuberT]) and (dtype == np.complex128)):\n        return\n    norm = ncls(*args)\n    x = np.array([(- 100), (- 50), (- 10), (- 2.0001), (- 1.0), 0, 0, 1, 1.999, 2.0001, 10, 50, 100, 10000000000.0, (- 10000000000.0)], dtype=dtype)\n    weights = norm.weights(x)\n    rho = norm.rho(x)\n    psi = norm.psi(x)\n    psi_deriv = norm.psi_deriv(x)\n    assert np.all((weights >= 0))\n    assert np.all((weights <= 1))\n    assert np.all((rho >= 0))\n    assert (psi.shape == x.shape)\n    assert (psi_deriv.shape == '???')\n    dtype2 = np.promote_types(dtype, 'float')\n    assert (weights.dtype == dtype2)\n    assert (rho.dtype == dtype2)\n    assert (psi.dtype == dtype2)\n    assert (psi_deriv.dtype == dtype2)\n    psid = _approx_fprime_scalar(x, norm.rho)\n    assert_allclose(psid, psi, rtol=1e-06, atol=1e-08)\n    psidd = _approx_fprime_scalar(x, norm.psi)\n    assert_allclose(psidd, psi_deriv, rtol=1e-06, atol=1e-08)\n    methods = ['weights', 'rho', 'psi', 'psi_deriv']\n    for meth in methods:\n        resm = [getattr(norm, meth)(xi) for xi in x]\n        arr = getattr(norm, meth)(x)\n        assert_allclose(resm, arr, rtol=1e-06, atol=1e-08)", "ground_truth": ["(15,)", "x.shape"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_117", "reponame": "statsmodels", "testpath": "statsmodels/robust/tests/test_norms.py", "testname": "test_norms.py", "funcname": "test_norm", "imports": ["import pytest", "import numpy as np", "from numpy.testing import assert_allclose", "from statsmodels.robust import norms", "from statsmodels.tools.numdiff import _approx_fprime_scalar", "from .results import results_norms as res_r"], "code": "@pytest.mark.parametrize('dtype', dtypes)\n@pytest.mark.parametrize('case', cases)\ndef test_norm(case, dtype):\n    (ncls, args, res) = case\n    if ((ncls in [norms.HuberT]) and (dtype == np.complex128)):\n        return\n    norm = ncls(*args)\n    x = np.array([(- 100), (- 50), (- 10), (- 2.0001), (- 1.0), 0, 0, 1, 1.999, 2.0001, 10, 50, 100, 10000000000.0, (- 10000000000.0)], dtype=dtype)\n    weights = norm.weights(x)\n    rho = norm.rho(x)\n    psi = norm.psi(x)\n    psi_deriv = norm.psi_deriv(x)\n    assert np.all((weights >= 0))\n    assert np.all((weights <= 1))\n    assert np.all((rho >= 0))\n    assert (psi.shape == x.shape)\n    assert (psi_deriv.shape == x.shape)\n    dtype2 = np.promote_types(dtype, 'float')\n    assert (weights.dtype == dtype2)\n    assert (rho.dtype == dtype2)\n    assert (psi.dtype == dtype2)\n    assert (psi_deriv.dtype == dtype2)\n    psid = _approx_fprime_scalar(x, norm.rho)\n    assert_allclose(psid, psi, rtol=1e-06, atol=1e-08)\n    psidd = _approx_fprime_scalar(x, norm.psi)\n    assert_allclose(psidd, psi_deriv, rtol=1e-06, atol=1e-08)\n    methods = ['weights', 'rho', 'psi', 'psi_deriv']\n    for meth in methods:\n        resm = [getattr(norm, meth)(xi) for xi in x]\n        arr = getattr(norm, meth)(x)\n        assert_allclose(resm, arr, rtol=1e-06, atol=1e-08)", "masked_code": "@pytest.mark.parametrize('dtype', dtypes)\n@pytest.mark.parametrize('case', cases)\ndef test_norm(case, dtype):\n    (ncls, args, res) = case\n    if ((ncls in [norms.HuberT]) and (dtype == np.complex128)):\n        return\n    norm = ncls(*args)\n    x = np.array([(- 100), (- 50), (- 10), (- 2.0001), (- 1.0), 0, 0, 1, 1.999, 2.0001, 10, 50, 100, 10000000000.0, (- 10000000000.0)], dtype=dtype)\n    weights = norm.weights(x)\n    rho = norm.rho(x)\n    psi = norm.psi(x)\n    psi_deriv = norm.psi_deriv(x)\n    assert np.all((weights >= 0))\n    assert np.all((weights <= 1))\n    assert np.all((rho >= 0))\n    assert (psi.shape == x.shape)\n    assert (psi_deriv.shape == x.shape)\n    dtype2 = np.promote_types(dtype, 'float')\n    assert (weights.dtype == '???')\n    assert (rho.dtype == dtype2)\n    assert (psi.dtype == dtype2)\n    assert (psi_deriv.dtype == dtype2)\n    psid = _approx_fprime_scalar(x, norm.rho)\n    assert_allclose(psid, psi, rtol=1e-06, atol=1e-08)\n    psidd = _approx_fprime_scalar(x, norm.psi)\n    assert_allclose(psidd, psi_deriv, rtol=1e-06, atol=1e-08)\n    methods = ['weights', 'rho', 'psi', 'psi_deriv']\n    for meth in methods:\n        resm = [getattr(norm, meth)(xi) for xi in x]\n        arr = getattr(norm, meth)(x)\n        assert_allclose(resm, arr, rtol=1e-06, atol=1e-08)", "ground_truth": ["dtype('float64')", "dtype2"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_118", "reponame": "statsmodels", "testpath": "statsmodels/robust/tests/test_norms.py", "testname": "test_norms.py", "funcname": "test_norm", "imports": ["import pytest", "import numpy as np", "from numpy.testing import assert_allclose", "from statsmodels.robust import norms", "from statsmodels.tools.numdiff import _approx_fprime_scalar", "from .results import results_norms as res_r"], "code": "@pytest.mark.parametrize('dtype', dtypes)\n@pytest.mark.parametrize('case', cases)\ndef test_norm(case, dtype):\n    (ncls, args, res) = case\n    if ((ncls in [norms.HuberT]) and (dtype == np.complex128)):\n        return\n    norm = ncls(*args)\n    x = np.array([(- 100), (- 50), (- 10), (- 2.0001), (- 1.0), 0, 0, 1, 1.999, 2.0001, 10, 50, 100, 10000000000.0, (- 10000000000.0)], dtype=dtype)\n    weights = norm.weights(x)\n    rho = norm.rho(x)\n    psi = norm.psi(x)\n    psi_deriv = norm.psi_deriv(x)\n    assert np.all((weights >= 0))\n    assert np.all((weights <= 1))\n    assert np.all((rho >= 0))\n    assert (psi.shape == x.shape)\n    assert (psi_deriv.shape == x.shape)\n    dtype2 = np.promote_types(dtype, 'float')\n    assert (weights.dtype == dtype2)\n    assert (rho.dtype == dtype2)\n    assert (psi.dtype == dtype2)\n    assert (psi_deriv.dtype == dtype2)\n    psid = _approx_fprime_scalar(x, norm.rho)\n    assert_allclose(psid, psi, rtol=1e-06, atol=1e-08)\n    psidd = _approx_fprime_scalar(x, norm.psi)\n    assert_allclose(psidd, psi_deriv, rtol=1e-06, atol=1e-08)\n    methods = ['weights', 'rho', 'psi', 'psi_deriv']\n    for meth in methods:\n        resm = [getattr(norm, meth)(xi) for xi in x]\n        arr = getattr(norm, meth)(x)\n        assert_allclose(resm, arr, rtol=1e-06, atol=1e-08)", "masked_code": "@pytest.mark.parametrize('dtype', dtypes)\n@pytest.mark.parametrize('case', cases)\ndef test_norm(case, dtype):\n    (ncls, args, res) = case\n    if ((ncls in [norms.HuberT]) and (dtype == np.complex128)):\n        return\n    norm = ncls(*args)\n    x = np.array([(- 100), (- 50), (- 10), (- 2.0001), (- 1.0), 0, 0, 1, 1.999, 2.0001, 10, 50, 100, 10000000000.0, (- 10000000000.0)], dtype=dtype)\n    weights = norm.weights(x)\n    rho = norm.rho(x)\n    psi = norm.psi(x)\n    psi_deriv = norm.psi_deriv(x)\n    assert np.all((weights >= 0))\n    assert np.all((weights <= 1))\n    assert np.all((rho >= 0))\n    assert (psi.shape == x.shape)\n    assert (psi_deriv.shape == x.shape)\n    dtype2 = np.promote_types(dtype, 'float')\n    assert (weights.dtype == dtype2)\n    assert (rho.dtype == '???')\n    assert (psi.dtype == dtype2)\n    assert (psi_deriv.dtype == dtype2)\n    psid = _approx_fprime_scalar(x, norm.rho)\n    assert_allclose(psid, psi, rtol=1e-06, atol=1e-08)\n    psidd = _approx_fprime_scalar(x, norm.psi)\n    assert_allclose(psidd, psi_deriv, rtol=1e-06, atol=1e-08)\n    methods = ['weights', 'rho', 'psi', 'psi_deriv']\n    for meth in methods:\n        resm = [getattr(norm, meth)(xi) for xi in x]\n        arr = getattr(norm, meth)(x)\n        assert_allclose(resm, arr, rtol=1e-06, atol=1e-08)", "ground_truth": ["dtype('float64')", "dtype2"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_119", "reponame": "statsmodels", "testpath": "statsmodels/stats/tests/test_pairwise.py", "testname": "test_pairwise.py", "funcname": "test_table_names_custom_group_order", "imports": ["from io import BytesIO", "import warnings", "import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_, assert_allclose, assert_almost_equal, assert_equal, assert_raises", "from statsmodels.compat.python import asbytes", "from statsmodels.stats.libqsturng import qsturng", "from statsmodels.stats.multicomp import tukeyhsd, pairwise_tukeyhsd, MultiComparison"], "code": "def test_table_names_custom_group_order(self):\n    group_order = [b'z-group', b'-alpha', b'', b'LONGGGGGGGGGGROUP']\n    test_endog = np.array([100.0, (- 25.5), 0.0, 100000000.0, 0.001, 123456, 99999, (- 0.0005), 99999, 0.0])\n    test_groups = np.array([b'LONGGGGGGGGGGROUP', b'LONGGGGGGGGGGROUP', b'-alpha', b'z-group', b'-alpha', b'z-group', b'', b'', b'z-group', b''])\n    mc = MultiComparison(test_endog, test_groups, group_order=group_order)\n    res = mc.tukeyhsd(alpha=0.05)\n    t = res._results_table\n    expected_order = [(b'z-group', b'-alpha'), (b'z-group', b''), (b'z-group', b'LONGGGGGGGGGGROUP'), (b'-alpha', b''), (b'-alpha', b'LONGGGGGGGGGGROUP'), (b'', b'LONGGGGGGGGGGROUP')]\n    for i in range(1, (len(expected_order) + 1)):\n        first_group = t[i][0].data\n        second_group = t[i][1].data\n        assert_(((first_group, second_group) == expected_order[(i - 1)]))\n    frame = res.summary_frame()\n    assert_equal(frame['p-adj'], res.pvalues)\n    assert_equal(frame['meandiff'], res.meandiffs)\n    group_t = [b'-alpha', b'', b'LONGGGGGGGGGGROUP', b'', b'LONGGGGGGGGGGROUP', b'LONGGGGGGGGGGROUP']\n    group_c = [b'z-group', b'z-group', b'z-group', b'-alpha', b'-alpha', b'']\n    assert (frame['group_t'].to_list() == group_t)\n    assert (frame['group_c'].to_list() == group_c)", "masked_code": "def test_table_names_custom_group_order(self):\n    group_order = [b'z-group', b'-alpha', b'', b'LONGGGGGGGGGGROUP']\n    test_endog = np.array([100.0, (- 25.5), 0.0, 100000000.0, 0.001, 123456, 99999, (- 0.0005), 99999, 0.0])\n    test_groups = np.array([b'LONGGGGGGGGGGROUP', b'LONGGGGGGGGGGROUP', b'-alpha', b'z-group', b'-alpha', b'z-group', b'', b'', b'z-group', b''])\n    mc = MultiComparison(test_endog, test_groups, group_order=group_order)\n    res = mc.tukeyhsd(alpha=0.05)\n    t = res._results_table\n    expected_order = [(b'z-group', b'-alpha'), (b'z-group', b''), (b'z-group', b'LONGGGGGGGGGGROUP'), (b'-alpha', b''), (b'-alpha', b'LONGGGGGGGGGGROUP'), (b'', b'LONGGGGGGGGGGROUP')]\n    for i in range(1, (len(expected_order) + 1)):\n        first_group = t[i][0].data\n        second_group = t[i][1].data\n        assert_(((first_group, second_group) == expected_order[(i - 1)]))\n    frame = res.summary_frame()\n    assert_equal(frame['p-adj'], res.pvalues)\n    assert_equal(frame['meandiff'], res.meandiffs)\n    group_t = [b'-alpha', b'', b'LONGGGGGGGGGGROUP', b'', b'LONGGGGGGGGGGROUP', b'LONGGGGGGGGGGROUP']\n    group_c = [b'z-group', b'z-group', b'z-group', b'-alpha', b'-alpha', b'']\n    assert (frame['group_t'].to_list() == '???')\n    assert (frame['group_c'].to_list() == group_c)", "ground_truth": ["group_t"], "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestTuckeyHSD2"}
{"task_id": "statsmodels_120", "reponame": "statsmodels", "testpath": "statsmodels/stats/tests/test_pairwise.py", "testname": "test_pairwise.py", "funcname": "test_table_names_custom_group_order", "imports": ["from io import BytesIO", "import warnings", "import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_, assert_allclose, assert_almost_equal, assert_equal, assert_raises", "from statsmodels.compat.python import asbytes", "from statsmodels.stats.libqsturng import qsturng", "from statsmodels.stats.multicomp import tukeyhsd, pairwise_tukeyhsd, MultiComparison"], "code": "def test_table_names_custom_group_order(self):\n    group_order = [b'z-group', b'-alpha', b'', b'LONGGGGGGGGGGROUP']\n    test_endog = np.array([100.0, (- 25.5), 0.0, 100000000.0, 0.001, 123456, 99999, (- 0.0005), 99999, 0.0])\n    test_groups = np.array([b'LONGGGGGGGGGGROUP', b'LONGGGGGGGGGGROUP', b'-alpha', b'z-group', b'-alpha', b'z-group', b'', b'', b'z-group', b''])\n    mc = MultiComparison(test_endog, test_groups, group_order=group_order)\n    res = mc.tukeyhsd(alpha=0.05)\n    t = res._results_table\n    expected_order = [(b'z-group', b'-alpha'), (b'z-group', b''), (b'z-group', b'LONGGGGGGGGGGROUP'), (b'-alpha', b''), (b'-alpha', b'LONGGGGGGGGGGROUP'), (b'', b'LONGGGGGGGGGGROUP')]\n    for i in range(1, (len(expected_order) + 1)):\n        first_group = t[i][0].data\n        second_group = t[i][1].data\n        assert_(((first_group, second_group) == expected_order[(i - 1)]))\n    frame = res.summary_frame()\n    assert_equal(frame['p-adj'], res.pvalues)\n    assert_equal(frame['meandiff'], res.meandiffs)\n    group_t = [b'-alpha', b'', b'LONGGGGGGGGGGROUP', b'', b'LONGGGGGGGGGGROUP', b'LONGGGGGGGGGGROUP']\n    group_c = [b'z-group', b'z-group', b'z-group', b'-alpha', b'-alpha', b'']\n    assert (frame['group_t'].to_list() == group_t)\n    assert (frame['group_c'].to_list() == group_c)", "masked_code": "def test_table_names_custom_group_order(self):\n    group_order = [b'z-group', b'-alpha', b'', b'LONGGGGGGGGGGROUP']\n    test_endog = np.array([100.0, (- 25.5), 0.0, 100000000.0, 0.001, 123456, 99999, (- 0.0005), 99999, 0.0])\n    test_groups = np.array([b'LONGGGGGGGGGGROUP', b'LONGGGGGGGGGGROUP', b'-alpha', b'z-group', b'-alpha', b'z-group', b'', b'', b'z-group', b''])\n    mc = MultiComparison(test_endog, test_groups, group_order=group_order)\n    res = mc.tukeyhsd(alpha=0.05)\n    t = res._results_table\n    expected_order = [(b'z-group', b'-alpha'), (b'z-group', b''), (b'z-group', b'LONGGGGGGGGGGROUP'), (b'-alpha', b''), (b'-alpha', b'LONGGGGGGGGGGROUP'), (b'', b'LONGGGGGGGGGGROUP')]\n    for i in range(1, (len(expected_order) + 1)):\n        first_group = t[i][0].data\n        second_group = t[i][1].data\n        assert_(((first_group, second_group) == expected_order[(i - 1)]))\n    frame = res.summary_frame()\n    assert_equal(frame['p-adj'], res.pvalues)\n    assert_equal(frame['meandiff'], res.meandiffs)\n    group_t = [b'-alpha', b'', b'LONGGGGGGGGGGROUP', b'', b'LONGGGGGGGGGGROUP', b'LONGGGGGGGGGGROUP']\n    group_c = [b'z-group', b'z-group', b'z-group', b'-alpha', b'-alpha', b'']\n    assert (frame['group_t'].to_list() == group_t)\n    assert (frame['group_c'].to_list() == '???')", "ground_truth": ["group_c"], "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestTuckeyHSD2"}
{"task_id": "statsmodels_100", "reponame": "statsmodels", "testpath": "statsmodels/multivariate/tests/test_pca.py", "testname": "test_pca.py", "funcname": "test_too_many_missing", "imports": ["from statsmodels.compat.platform import PLATFORM_WIN32", "import warnings", "import numpy as np", "from numpy.testing import assert_allclose, assert_equal, assert_raises", "import pandas as pd", "import pytest", "from statsmodels.multivariate.pca import PCA, pca", "from statsmodels.multivariate.tests.results.datamlw import data, princomp1, princomp2", "from statsmodels.tools.sm_exceptions import EstimationWarning"], "code": "def test_too_many_missing(reset_randomstate):\n    data = (np.random.standard_normal((400, 100)) - 10.5)\n    data[(50, :10)] = np.nan\n    data[(:, 0)] = np.nan\n    data[((- 1), :)] = 0.0\n    data[(100:110, 10:25)] = np.nan\n    p = PCA(data, missing='drop-min')\n    assert (max(p.factors.shape) == 400)", "masked_code": "def test_too_many_missing(reset_randomstate):\n    data = (np.random.standard_normal((400, 100)) - 10.5)\n    data[(50, :10)] = np.nan\n    data[(:, 0)] = np.nan\n    data[((- 1), :)] = 0.0\n    data[(100:110, 10:25)] = np.nan\n    p = PCA(data, missing='drop-min')\n    assert (max(p.factors.shape) == '???')", "ground_truth": ["400"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_92", "reponame": "statsmodels", "testpath": "statsmodels/miscmodels/tests/test_poisson.py", "testname": "test_poisson.py", "funcname": "test_df", "imports": ["import pytest", "import numpy as np", "from numpy.testing import assert_almost_equal", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.miscmodels.count import PoissonGMLE, PoissonOffsetGMLE, PoissonZiGMLE", "from statsmodels.discrete.discrete_model import Poisson", "from statsmodels.tools.sm_exceptions import ValueWarning"], "code": "def test_df():\n\n    class DummyRes():\n\n        def __init__(self):\n            self.model = type('DummyModel', (), {})()\n            self.model.exog = np.full((3, 2), (- 7.5))\n    res = DummyRes()\n    res.df_resid = ((3 - 2) - 1)\n    res.df_model = (2 - 1)\n    res.params = np.zeros((2 + 1))\n    k_extra = 1\n    (nobs, k_vars) = res.model.exog.shape\n    assert (res.df_resid == ((nobs - k_vars) - k_extra))\n    assert (res.df_model == (k_vars - 1))\n    assert (len(res.params) == (k_vars + k_extra))", "masked_code": "def test_df():\n\n    class DummyRes():\n\n        def __init__(self):\n            self.model = type('DummyModel', (), {})()\n            self.model.exog = np.full((3, 2), (- 7.5))\n    res = DummyRes()\n    res.df_resid = ((3 - 2) - 1)\n    res.df_model = (2 - 1)\n    res.params = np.zeros((2 + 1))\n    k_extra = 1\n    (nobs, k_vars) = res.model.exog.shape\n    assert (res.df_resid == '???')\n    assert (res.df_model == (k_vars - 1))\n    assert (len(res.params) == (k_vars + k_extra))", "ground_truth": ["((nobs - k_vars) - k_extra)"], "quality_analysis": {"complexity_score": 9, "left_complexity": 2, "right_complexity": 7, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_93", "reponame": "statsmodels", "testpath": "statsmodels/miscmodels/tests/test_poisson.py", "testname": "test_poisson.py", "funcname": "test_df", "imports": ["import pytest", "import numpy as np", "from numpy.testing import assert_almost_equal", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.miscmodels.count import PoissonGMLE, PoissonOffsetGMLE, PoissonZiGMLE", "from statsmodels.discrete.discrete_model import Poisson", "from statsmodels.tools.sm_exceptions import ValueWarning"], "code": "def test_df():\n\n    class DummyRes():\n\n        def __init__(self):\n            self.model = type('DummyModel', (), {})()\n            self.model.exog = np.full((3, 2), (- 7.5))\n    res = DummyRes()\n    res.df_resid = ((3 - 2) - 1)\n    res.df_model = (2 - 1)\n    res.params = np.zeros((2 + 1))\n    k_extra = 1\n    (nobs, k_vars) = res.model.exog.shape\n    assert (res.df_resid == ((nobs - k_vars) - k_extra))\n    assert (res.df_model == (k_vars - 1))\n    assert (len(res.params) == (k_vars + k_extra))", "masked_code": "def test_df():\n\n    class DummyRes():\n\n        def __init__(self):\n            self.model = type('DummyModel', (), {})()\n            self.model.exog = np.full((3, 2), (- 7.5))\n    res = DummyRes()\n    res.df_resid = ((3 - 2) - 1)\n    res.df_model = (2 - 1)\n    res.params = np.zeros((2 + 1))\n    k_extra = 1\n    (nobs, k_vars) = res.model.exog.shape\n    assert (res.df_resid == ((nobs - k_vars) - k_extra))\n    assert (res.df_model == '???')\n    assert (len(res.params) == (k_vars + k_extra))", "ground_truth": ["(k_vars - 1)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_94", "reponame": "statsmodels", "testpath": "statsmodels/miscmodels/tests/test_poisson.py", "testname": "test_poisson.py", "funcname": "test_df", "imports": ["import pytest", "import numpy as np", "from numpy.testing import assert_almost_equal", "from scipy import stats", "import statsmodels.api as sm", "from statsmodels.miscmodels.count import PoissonGMLE, PoissonOffsetGMLE, PoissonZiGMLE", "from statsmodels.discrete.discrete_model import Poisson", "from statsmodels.tools.sm_exceptions import ValueWarning"], "code": "def test_df():\n\n    class DummyRes():\n\n        def __init__(self):\n            self.model = type('DummyModel', (), {})()\n            self.model.exog = np.full((3, 2), (- 7.5))\n    res = DummyRes()\n    res.df_resid = ((3 - 2) - 1)\n    res.df_model = (2 - 1)\n    res.params = np.zeros((2 + 1))\n    k_extra = 1\n    (nobs, k_vars) = res.model.exog.shape\n    assert (res.df_resid == ((nobs - k_vars) - k_extra))\n    assert (res.df_model == (k_vars - 1))\n    assert (len(res.params) == (k_vars + k_extra))", "masked_code": "def test_df():\n\n    class DummyRes():\n\n        def __init__(self):\n            self.model = type('DummyModel', (), {})()\n            self.model.exog = np.full((3, 2), (- 7.5))\n    res = DummyRes()\n    res.df_resid = ((3 - 2) - 1)\n    res.df_model = (2 - 1)\n    res.params = np.zeros((2 + 1))\n    k_extra = 1\n    (nobs, k_vars) = res.model.exog.shape\n    assert (res.df_resid == ((nobs - k_vars) - k_extra))\n    assert (res.df_model == (k_vars - 1))\n    assert (len(res.params) == '???')", "ground_truth": ["(k_vars + k_extra)"], "quality_analysis": {"complexity_score": 9, "left_complexity": 5, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_103", "reponame": "statsmodels", "testpath": "statsmodels/regression/tests/test_quantile_regression.py", "testname": "test_quantile_regression.py", "funcname": "test_collinear_matrix", "imports": ["import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal, assert_equal", "import scipy.stats", "import statsmodels.api as sm", "from statsmodels.formula._manager import FormulaManager", "from statsmodels.regression.quantile_regression import QuantReg", "from .results.results_quantile_regression import Rquantreg, biweight_bofinger, biweight_chamberlain, biweight_hsheather, cosine_bofinger, cosine_chamberlain, cosine_hsheather, epan2_bofinger, epan2_chamberlain, epan2_hsheather, epanechnikov_hsheather_q75, gaussian_bofinger, gaussian_chamberlain, gaussian_hsheather, parzen_bofinger, parzen_chamberlain, parzen_hsheather"], "code": "def test_collinear_matrix():\n    X = np.array([[10.0, (- 5.0), 2.5], [10.0, (- 5.0), 4.0], [10.0, (- 5.0), 9.5], [10.0, (- 5.0), (- 7.25)]], dtype=np.float64)\n    y = np.array([100, (- 50), 400, (- 100)], dtype=np.float64)\n    res_collinear = QuantReg(y, X).fit(0.5)\n    assert (len(res_collinear.params) == X.shape[1])", "masked_code": "def test_collinear_matrix():\n    X = np.array([[10.0, (- 5.0), 2.5], [10.0, (- 5.0), 4.0], [10.0, (- 5.0), 9.5], [10.0, (- 5.0), (- 7.25)]], dtype=np.float64)\n    y = np.array([100, (- 50), 400, (- 100)], dtype=np.float64)\n    res_collinear = QuantReg(y, X).fit(0.5)\n    assert (len(res_collinear.params) == '???')", "ground_truth": ["X.shape[1]"], "quality_analysis": {"complexity_score": 11, "left_complexity": 5, "right_complexity": 6, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_104", "reponame": "statsmodels", "testpath": "statsmodels/regression/tests/test_quantile_regression.py", "testname": "test_quantile_regression.py", "funcname": "test_nontrivial_singular_matrix", "imports": ["import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal, assert_equal", "import scipy.stats", "import statsmodels.api as sm", "from statsmodels.formula._manager import FormulaManager", "from statsmodels.regression.quantile_regression import QuantReg", "from .results.results_quantile_regression import Rquantreg, biweight_bofinger, biweight_chamberlain, biweight_hsheather, cosine_bofinger, cosine_chamberlain, cosine_hsheather, epan2_bofinger, epan2_chamberlain, epan2_hsheather, epanechnikov_hsheather_q75, gaussian_bofinger, gaussian_chamberlain, gaussian_hsheather, parzen_bofinger, parzen_chamberlain, parzen_hsheather"], "code": "def test_nontrivial_singular_matrix():\n    np.random.seed(123)\n    x_one = np.random.random(2000)\n    x_two = np.random.randint((- 100), 100, size=2000)\n    x_three = np.zeros(2000)\n    intercept = np.ones(2000)\n    x_dup = x_one.copy()\n    y = np.random.normal(loc=(10 ** 5), scale=1000, size=2000)\n    X = np.column_stack((intercept, x_one, x_two, x_three, x_dup))\n    assert (np.linalg.matrix_rank(X) < X.shape[1])\n    res_singular = QuantReg(y, X).fit(0.5)\n    assert (len(res_singular.params) == X.shape[1])\n    assert (np.linalg.matrix_rank(res_singular.cov_params()) == 3)\n    res_ns = QuantReg(y, X[(:, :(- 1))]).fit(0.5)\n    assert_allclose(res_singular.fittedvalues, res_ns.fittedvalues, rtol=0.01)", "masked_code": "def test_nontrivial_singular_matrix():\n    np.random.seed(123)\n    x_one = np.random.random(2000)\n    x_two = np.random.randint((- 100), 100, size=2000)\n    x_three = np.zeros(2000)\n    intercept = np.ones(2000)\n    x_dup = x_one.copy()\n    y = np.random.normal(loc=(10 ** 5), scale=1000, size=2000)\n    X = np.column_stack((intercept, x_one, x_two, x_three, x_dup))\n    assert (np.linalg.matrix_rank(X) < X.shape[1])\n    res_singular = QuantReg(y, X).fit(0.5)\n    assert (len(res_singular.params) == '???')\n    assert (np.linalg.matrix_rank(res_singular.cov_params()) == 3)\n    res_ns = QuantReg(y, X[(:, :(- 1))]).fit(0.5)\n    assert_allclose(res_singular.fittedvalues, res_ns.fittedvalues, rtol=0.01)", "ground_truth": ["X.shape[1]"], "quality_analysis": {"complexity_score": 11, "left_complexity": 5, "right_complexity": 6, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_105", "reponame": "statsmodels", "testpath": "statsmodels/regression/tests/test_quantile_regression.py", "testname": "test_quantile_regression.py", "funcname": "test_nontrivial_singular_matrix", "imports": ["import numpy as np", "from numpy.testing import assert_allclose, assert_almost_equal, assert_equal", "import scipy.stats", "import statsmodels.api as sm", "from statsmodels.formula._manager import FormulaManager", "from statsmodels.regression.quantile_regression import QuantReg", "from .results.results_quantile_regression import Rquantreg, biweight_bofinger, biweight_chamberlain, biweight_hsheather, cosine_bofinger, cosine_chamberlain, cosine_hsheather, epan2_bofinger, epan2_chamberlain, epan2_hsheather, epanechnikov_hsheather_q75, gaussian_bofinger, gaussian_chamberlain, gaussian_hsheather, parzen_bofinger, parzen_chamberlain, parzen_hsheather"], "code": "def test_nontrivial_singular_matrix():\n    np.random.seed(123)\n    x_one = np.random.random(2000)\n    x_two = np.random.randint((- 100), 100, size=2000)\n    x_three = np.zeros(2000)\n    intercept = np.ones(2000)\n    x_dup = x_one.copy()\n    y = np.random.normal(loc=(10 ** 5), scale=1000, size=2000)\n    X = np.column_stack((intercept, x_one, x_two, x_three, x_dup))\n    assert (np.linalg.matrix_rank(X) < X.shape[1])\n    res_singular = QuantReg(y, X).fit(0.5)\n    assert (len(res_singular.params) == X.shape[1])\n    assert (np.linalg.matrix_rank(res_singular.cov_params()) == 3)\n    res_ns = QuantReg(y, X[(:, :(- 1))]).fit(0.5)\n    assert_allclose(res_singular.fittedvalues, res_ns.fittedvalues, rtol=0.01)", "masked_code": "def test_nontrivial_singular_matrix():\n    np.random.seed(123)\n    x_one = np.random.random(2000)\n    x_two = np.random.randint((- 100), 100, size=2000)\n    x_three = np.zeros(2000)\n    intercept = np.ones(2000)\n    x_dup = x_one.copy()\n    y = np.random.normal(loc=(10 ** 5), scale=1000, size=2000)\n    X = np.column_stack((intercept, x_one, x_two, x_three, x_dup))\n    assert (np.linalg.matrix_rank(X) < X.shape[1])\n    res_singular = QuantReg(y, X).fit(0.5)\n    assert (len(res_singular.params) == X.shape[1])\n    assert (np.linalg.matrix_rank(res_singular.cov_params()) == '???')\n    res_ns = QuantReg(y, X[(:, :(- 1))]).fit(0.5)\n    assert_allclose(res_singular.fittedvalues, res_ns.fittedvalues, rtol=0.01)", "ground_truth": ["3"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_109", "reponame": "statsmodels", "testpath": "statsmodels/regression/tests/test_rolling.py", "testname": "test_rolling.py", "funcname": "test_against_wls_inference", "imports": ["from io import BytesIO", "from itertools import product", "import warnings", "import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_allclose, assert_array_equal", "from statsmodels import tools", "from statsmodels.regression.linear_model import WLS", "from statsmodels.regression.rolling import RollingWLS, RollingOLS"], "code": "@pytest.mark.parametrize('cov_type', ['nonrobust', 'HC0'])\n@pytest.mark.parametrize('use_t', [None, True, False])\ndef test_against_wls_inference(data, use_t, cov_type):\n    (y, x, w) = data\n    mod = RollingWLS(y, x, window=10, weights=w)\n    res = mod.fit(use_t=use_t, cov_type=cov_type)\n    ci = res.conf_int()\n    res.cov_params()\n    for i in range(10, y.shape[0]):\n        _y = get_sub(y, i, 10)\n        _x = get_sub(x, i, 10)\n        if ((np.size(_x) == 0) or (np.isnan(_x).all() if isinstance(_x, np.ndarray) else pd.isna(_x).all())):\n            continue\n        _w = (get_sub(w, i, 10) if (w is not None) else None)\n        if ((np.size(_y) == 0) or (np.isnan(_y).all() if isinstance(_y, np.ndarray) else pd.isna(_y).all())):\n            continue\n        try:\n            wls = WLS(_y, _x, weights=_w, missing='drop').fit(use_t=use_t, cov_type=cov_type)\n        except ValueError:\n            continue\n        assert_allclose(get_single(res.tvalues, (i - 1)), wls.tvalues)\n        assert_allclose(get_single(res.bse, (i - 1)), wls.bse)\n        assert_allclose(get_single(res.pvalues, (i - 1)), wls.pvalues, atol=1e-08)\n        assert_allclose(get_single(res.fvalue, (i - 1)), wls.fvalue)\n        with np.errstate(invalid='ignore'):\n            assert_allclose(get_single(res.f_pvalue, (i - 1)), wls.f_pvalue, atol=1e-08)\n        assert (res.cov_type == wls.cov_type)\n        assert (res.use_t == wls.use_t)\n        wls_ci = wls.conf_int()\n        if isinstance(ci, pd.DataFrame):\n            ci_val = ci.iloc[(i - 1)]\n            ci_val = np.asarray(ci_val).reshape(((- 1), 2))\n        else:\n            ci_val = ci[(i - 1)].T\n        assert_allclose(ci_val, wls_ci)", "masked_code": "@pytest.mark.parametrize('cov_type', ['nonrobust', 'HC0'])\n@pytest.mark.parametrize('use_t', [None, True, False])\ndef test_against_wls_inference(data, use_t, cov_type):\n    (y, x, w) = data\n    mod = RollingWLS(y, x, window=10, weights=w)\n    res = mod.fit(use_t=use_t, cov_type=cov_type)\n    ci = res.conf_int()\n    res.cov_params()\n    for i in range(10, y.shape[0]):\n        _y = get_sub(y, i, 10)\n        _x = get_sub(x, i, 10)\n        if ((np.size(_x) == 0) or (np.isnan(_x).all() if isinstance(_x, np.ndarray) else pd.isna(_x).all())):\n            continue\n        _w = (get_sub(w, i, 10) if (w is not None) else None)\n        if ((np.size(_y) == 0) or (np.isnan(_y).all() if isinstance(_y, np.ndarray) else pd.isna(_y).all())):\n            continue\n        try:\n            wls = WLS(_y, _x, weights=_w, missing='drop').fit(use_t=use_t, cov_type=cov_type)\n        except ValueError:\n            continue\n        assert_allclose(get_single(res.tvalues, (i - 1)), wls.tvalues)\n        assert_allclose(get_single(res.bse, (i - 1)), wls.bse)\n        assert_allclose(get_single(res.pvalues, (i - 1)), wls.pvalues, atol=1e-08)\n        assert_allclose(get_single(res.fvalue, (i - 1)), wls.fvalue)\n        with np.errstate(invalid='ignore'):\n            assert_allclose(get_single(res.f_pvalue, (i - 1)), wls.f_pvalue, atol=1e-08)\n        assert (res.cov_type == '???')\n        assert (res.use_t == wls.use_t)\n        wls_ci = wls.conf_int()\n        if isinstance(ci, pd.DataFrame):\n            ci_val = ci.iloc[(i - 1)]\n            ci_val = np.asarray(ci_val).reshape(((- 1), 2))\n        else:\n            ci_val = ci[(i - 1)].T\n        assert_allclose(ci_val, wls_ci)", "ground_truth": ["wls.cov_type"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_110", "reponame": "statsmodels", "testpath": "statsmodels/regression/tests/test_rolling.py", "testname": "test_rolling.py", "funcname": "test_against_wls_inference", "imports": ["from io import BytesIO", "from itertools import product", "import warnings", "import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_allclose, assert_array_equal", "from statsmodels import tools", "from statsmodels.regression.linear_model import WLS", "from statsmodels.regression.rolling import RollingWLS, RollingOLS"], "code": "@pytest.mark.parametrize('cov_type', ['nonrobust', 'HC0'])\n@pytest.mark.parametrize('use_t', [None, True, False])\ndef test_against_wls_inference(data, use_t, cov_type):\n    (y, x, w) = data\n    mod = RollingWLS(y, x, window=10, weights=w)\n    res = mod.fit(use_t=use_t, cov_type=cov_type)\n    ci = res.conf_int()\n    res.cov_params()\n    for i in range(10, y.shape[0]):\n        _y = get_sub(y, i, 10)\n        _x = get_sub(x, i, 10)\n        if ((np.size(_x) == 0) or (np.isnan(_x).all() if isinstance(_x, np.ndarray) else pd.isna(_x).all())):\n            continue\n        _w = (get_sub(w, i, 10) if (w is not None) else None)\n        if ((np.size(_y) == 0) or (np.isnan(_y).all() if isinstance(_y, np.ndarray) else pd.isna(_y).all())):\n            continue\n        try:\n            wls = WLS(_y, _x, weights=_w, missing='drop').fit(use_t=use_t, cov_type=cov_type)\n        except ValueError:\n            continue\n        assert_allclose(get_single(res.tvalues, (i - 1)), wls.tvalues)\n        assert_allclose(get_single(res.bse, (i - 1)), wls.bse)\n        assert_allclose(get_single(res.pvalues, (i - 1)), wls.pvalues, atol=1e-08)\n        assert_allclose(get_single(res.fvalue, (i - 1)), wls.fvalue)\n        with np.errstate(invalid='ignore'):\n            assert_allclose(get_single(res.f_pvalue, (i - 1)), wls.f_pvalue, atol=1e-08)\n        assert (res.cov_type == wls.cov_type)\n        assert (res.use_t == wls.use_t)\n        wls_ci = wls.conf_int()\n        if isinstance(ci, pd.DataFrame):\n            ci_val = ci.iloc[(i - 1)]\n            ci_val = np.asarray(ci_val).reshape(((- 1), 2))\n        else:\n            ci_val = ci[(i - 1)].T\n        assert_allclose(ci_val, wls_ci)", "masked_code": "@pytest.mark.parametrize('cov_type', ['nonrobust', 'HC0'])\n@pytest.mark.parametrize('use_t', [None, True, False])\ndef test_against_wls_inference(data, use_t, cov_type):\n    (y, x, w) = data\n    mod = RollingWLS(y, x, window=10, weights=w)\n    res = mod.fit(use_t=use_t, cov_type=cov_type)\n    ci = res.conf_int()\n    res.cov_params()\n    for i in range(10, y.shape[0]):\n        _y = get_sub(y, i, 10)\n        _x = get_sub(x, i, 10)\n        if ((np.size(_x) == 0) or (np.isnan(_x).all() if isinstance(_x, np.ndarray) else pd.isna(_x).all())):\n            continue\n        _w = (get_sub(w, i, 10) if (w is not None) else None)\n        if ((np.size(_y) == 0) or (np.isnan(_y).all() if isinstance(_y, np.ndarray) else pd.isna(_y).all())):\n            continue\n        try:\n            wls = WLS(_y, _x, weights=_w, missing='drop').fit(use_t=use_t, cov_type=cov_type)\n        except ValueError:\n            continue\n        assert_allclose(get_single(res.tvalues, (i - 1)), wls.tvalues)\n        assert_allclose(get_single(res.bse, (i - 1)), wls.bse)\n        assert_allclose(get_single(res.pvalues, (i - 1)), wls.pvalues, atol=1e-08)\n        assert_allclose(get_single(res.fvalue, (i - 1)), wls.fvalue)\n        with np.errstate(invalid='ignore'):\n            assert_allclose(get_single(res.f_pvalue, (i - 1)), wls.f_pvalue, atol=1e-08)\n        assert (res.cov_type == wls.cov_type)\n        assert (res.use_t == '???')\n        wls_ci = wls.conf_int()\n        if isinstance(ci, pd.DataFrame):\n            ci_val = ci.iloc[(i - 1)]\n            ci_val = np.asarray(ci_val).reshape(((- 1), 2))\n        else:\n            ci_val = ci[(i - 1)].T\n        assert_allclose(ci_val, wls_ci)", "ground_truth": ["wls.use_t"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_78", "reponame": "statsmodels", "testpath": "statsmodels/imputation/tests/test_ros.py", "testname": "test_ros.py", "funcname": "test_no_NDs", "imports": ["from statsmodels.compat.pandas import assert_series_equal, assert_frame_equal", "from io import StringIO", "from textwrap import dedent", "import numpy as np", "import numpy.testing as npt", "import numpy", "from numpy.testing import assert_equal", "import pandas", "import pytest", "from statsmodels.imputation import ros"], "code": "def test_no_NDs(self):\n    _df = pandas.DataFrame({'conc': [0, (- 7.5), 1024.55, 1e-12, 3, (- 999999), 0.0, 8], 'qual': [False, False, False, False, False, False, False, False]})\n    result = ros.cohn_numbers(_df, observations='conc', censorship='qual')\n    assert (result.shape == (0, 6))\n    _df2 = pandas.DataFrame({'conc': [], 'qual': []})\n    result2 = ros.cohn_numbers(_df2, observations='conc', censorship='qual')\n    assert (result2.shape == (0, 6))\n    _df3 = pandas.DataFrame({'conc': np.arange(100000), 'qual': ([False] * 100000)})\n    result3 = ros.cohn_numbers(_df3, observations='conc', censorship='qual')\n    assert (result3.shape == (0, 6))", "masked_code": "def test_no_NDs(self):\n    _df = pandas.DataFrame({'conc': [0, (- 7.5), 1024.55, 1e-12, 3, (- 999999), 0.0, 8], 'qual': [False, False, False, False, False, False, False, False]})\n    result = ros.cohn_numbers(_df, observations='conc', censorship='qual')\n    assert (result.shape == '???')\n    _df2 = pandas.DataFrame({'conc': [], 'qual': []})\n    result2 = ros.cohn_numbers(_df2, observations='conc', censorship='qual')\n    assert (result2.shape == (0, 6))\n    _df3 = pandas.DataFrame({'conc': np.arange(100000), 'qual': ([False] * 100000)})\n    result3 = ros.cohn_numbers(_df3, observations='conc', censorship='qual')\n    assert (result3.shape == (0, 6))", "ground_truth": ["(0, 6)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "Test_cohn_numbers"}
{"task_id": "statsmodels_221", "reponame": "statsmodels", "testpath": "statsmodels/tsa/stl/tests/test_stl.py", "testname": "test_stl.py", "funcname": "test_default_trend", "imports": ["from statsmodels.compat.pandas import MONTH_END", "import os", "import pickle", "import numpy as np", "from numpy.testing import assert_allclose", "import pandas as pd", "import pytest", "from statsmodels.datasets import co2", "from statsmodels.tsa.seasonal import STL, DecomposeResult"], "code": "def test_default_trend(default_kwargs):\n    (class_kwargs, _, _) = _to_class_kwargs(default_kwargs)\n    class_kwargs['period'] = 1000\n    class_kwargs['seasonal'] = 5\n    class_kwargs['trend'] = None\n    class_kwargs['low_pass'] = 1001\n    mod = STL(**class_kwargs)\n    period = class_kwargs['period']\n    seasonal = class_kwargs['seasonal']\n    expected = int(np.ceil(((1.5 * period) / (1 - (1.5 / seasonal)))))\n    expected += (1 if ((expected % 2) == 0) else 0)\n    assert (mod.config['trend'] == expected)\n    class_kwargs['period'] = 2\n    class_kwargs['seasonal'] = 101\n    class_kwargs['low_pass'] = 3\n    mod = STL(**class_kwargs)\n    period = class_kwargs['period']\n    seasonal = class_kwargs['seasonal']\n    expected = int(np.ceil(((1.5 * period) / (1 - (1.5 / seasonal)))))\n    expected += (1 if ((expected % 2) == 0) else 0)\n    assert (mod.config['trend'] == expected)", "masked_code": "def test_default_trend(default_kwargs):\n    (class_kwargs, _, _) = _to_class_kwargs(default_kwargs)\n    class_kwargs['period'] = 1000\n    class_kwargs['seasonal'] = 5\n    class_kwargs['trend'] = None\n    class_kwargs['low_pass'] = 1001\n    mod = STL(**class_kwargs)\n    period = class_kwargs['period']\n    seasonal = class_kwargs['seasonal']\n    expected = int(np.ceil(((1.5 * period) / (1 - (1.5 / seasonal)))))\n    expected += (1 if ((expected % 2) == 0) else 0)\n    assert (mod.config['trend'] == '???')\n    class_kwargs['period'] = 2\n    class_kwargs['seasonal'] = 101\n    class_kwargs['low_pass'] = 3\n    mod = STL(**class_kwargs)\n    period = class_kwargs['period']\n    seasonal = class_kwargs['seasonal']\n    expected = int(np.ceil(((1.5 * period) / (1 - (1.5 / seasonal)))))\n    expected += (1 if ((expected % 2) == 0) else 0)\n    assert (mod.config['trend'] == expected)", "ground_truth": ["expected"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_222", "reponame": "statsmodels", "testpath": "statsmodels/tsa/stl/tests/test_stl.py", "testname": "test_stl.py", "funcname": "test_default_trend", "imports": ["from statsmodels.compat.pandas import MONTH_END", "import os", "import pickle", "import numpy as np", "from numpy.testing import assert_allclose", "import pandas as pd", "import pytest", "from statsmodels.datasets import co2", "from statsmodels.tsa.seasonal import STL, DecomposeResult"], "code": "def test_default_trend(default_kwargs):\n    (class_kwargs, _, _) = _to_class_kwargs(default_kwargs)\n    class_kwargs['period'] = 1000\n    class_kwargs['seasonal'] = 5\n    class_kwargs['trend'] = None\n    class_kwargs['low_pass'] = 1001\n    mod = STL(**class_kwargs)\n    period = class_kwargs['period']\n    seasonal = class_kwargs['seasonal']\n    expected = int(np.ceil(((1.5 * period) / (1 - (1.5 / seasonal)))))\n    expected += (1 if ((expected % 2) == 0) else 0)\n    assert (mod.config['trend'] == expected)\n    class_kwargs['period'] = 2\n    class_kwargs['seasonal'] = 101\n    class_kwargs['low_pass'] = 3\n    mod = STL(**class_kwargs)\n    period = class_kwargs['period']\n    seasonal = class_kwargs['seasonal']\n    expected = int(np.ceil(((1.5 * period) / (1 - (1.5 / seasonal)))))\n    expected += (1 if ((expected % 2) == 0) else 0)\n    assert (mod.config['trend'] == expected)", "masked_code": "def test_default_trend(default_kwargs):\n    (class_kwargs, _, _) = _to_class_kwargs(default_kwargs)\n    class_kwargs['period'] = 1000\n    class_kwargs['seasonal'] = 5\n    class_kwargs['trend'] = None\n    class_kwargs['low_pass'] = 1001\n    mod = STL(**class_kwargs)\n    period = class_kwargs['period']\n    seasonal = class_kwargs['seasonal']\n    expected = int(np.ceil(((1.5 * period) / (1 - (1.5 / seasonal)))))\n    expected += (1 if ((expected % 2) == 0) else 0)\n    assert (mod.config['trend'] == expected)\n    class_kwargs['period'] = 2\n    class_kwargs['seasonal'] = 101\n    class_kwargs['low_pass'] = 3\n    mod = STL(**class_kwargs)\n    period = class_kwargs['period']\n    seasonal = class_kwargs['seasonal']\n    expected = int(np.ceil(((1.5 * period) / (1 - (1.5 / seasonal)))))\n    expected += (1 if ((expected % 2) == 0) else 0)\n    assert (mod.config['trend'] == '???')", "ground_truth": ["expected"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_223", "reponame": "statsmodels", "testpath": "statsmodels/tsa/stl/tests/test_stl.py", "testname": "test_stl.py", "funcname": "test_pickle", "imports": ["from statsmodels.compat.pandas import MONTH_END", "import os", "import pickle", "import numpy as np", "from numpy.testing import assert_allclose", "import pandas as pd", "import pytest", "from statsmodels.datasets import co2", "from statsmodels.tsa.seasonal import STL, DecomposeResult"], "code": "def test_pickle(default_kwargs):\n    (class_kwargs, outer, inner) = _to_class_kwargs(default_kwargs)\n    class_kwargs['endog'] = ((class_kwargs['endog'] * 10) - 5000)\n    mod = STL(**class_kwargs)\n    res = mod.fit()\n    pkl = pickle.dumps(mod)\n    reloaded = pickle.loads(pkl)\n    res2 = reloaded.fit()\n    assert_allclose(res.trend, res2.trend)\n    assert_allclose(res.seasonal, res2.seasonal)\n    assert (mod.config == reloaded.config)", "masked_code": "def test_pickle(default_kwargs):\n    (class_kwargs, outer, inner) = _to_class_kwargs(default_kwargs)\n    class_kwargs['endog'] = ((class_kwargs['endog'] * 10) - 5000)\n    mod = STL(**class_kwargs)\n    res = mod.fit()\n    pkl = pickle.dumps(mod)\n    reloaded = pickle.loads(pkl)\n    res2 = reloaded.fit()\n    assert_allclose(res.trend, res2.trend)\n    assert_allclose(res.seasonal, res2.seasonal)\n    assert (mod.config == '???')", "ground_truth": ["reloaded.config"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_158", "reponame": "statsmodels", "testpath": "statsmodels/treatment/tests/test_teffects.py", "testname": "test_teffects.py", "funcname": "test_aux", "imports": ["import os", "import numpy as np", "from numpy.testing import assert_allclose", "import pandas as pd", "import pytest", "from statsmodels.regression.linear_model import OLS", "from statsmodels.discrete.discrete_model import Probit", "from statsmodels.treatment.treatment_effects import TreatmentEffect", "from .results import results_teffects as res_st"], "code": "def test_aux(self):\n    prob = res_probit.predict(exog=pd.DataFrame({'mmarried_': [0, 1, 0, 1], 'mage': [0, 25, 40, (- 10)], 'mage2': [0, 625, 1600, 100], 'fbaby_': [1, 0, 1, 0], 'medu': [0, 18, 30, np.nan]}))\n    assert (prob.shape == (4,))", "masked_code": "def test_aux(self):\n    prob = res_probit.predict(exog=pd.DataFrame({'mmarried_': [0, 1, 0, 1], 'mage': [0, 25, 40, (- 10)], 'mage2': [0, 625, 1600, 100], 'fbaby_': [1, 0, 1, 0], 'medu': [0, 18, 30, np.nan]}))\n    assert (prob.shape == '???')", "ground_truth": ["(4,)"], "quality_analysis": {"complexity_score": 5, "left_complexity": 2, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestTEffects"}
{"task_id": "statsmodels_192", "reponame": "statsmodels", "testpath": "statsmodels/tsa/forecasting/tests/test_theta.py", "testname": "test_theta.py", "funcname": "test_auto", "imports": ["from itertools import product", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tsa.forecasting.theta import ThetaModel"], "code": "def test_auto(reset_randomstate):\n    m = 336\n    e = ((np.random.standard_normal(m) * 1000000.0) - 1000000.0)\n    s = (100 * np.cos(np.linspace(0, (2 * np.pi), 48)))\n    s = np.tile(s, ((m // 48) + 1))[:m]\n    idx = pd.period_range('1980-01-01', freq='M', periods=m)\n    x = (e + s)\n    y1 = ((10000 + x) - x.min())\n    y2 = (np.abs(x) / 100000.0)\n    y = pd.DataFrame({'y1': y1, 'y2': y2}, index=idx)\n    tm = ThetaModel(y['y1'], method='auto')\n    assert (tm.method == 'mul')\n    res = tm.fit()\n    tm = ThetaModel(y['y1'], method='mul')\n    assert (tm.method == 'mul')\n    res2 = tm.fit()\n    np.testing.assert_allclose(res.params, res2.params)\n    tm = ThetaModel((y['y1'] - y['y1'].mean()), method='auto')\n    assert (tm.method == 'add')\n    res3 = tm.fit()\n    assert np.allclose(res.params, res3.params)", "masked_code": "def test_auto(reset_randomstate):\n    m = 336\n    e = ((np.random.standard_normal(m) * 1000000.0) - 1000000.0)\n    s = (100 * np.cos(np.linspace(0, (2 * np.pi), 48)))\n    s = np.tile(s, ((m // 48) + 1))[:m]\n    idx = pd.period_range('1980-01-01', freq='M', periods=m)\n    x = (e + s)\n    y1 = ((10000 + x) - x.min())\n    y2 = (np.abs(x) / 100000.0)\n    y = pd.DataFrame({'y1': y1, 'y2': y2}, index=idx)\n    tm = ThetaModel(y['y1'], method='auto')\n    assert (tm.method == '???')\n    res = tm.fit()\n    tm = ThetaModel(y['y1'], method='mul')\n    assert (tm.method == 'mul')\n    res2 = tm.fit()\n    np.testing.assert_allclose(res.params, res2.params)\n    tm = ThetaModel((y['y1'] - y['y1'].mean()), method='auto')\n    assert (tm.method == 'add')\n    res3 = tm.fit()\n    assert np.allclose(res.params, res3.params)", "ground_truth": ["'mul'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_193", "reponame": "statsmodels", "testpath": "statsmodels/tsa/forecasting/tests/test_theta.py", "testname": "test_theta.py", "funcname": "test_auto", "imports": ["from itertools import product", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tsa.forecasting.theta import ThetaModel"], "code": "def test_auto(reset_randomstate):\n    m = 336\n    e = ((np.random.standard_normal(m) * 1000000.0) - 1000000.0)\n    s = (100 * np.cos(np.linspace(0, (2 * np.pi), 48)))\n    s = np.tile(s, ((m // 48) + 1))[:m]\n    idx = pd.period_range('1980-01-01', freq='M', periods=m)\n    x = (e + s)\n    y1 = ((10000 + x) - x.min())\n    y2 = (np.abs(x) / 100000.0)\n    y = pd.DataFrame({'y1': y1, 'y2': y2}, index=idx)\n    tm = ThetaModel(y['y1'], method='auto')\n    assert (tm.method == 'mul')\n    res = tm.fit()\n    tm = ThetaModel(y['y1'], method='mul')\n    assert (tm.method == 'mul')\n    res2 = tm.fit()\n    np.testing.assert_allclose(res.params, res2.params)\n    tm = ThetaModel((y['y1'] - y['y1'].mean()), method='auto')\n    assert (tm.method == 'add')\n    res3 = tm.fit()\n    assert np.allclose(res.params, res3.params)", "masked_code": "def test_auto(reset_randomstate):\n    m = 336\n    e = ((np.random.standard_normal(m) * 1000000.0) - 1000000.0)\n    s = (100 * np.cos(np.linspace(0, (2 * np.pi), 48)))\n    s = np.tile(s, ((m // 48) + 1))[:m]\n    idx = pd.period_range('1980-01-01', freq='M', periods=m)\n    x = (e + s)\n    y1 = ((10000 + x) - x.min())\n    y2 = (np.abs(x) / 100000.0)\n    y = pd.DataFrame({'y1': y1, 'y2': y2}, index=idx)\n    tm = ThetaModel(y['y1'], method='auto')\n    assert (tm.method == 'mul')\n    res = tm.fit()\n    tm = ThetaModel(y['y1'], method='mul')\n    assert (tm.method == '???')\n    res2 = tm.fit()\n    np.testing.assert_allclose(res.params, res2.params)\n    tm = ThetaModel((y['y1'] - y['y1'].mean()), method='auto')\n    assert (tm.method == 'add')\n    res3 = tm.fit()\n    assert np.allclose(res.params, res3.params)", "ground_truth": ["'mul'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_194", "reponame": "statsmodels", "testpath": "statsmodels/tsa/forecasting/tests/test_theta.py", "testname": "test_theta.py", "funcname": "test_auto", "imports": ["from itertools import product", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tsa.forecasting.theta import ThetaModel"], "code": "def test_auto(reset_randomstate):\n    m = 336\n    e = ((np.random.standard_normal(m) * 1000000.0) - 1000000.0)\n    s = (100 * np.cos(np.linspace(0, (2 * np.pi), 48)))\n    s = np.tile(s, ((m // 48) + 1))[:m]\n    idx = pd.period_range('1980-01-01', freq='M', periods=m)\n    x = (e + s)\n    y1 = ((10000 + x) - x.min())\n    y2 = (np.abs(x) / 100000.0)\n    y = pd.DataFrame({'y1': y1, 'y2': y2}, index=idx)\n    tm = ThetaModel(y['y1'], method='auto')\n    assert (tm.method == 'mul')\n    res = tm.fit()\n    tm = ThetaModel(y['y1'], method='mul')\n    assert (tm.method == 'mul')\n    res2 = tm.fit()\n    np.testing.assert_allclose(res.params, res2.params)\n    tm = ThetaModel((y['y1'] - y['y1'].mean()), method='auto')\n    assert (tm.method == 'add')\n    res3 = tm.fit()\n    assert np.allclose(res.params, res3.params)", "masked_code": "def test_auto(reset_randomstate):\n    m = 336\n    e = ((np.random.standard_normal(m) * 1000000.0) - 1000000.0)\n    s = (100 * np.cos(np.linspace(0, (2 * np.pi), 48)))\n    s = np.tile(s, ((m // 48) + 1))[:m]\n    idx = pd.period_range('1980-01-01', freq='M', periods=m)\n    x = (e + s)\n    y1 = ((10000 + x) - x.min())\n    y2 = (np.abs(x) / 100000.0)\n    y = pd.DataFrame({'y1': y1, 'y2': y2}, index=idx)\n    tm = ThetaModel(y['y1'], method='auto')\n    assert (tm.method == 'mul')\n    res = tm.fit()\n    tm = ThetaModel(y['y1'], method='mul')\n    assert (tm.method == 'mul')\n    res2 = tm.fit()\n    np.testing.assert_allclose(res.params, res2.params)\n    tm = ThetaModel((y['y1'] - y['y1'].mean()), method='auto')\n    assert (tm.method == '???')\n    res3 = tm.fit()\n    assert np.allclose(res.params, res3.params)", "ground_truth": ["'add'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_273", "reponame": "statsmodels", "testpath": "statsmodels/tsa/tests/test_tsa_tools.py", "testname": "test_tsa_tools.py", "funcname": "test_range_index_columns", "imports": ["from statsmodels.compat.pandas import PD_LT_2_2_0, QUARTER_END, YEAR_END, assert_frame_equal, assert_series_equal", "import numpy as np", "from numpy.testing import assert_array_almost_equal, assert_array_equal, assert_equal, assert_raises", "import pandas as pd", "from pandas.tseries.frequencies import to_offset", "import pytest", "from statsmodels import regression", "from statsmodels.datasets import macrodata", "from statsmodels.tsa import stattools", "from statsmodels.tsa.tests.results import savedrvs", "from statsmodels.tsa.tests.results.datamlw_tls import mlacf, mlccf, mlpacf, mlywar", "import statsmodels.tsa.tsatools as tools", "from statsmodels.tsa.tsatools import vec, vech"], "code": "def test_range_index_columns(self):\n    df = pd.DataFrame({0: np.zeros(50, dtype=float), 1: np.arange((- 50), 0, dtype=float), 2: np.linspace((- 100), 100, 50), 3: np.full(50, 3.14)})\n    df.columns = pd.RangeIndex(4)\n    result = stattools.lagmat(df, maxlag=3, use_pandas=True)\n    assert (result.shape == (50, 12))\n    assert (list(result.columns) == ['0.L.1', '1.L.1', '2.L.1', '3.L.1', '0.L.2', '1.L.2', '2.L.2', '3.L.2', '0.L.3', '1.L.3', '2.L.3', '3.L.3'])", "masked_code": "def test_range_index_columns(self):\n    df = pd.DataFrame({0: np.zeros(50, dtype=float), 1: np.arange((- 50), 0, dtype=float), 2: np.linspace((- 100), 100, 50), 3: np.full(50, 3.14)})\n    df.columns = pd.RangeIndex(4)\n    result = stattools.lagmat(df, maxlag=3, use_pandas=True)\n    assert (result.shape == '???')\n    assert (list(result.columns) == ['0.L.1', '1.L.1', '2.L.1', '3.L.1', '0.L.2', '1.L.2', '2.L.2', '3.L.2', '0.L.3', '1.L.3', '2.L.3', '3.L.3'])", "ground_truth": ["(50, 12)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestLagmat"}
{"task_id": "statsmodels_274", "reponame": "statsmodels", "testpath": "statsmodels/tsa/tests/test_tsa_tools.py", "testname": "test_tsa_tools.py", "funcname": "test_range_index_columns", "imports": ["from statsmodels.compat.pandas import PD_LT_2_2_0, QUARTER_END, YEAR_END, assert_frame_equal, assert_series_equal", "import numpy as np", "from numpy.testing import assert_array_almost_equal, assert_array_equal, assert_equal, assert_raises", "import pandas as pd", "from pandas.tseries.frequencies import to_offset", "import pytest", "from statsmodels import regression", "from statsmodels.datasets import macrodata", "from statsmodels.tsa import stattools", "from statsmodels.tsa.tests.results import savedrvs", "from statsmodels.tsa.tests.results.datamlw_tls import mlacf, mlccf, mlpacf, mlywar", "import statsmodels.tsa.tsatools as tools", "from statsmodels.tsa.tsatools import vec, vech"], "code": "def test_range_index_columns(self):\n    df = pd.DataFrame({0: np.zeros(50, dtype=float), 1: np.arange((- 50), 0, dtype=float), 2: np.linspace((- 100), 100, 50), 3: np.full(50, 3.14)})\n    df.columns = pd.RangeIndex(4)\n    result = stattools.lagmat(df, maxlag=3, use_pandas=True)\n    assert (result.shape == (50, 12))\n    assert (list(result.columns) == ['0.L.1', '1.L.1', '2.L.1', '3.L.1', '0.L.2', '1.L.2', '2.L.2', '3.L.2', '0.L.3', '1.L.3', '2.L.3', '3.L.3'])", "masked_code": "def test_range_index_columns(self):\n    df = pd.DataFrame({0: np.zeros(50, dtype=float), 1: np.arange((- 50), 0, dtype=float), 2: np.linspace((- 100), 100, 50), 3: np.full(50, 3.14)})\n    df.columns = pd.RangeIndex(4)\n    result = stattools.lagmat(df, maxlag=3, use_pandas=True)\n    assert (result.shape == (50, 12))\n    assert (list(result.columns) == '???')", "ground_truth": ["['0.L.1', '1.L.1', '2.L.1', '3.L.1', '0.L.2', '1.L.2', '2.L.2', '3.L.2', '0.L.3', '1.L.3', '2.L.3', '3.L.3']"], "quality_analysis": {"complexity_score": 19, "left_complexity": 5, "right_complexity": 14, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestLagmat"}
{"task_id": "statsmodels_138", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_1d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_1d(self, use_pandas):\n    data = gen_data(1, use_pandas)\n    a = array_like(data, 'a')\n    assert (a.ndim == 1)\n    assert (a.shape == (10,))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=1)\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', shape=(10,))\n    assert (a.shape == (10,))\n    a = array_like(data, 'a', ndim=1, shape=(None,))\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', ndim=2, shape=(10, 1))\n    assert (a.ndim == 2)\n    assert (a.shape == (10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', shape=(5,))", "masked_code": "def test_1d(self, use_pandas):\n    data = gen_data(1, use_pandas)\n    a = array_like(data, 'a')\n    assert (a.ndim == 1)\n    assert (a.shape == '???')\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=1)\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', shape=(10,))\n    assert (a.shape == (10,))\n    a = array_like(data, 'a', ndim=1, shape=(None,))\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', ndim=2, shape=(10, 1))\n    assert (a.ndim == 2)\n    assert (a.shape == (10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', shape=(5,))", "ground_truth": ["(10,)"], "quality_analysis": {"complexity_score": 5, "left_complexity": 2, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_139", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_1d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_1d(self, use_pandas):\n    data = gen_data(1, use_pandas)\n    a = array_like(data, 'a')\n    assert (a.ndim == 1)\n    assert (a.shape == (10,))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=1)\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', shape=(10,))\n    assert (a.shape == (10,))\n    a = array_like(data, 'a', ndim=1, shape=(None,))\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', ndim=2, shape=(10, 1))\n    assert (a.ndim == 2)\n    assert (a.shape == (10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', shape=(5,))", "masked_code": "def test_1d(self, use_pandas):\n    data = gen_data(1, use_pandas)\n    a = array_like(data, 'a')\n    assert (a.ndim == 1)\n    assert (a.shape == (10,))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=1)\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', shape=(10,))\n    assert (a.shape == '???')\n    a = array_like(data, 'a', ndim=1, shape=(None,))\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', ndim=2, shape=(10, 1))\n    assert (a.ndim == 2)\n    assert (a.shape == (10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', shape=(5,))", "ground_truth": ["(10,)"], "quality_analysis": {"complexity_score": 5, "left_complexity": 2, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_140", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_1d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_1d(self, use_pandas):\n    data = gen_data(1, use_pandas)\n    a = array_like(data, 'a')\n    assert (a.ndim == 1)\n    assert (a.shape == (10,))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=1)\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', shape=(10,))\n    assert (a.shape == (10,))\n    a = array_like(data, 'a', ndim=1, shape=(None,))\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', ndim=2, shape=(10, 1))\n    assert (a.ndim == 2)\n    assert (a.shape == (10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', shape=(5,))", "masked_code": "def test_1d(self, use_pandas):\n    data = gen_data(1, use_pandas)\n    a = array_like(data, 'a')\n    assert (a.ndim == 1)\n    assert (a.shape == (10,))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=1)\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', shape=(10,))\n    assert (a.shape == (10,))\n    a = array_like(data, 'a', ndim=1, shape=(None,))\n    assert (a.ndim == 1)\n    a = array_like(data, 'a', ndim=2, shape=(10, 1))\n    assert (a.ndim == 2)\n    assert (a.shape == '???')\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', shape=(5,))", "ground_truth": ["(10, 1)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_141", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_2d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "masked_code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == '???')\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "ground_truth": ["(20, 10)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_142", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_2d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "masked_code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == '???')\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "ground_truth": ["(20, 10)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_143", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_2d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "masked_code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == '???')\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "ground_truth": ["(20, 10)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_144", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_2d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "masked_code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == '???')\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "ground_truth": ["(20, 10)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_145", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_2d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "masked_code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == '???')\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "ground_truth": ["3"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_146", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_2d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == (20, 10, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "masked_code": "def test_2d(self, use_pandas):\n    data = gen_data(2, use_pandas)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    assert (a.shape == (20, 10))\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=2)\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=2, shape=(20, None))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(20,))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, 10))\n    assert (a.shape == (20, 10))\n    a = array_like(data, 'a', ndim=2, shape=(None, None))\n    assert (a.ndim == 2)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.ndim == 3)\n    assert (a.shape == '???')\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(20, 20))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=2, shape=(None, 20))\n    match = 'a is required to have ndim 1 but has ndim 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=1)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)", "ground_truth": ["(20, 10, 1)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_147", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_3d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "masked_code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == '???')\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "ground_truth": ["(5, 6, 7)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_148", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_3d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "masked_code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == '???')\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "ground_truth": ["3"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_149", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_3d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "masked_code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == '???')\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "ground_truth": ["(5, 6, 7)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_150", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_3d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "masked_code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == '???')\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "ground_truth": ["(5, 6, 7)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_151", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_3d", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == (5, 6, 7, 1, 1))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "masked_code": "def test_3d(self):\n    data = gen_data(3, False)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 6, 7))\n    assert (a.ndim == 3)\n    assert (type(a) is np.ndarray)\n    a = array_like(data, 'a', ndim=3, shape=(5, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=3, shape=(None, None, 7))\n    assert (a.shape == (5, 6, 7))\n    a = array_like(data, 'a', ndim=5)\n    assert (a.shape == '???')\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(10,))\n    with pytest.raises(ValueError, match='a is required to have shape'):\n        array_like(data, 'a', ndim=3, shape=(None, None, 5))\n    match = 'a is required to have ndim 2 but has ndim 3'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', ndim=2)\n    match = 'a must have ndim <= 1'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=1)\n    match = 'a must have ndim <= 2'\n    with pytest.raises(ValueError, match=match):\n        array_like(data, 'a', maxdim=2)", "ground_truth": ["(5, 6, 7, 1, 1)"], "quality_analysis": {"complexity_score": 9, "left_complexity": 2, "right_complexity": 7, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_156", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_dtype", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_dtype(self):\n    x = np.arange(5)\n    a = array_like(x, 'a', dtype=np.float64)\n    assert (a.dtype == np.float64)\n    a = array_like(x, 'a', dtype=np.int16)\n    assert (a.dtype == np.int16)", "masked_code": "def test_dtype(self):\n    x = np.arange(5)\n    a = array_like(x, 'a', dtype=np.float64)\n    assert (a.dtype == '???')\n    a = array_like(x, 'a', dtype=np.int16)\n    assert (a.dtype == np.int16)", "ground_truth": ["np.float64"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_157", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_dtype", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_dtype(self):\n    x = np.arange(5)\n    a = array_like(x, 'a', dtype=np.float64)\n    assert (a.dtype == np.float64)\n    a = array_like(x, 'a', dtype=np.int16)\n    assert (a.dtype == np.int16)", "masked_code": "def test_dtype(self):\n    x = np.arange(5)\n    a = array_like(x, 'a', dtype=np.float64)\n    assert (a.dtype == np.float64)\n    a = array_like(x, 'a', dtype=np.int16)\n    assert (a.dtype == '???')", "ground_truth": ["np.int16"], "quality_analysis": {"complexity_score": 4, "left_complexity": 2, "right_complexity": 2, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_130", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_right_squeeze", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_right_squeeze():\n    x = np.empty((1, 0, 1))\n    with pytest.raises(ValueError):\n        _right_squeeze(x)\n    x = np.empty((2, 3, 4, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (2, 3, 4))\n    x = np.empty((7, 2, 2))\n    y = _right_squeeze(x)\n    assert (y.shape == (7, 2, 2))\n    x = np.empty((9, 10, 1, 1, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (9, 10))", "masked_code": "def test_right_squeeze():\n    x = np.empty((1, 0, 1))\n    with pytest.raises(ValueError):\n        _right_squeeze(x)\n    x = np.empty((2, 3, 4, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == '???')\n    x = np.empty((7, 2, 2))\n    y = _right_squeeze(x)\n    assert (y.shape == (7, 2, 2))\n    x = np.empty((9, 10, 1, 1, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (9, 10))", "ground_truth": ["(2, 3, 4)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_131", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_right_squeeze", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_right_squeeze():\n    x = np.empty((1, 0, 1))\n    with pytest.raises(ValueError):\n        _right_squeeze(x)\n    x = np.empty((2, 3, 4, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (2, 3, 4))\n    x = np.empty((7, 2, 2))\n    y = _right_squeeze(x)\n    assert (y.shape == (7, 2, 2))\n    x = np.empty((9, 10, 1, 1, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (9, 10))", "masked_code": "def test_right_squeeze():\n    x = np.empty((1, 0, 1))\n    with pytest.raises(ValueError):\n        _right_squeeze(x)\n    x = np.empty((2, 3, 4, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (2, 3, 4))\n    x = np.empty((7, 2, 2))\n    y = _right_squeeze(x)\n    assert (y.shape == '???')\n    x = np.empty((9, 10, 1, 1, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (9, 10))", "ground_truth": ["(7, 2, 2)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_132", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_right_squeeze", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_right_squeeze():\n    x = np.empty((1, 0, 1))\n    with pytest.raises(ValueError):\n        _right_squeeze(x)\n    x = np.empty((2, 3, 4, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (2, 3, 4))\n    x = np.empty((7, 2, 2))\n    y = _right_squeeze(x)\n    assert (y.shape == (7, 2, 2))\n    x = np.empty((9, 10, 1, 1, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (9, 10))", "masked_code": "def test_right_squeeze():\n    x = np.empty((1, 0, 1))\n    with pytest.raises(ValueError):\n        _right_squeeze(x)\n    x = np.empty((2, 3, 4, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == (2, 3, 4))\n    x = np.empty((7, 2, 2))\n    y = _right_squeeze(x)\n    assert (y.shape == (7, 2, 2))\n    x = np.empty((9, 10, 1, 1, 1))\n    y = _right_squeeze(x)\n    assert (y.shape == '???')", "ground_truth": ["(9, 10)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_152", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_right_squeeze_and_pad", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_right_squeeze_and_pad(self):\n    data = np.empty((1, 1, 1))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (1, 1, 1))\n    data = np.empty(5)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 1, 1))\n    data = np.empty((7, 3))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (7, 3, 1))\n    data = np.empty((2, 1, 3, 2, 1, 1))\n    with pytest.raises(ValueError):\n        array_like(data, 'a', ndim=3)", "masked_code": "def test_right_squeeze_and_pad(self):\n    data = np.empty((1, 1, 1))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == '???')\n    data = np.empty(5)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 1, 1))\n    data = np.empty((7, 3))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (7, 3, 1))\n    data = np.empty((2, 1, 3, 2, 1, 1))\n    with pytest.raises(ValueError):\n        array_like(data, 'a', ndim=3)", "ground_truth": ["(1, 1, 1)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_153", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_right_squeeze_and_pad", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_right_squeeze_and_pad(self):\n    data = np.empty((1, 1, 1))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (1, 1, 1))\n    data = np.empty(5)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 1, 1))\n    data = np.empty((7, 3))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (7, 3, 1))\n    data = np.empty((2, 1, 3, 2, 1, 1))\n    with pytest.raises(ValueError):\n        array_like(data, 'a', ndim=3)", "masked_code": "def test_right_squeeze_and_pad(self):\n    data = np.empty((1, 1, 1))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (1, 1, 1))\n    data = np.empty(5)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == '???')\n    data = np.empty((7, 3))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (7, 3, 1))\n    data = np.empty((2, 1, 3, 2, 1, 1))\n    with pytest.raises(ValueError):\n        array_like(data, 'a', ndim=3)", "ground_truth": ["(5, 1, 1)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_154", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_right_squeeze_and_pad", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_right_squeeze_and_pad(self):\n    data = np.empty((1, 1, 1))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (1, 1, 1))\n    data = np.empty(5)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 1, 1))\n    data = np.empty((7, 3))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (7, 3, 1))\n    data = np.empty((2, 1, 3, 2, 1, 1))\n    with pytest.raises(ValueError):\n        array_like(data, 'a', ndim=3)", "masked_code": "def test_right_squeeze_and_pad(self):\n    data = np.empty((1, 1, 1))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (1, 1, 1))\n    data = np.empty(5)\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == (5, 1, 1))\n    data = np.empty((7, 3))\n    a = array_like(data, 'a', ndim=3)\n    assert (a.shape == '???')\n    data = np.empty((2, 1, 3, 2, 1, 1))\n    with pytest.raises(ValueError):\n        array_like(data, 'a', ndim=3)", "ground_truth": ["(7, 3, 1)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 2, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArrayLike"}
{"task_id": "statsmodels_134", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_wrap_pandas_append", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_wrap_pandas_append():\n    a = gen_data(1, True)\n    a.name = 42\n    b = gen_data(1, False)\n    wrapped = PandasWrapper(a).wrap(b, append='ZZZ')\n    expected = '42_ZZZ'\n    assert (wrapped.name == expected)\n    a = gen_data(2, True)\n    a.columns = [('c' * (i + 1)) for i in range(a.shape[1])]\n    b = gen_data(2, False)\n    wrapped = PandasWrapper(a).wrap(b, append='longsuffix')\n    expected = [(c + '_longsuffix') for c in a.columns]\n    assert (list(wrapped.columns) == expected)", "masked_code": "def test_wrap_pandas_append():\n    a = gen_data(1, True)\n    a.name = 42\n    b = gen_data(1, False)\n    wrapped = PandasWrapper(a).wrap(b, append='ZZZ')\n    expected = '42_ZZZ'\n    assert (wrapped.name == '???')\n    a = gen_data(2, True)\n    a.columns = [('c' * (i + 1)) for i in range(a.shape[1])]\n    b = gen_data(2, False)\n    wrapped = PandasWrapper(a).wrap(b, append='longsuffix')\n    expected = [(c + '_longsuffix') for c in a.columns]\n    assert (list(wrapped.columns) == expected)", "ground_truth": ["expected"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_135", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_wrap_pandas_append", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_wrap_pandas_append():\n    a = gen_data(1, True)\n    a.name = 42\n    b = gen_data(1, False)\n    wrapped = PandasWrapper(a).wrap(b, append='ZZZ')\n    expected = '42_ZZZ'\n    assert (wrapped.name == expected)\n    a = gen_data(2, True)\n    a.columns = [('c' * (i + 1)) for i in range(a.shape[1])]\n    b = gen_data(2, False)\n    wrapped = PandasWrapper(a).wrap(b, append='longsuffix')\n    expected = [(c + '_longsuffix') for c in a.columns]\n    assert (list(wrapped.columns) == expected)", "masked_code": "def test_wrap_pandas_append():\n    a = gen_data(1, True)\n    a.name = 42\n    b = gen_data(1, False)\n    wrapped = PandasWrapper(a).wrap(b, append='ZZZ')\n    expected = '42_ZZZ'\n    assert (wrapped.name == expected)\n    a = gen_data(2, True)\n    a.columns = [('c' * (i + 1)) for i in range(a.shape[1])]\n    b = gen_data(2, False)\n    wrapped = PandasWrapper(a).wrap(b, append='longsuffix')\n    expected = [(c + '_longsuffix') for c in a.columns]\n    assert (list(wrapped.columns) == '???')", "ground_truth": ["expected"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_136", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_wrap_pandas_append_non_string", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_wrap_pandas_append_non_string():\n    a = gen_data(1, True)\n    a.name = None\n    b = gen_data(1, False)\n    wrapped = PandasWrapper(a).wrap(b, append=100)\n    expected = 100\n    assert (wrapped.name == expected)\n    a = gen_data(2, True)\n    a.columns = [float(i) for i in range(a.shape[1])]\n    b = gen_data(2, False)\n    wrapped = PandasWrapper(a).wrap(b, append=7)\n    expected = [f'{c}_7' for c in a.columns]\n    assert (list(wrapped.columns) == expected)", "masked_code": "def test_wrap_pandas_append_non_string():\n    a = gen_data(1, True)\n    a.name = None\n    b = gen_data(1, False)\n    wrapped = PandasWrapper(a).wrap(b, append=100)\n    expected = 100\n    assert (wrapped.name == '???')\n    a = gen_data(2, True)\n    a.columns = [float(i) for i in range(a.shape[1])]\n    b = gen_data(2, False)\n    wrapped = PandasWrapper(a).wrap(b, append=7)\n    expected = [f'{c}_7' for c in a.columns]\n    assert (list(wrapped.columns) == expected)", "ground_truth": ["expected"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_137", "reponame": "statsmodels", "testpath": "statsmodels/tools/validation/tests/test_validation.py", "testname": "test_validation.py", "funcname": "test_wrap_pandas_append_non_string", "imports": ["from collections import OrderedDict", "import numpy as np", "import pandas as pd", "import pytest", "from statsmodels.tools.validation import array_like, PandasWrapper, bool_like, dict_like, float_like, int_like, string_like", "from statsmodels.tools.validation.validation import _right_squeeze"], "code": "def test_wrap_pandas_append_non_string():\n    a = gen_data(1, True)\n    a.name = None\n    b = gen_data(1, False)\n    wrapped = PandasWrapper(a).wrap(b, append=100)\n    expected = 100\n    assert (wrapped.name == expected)\n    a = gen_data(2, True)\n    a.columns = [float(i) for i in range(a.shape[1])]\n    b = gen_data(2, False)\n    wrapped = PandasWrapper(a).wrap(b, append=7)\n    expected = [f'{c}_7' for c in a.columns]\n    assert (list(wrapped.columns) == expected)", "masked_code": "def test_wrap_pandas_append_non_string():\n    a = gen_data(1, True)\n    a.name = None\n    b = gen_data(1, False)\n    wrapped = PandasWrapper(a).wrap(b, append=100)\n    expected = 100\n    assert (wrapped.name == expected)\n    a = gen_data(2, True)\n    a.columns = [float(i) for i in range(a.shape[1])]\n    b = gen_data(2, False)\n    wrapped = PandasWrapper(a).wrap(b, append=7)\n    expected = [f'{c}_7' for c in a.columns]\n    assert (list(wrapped.columns) == '???')", "ground_truth": ["expected"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "statsmodels_125", "reponame": "statsmodels", "testpath": "statsmodels/tests/test_x13.py", "testname": "test_x13.py", "funcname": "test_make_var_names", "imports": ["import pandas as pd", "from statsmodels.tsa.x13 import _make_var_names"], "code": "def test_make_var_names():\n    exog = pd.Series([0, (- 1), 999999], name='')\n    assert (_make_var_names(exog) == '')\n    exog_none = pd.Series([(- 42), 42, 3.14], name=None)\n    assert (_make_var_names(exog_none) == 'x1')\n    exog_floatname = pd.Series([10000000000.0, 5e-05, (- 2)], name='variable_\u0394\u03a3')\n    assert (_make_var_names(exog_floatname) == 'variable_\u0394\u03a3')\n    exog_intname = pd.Series([10, 20, 30], name=1234)\n    assert (_make_var_names(exog_intname) == 'x1')\n    exog_negname = pd.Series([100, 200], name=(- 99))\n    assert (_make_var_names(exog_negname) == 'x1')", "masked_code": "def test_make_var_names():\n    exog = pd.Series([0, (- 1), 999999], name='')\n    assert (_make_var_names(exog) == '')\n    exog_none = pd.Series([(- 42), 42, 3.14], name=None)\n    assert (_make_var_names(exog_none) == '???')\n    exog_floatname = pd.Series([10000000000.0, 5e-05, (- 2)], name='variable_\u0394\u03a3')\n    assert (_make_var_names(exog_floatname) == 'variable_\u0394\u03a3')\n    exog_intname = pd.Series([10, 20, 30], name=1234)\n    assert (_make_var_names(exog_intname) == 'x1')\n    exog_negname = pd.Series([100, 200], name=(- 99))\n    assert (_make_var_names(exog_negname) == 'x1')", "ground_truth": ["'x1'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
