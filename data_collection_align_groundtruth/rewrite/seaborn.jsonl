{"task_id": "seaborn_2", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_axis", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_axis(random):\n    'Test axis kwarg to bootstrap function.'\n    x = np.random.randn(50, 1)\n    n_boot = 50\n    out_default = algo.bootstrap(x, n_boot=n_boot)\n    assert (out_default.shape == (n_boot,))\n    out_axis = algo.bootstrap(x, n_boot=n_boot, axis=(- 2))\n    assert (out_axis.shape == (n_boot, x.shape[1]))", "masked_code": "def test_bootstrap_axis(random):\n    'Test axis kwarg to bootstrap function.'\n    x = np.random.randn(50, 1)\n    n_boot = 50\n    out_default = algo.bootstrap(x, n_boot=n_boot)\n    assert (out_default.shape == '???')\n    out_axis = algo.bootstrap(x, n_boot=n_boot, axis=(- 2))\n    assert (out_axis.shape == (n_boot, x.shape[1]))", "ground_truth": ["(50,)", "(n_boot,)"], "quality_analysis": {"complexity_score": 5, "left_complexity": 2, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_0", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_length", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_length(random):\n    'Test that we get a bootstrap array of the right shape.'\n    a_norm = np.array([(- 100.5), 0, 200.2, (- 0.3), 4.4])\n    out = algo.bootstrap(a_norm)\n    assert (len(out) == 10000)\n    n_boot = 200\n    out = algo.bootstrap(a_norm, n_boot=n_boot)\n    assert (len(out) == n_boot)", "masked_code": "def test_bootstrap_length(random):\n    'Test that we get a bootstrap array of the right shape.'\n    a_norm = np.array([(- 100.5), 0, 200.2, (- 0.3), 4.4])\n    out = algo.bootstrap(a_norm)\n    assert (len(out) == '???')\n    n_boot = 200\n    out = algo.bootstrap(a_norm, n_boot=n_boot)\n    assert (len(out) == n_boot)", "ground_truth": ["10000"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_length", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_length(random):\n    'Test that we get a bootstrap array of the right shape.'\n    a_norm = np.array([(- 100.5), 0, 200.2, (- 0.3), 4.4])\n    out = algo.bootstrap(a_norm)\n    assert (len(out) == 10000)\n    n_boot = 200\n    out = algo.bootstrap(a_norm, n_boot=n_boot)\n    assert (len(out) == n_boot)", "masked_code": "def test_bootstrap_length(random):\n    'Test that we get a bootstrap array of the right shape.'\n    a_norm = np.array([(- 100.5), 0, 200.2, (- 0.3), 4.4])\n    out = algo.bootstrap(a_norm)\n    assert (len(out) == 10000)\n    n_boot = 200\n    out = algo.bootstrap(a_norm, n_boot=n_boot)\n    assert (len(out) == '???')", "ground_truth": ["200", "n_boot"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_3", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_ols", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_ols(random):\n    'Test bootstrap of OLS model fit.'\n\n    def ols_fit(X, y):\n        XtXinv = np.linalg.inv(np.dot(X.T, X))\n        return XtXinv.dot(X.T).dot(y)\n    X = np.column_stack((np.random.uniform((- 20), 20, size=(20, 3)), np.zeros(20)))\n    w = [(- 5), 0, 2.2, 0.0]\n    y_noisy = (np.dot(X, w) + (np.random.randn(20) * 50))\n    y_lownoise = (np.dot(X, w) + (np.random.randn(20) * 0.1))\n    n_boot = 30\n    try:\n        w_boot_noisy = algo.bootstrap(X, y_noisy, n_boot=n_boot, func=ols_fit)\n        w_boot_lownoise = algo.bootstrap(X, y_lownoise, n_boot=n_boot, func=ols_fit)\n        assert (w_boot_noisy.shape == (n_boot, 4))\n        assert (w_boot_lownoise.shape == (n_boot, 4))\n        assert (w_boot_noisy.std() > w_boot_lownoise.std())\n    except np.linalg.LinAlgError as e:\n        pytest.skip(f'Bootstrap produced singular matrix: {e}')", "masked_code": "def test_bootstrap_ols(random):\n    'Test bootstrap of OLS model fit.'\n\n    def ols_fit(X, y):\n        XtXinv = np.linalg.inv(np.dot(X.T, X))\n        return XtXinv.dot(X.T).dot(y)\n    X = np.column_stack((np.random.uniform((- 20), 20, size=(20, 3)), np.zeros(20)))\n    w = [(- 5), 0, 2.2, 0.0]\n    y_noisy = (np.dot(X, w) + (np.random.randn(20) * 50))\n    y_lownoise = (np.dot(X, w) + (np.random.randn(20) * 0.1))\n    n_boot = 30\n    try:\n        w_boot_noisy = algo.bootstrap(X, y_noisy, n_boot=n_boot, func=ols_fit)\n        w_boot_lownoise = algo.bootstrap(X, y_lownoise, n_boot=n_boot, func=ols_fit)\n        assert (w_boot_noisy.shape == '???')\n        assert (w_boot_lownoise.shape == (n_boot, 4))\n        assert (w_boot_noisy.std() > w_boot_lownoise.std())\n    except np.linalg.LinAlgError as e:\n        pytest.skip(f'Bootstrap produced singular matrix: {e}')", "ground_truth": ["(n_boot, 4)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_4", "reponame": "seaborn", "testpath": "tests/test_algorithms.py", "testname": "test_algorithms.py", "funcname": "test_bootstrap_ols", "imports": ["import numpy as np", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn import algorithms as algo"], "code": "def test_bootstrap_ols(random):\n    'Test bootstrap of OLS model fit.'\n\n    def ols_fit(X, y):\n        XtXinv = np.linalg.inv(np.dot(X.T, X))\n        return XtXinv.dot(X.T).dot(y)\n    X = np.column_stack((np.random.uniform((- 20), 20, size=(20, 3)), np.zeros(20)))\n    w = [(- 5), 0, 2.2, 0.0]\n    y_noisy = (np.dot(X, w) + (np.random.randn(20) * 50))\n    y_lownoise = (np.dot(X, w) + (np.random.randn(20) * 0.1))\n    n_boot = 30\n    try:\n        w_boot_noisy = algo.bootstrap(X, y_noisy, n_boot=n_boot, func=ols_fit)\n        w_boot_lownoise = algo.bootstrap(X, y_lownoise, n_boot=n_boot, func=ols_fit)\n        assert (w_boot_noisy.shape == (n_boot, 4))\n        assert (w_boot_lownoise.shape == (n_boot, 4))\n        assert (w_boot_noisy.std() > w_boot_lownoise.std())\n    except np.linalg.LinAlgError as e:\n        pytest.skip(f'Bootstrap produced singular matrix: {e}')", "masked_code": "def test_bootstrap_ols(random):\n    'Test bootstrap of OLS model fit.'\n\n    def ols_fit(X, y):\n        XtXinv = np.linalg.inv(np.dot(X.T, X))\n        return XtXinv.dot(X.T).dot(y)\n    X = np.column_stack((np.random.uniform((- 20), 20, size=(20, 3)), np.zeros(20)))\n    w = [(- 5), 0, 2.2, 0.0]\n    y_noisy = (np.dot(X, w) + (np.random.randn(20) * 50))\n    y_lownoise = (np.dot(X, w) + (np.random.randn(20) * 0.1))\n    n_boot = 30\n    try:\n        w_boot_noisy = algo.bootstrap(X, y_noisy, n_boot=n_boot, func=ols_fit)\n        w_boot_lownoise = algo.bootstrap(X, y_lownoise, n_boot=n_boot, func=ols_fit)\n        assert (w_boot_noisy.shape == (n_boot, 4))\n        assert (w_boot_lownoise.shape == '???')\n        assert (w_boot_noisy.std() > w_boot_lownoise.std())\n    except np.linalg.LinAlgError as e:\n        pytest.skip(f'Bootstrap produced singular matrix: {e}')", "ground_truth": ["(n_boot, 4)"], "quality_analysis": {"complexity_score": 6, "left_complexity": 2, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1280", "reponame": "seaborn", "testpath": "tests/_marks/test_area.py", "testname": "test_area.py", "funcname": "test_unfilled", "imports": ["import matplotlib as mpl", "from matplotlib.colors import to_rgba, to_rgba_array", "from numpy.testing import assert_array_equal", "from seaborn._core.plot import Plot", "from seaborn._marks.area import Area, Band"], "code": "def test_unfilled(self):\n    (x, y) = ([0, (- 5.5), 1000000.0, 3.14], [0, 5, (- 2.72), 0])\n    c = 'red'\n    p = Plot(x=x, y=y).add(Area(fill=False, color=c)).plot()\n    ax = p._figure.axes[0]\n    poly = ax.patches[0]\n    assert (poly.get_facecolor() == to_rgba(c, 0))", "masked_code": "def test_unfilled(self):\n    (x, y) = ([0, (- 5.5), 1000000.0, 3.14], [0, 5, (- 2.72), 0])\n    c = 'red'\n    p = Plot(x=x, y=y).add(Area(fill=False, color=c)).plot()\n    ax = p._figure.axes[0]\n    poly = ax.patches[0]\n    assert (poly.get_facecolor() == '???')", "ground_truth": ["(1.0, 0.0, 0.0, 0)", "to_rgba(c, 0)"], "quality_analysis": {"complexity_score": 8, "left_complexity": 3, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestArea"}
{"task_id": "seaborn_1309", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_color", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_color(self):\n    (c, a) = ('#FF0000', 0)\n    m = self.mark(color=c, alpha=a)\n    assert (resolve_color(m, {}) == mpl.colors.to_rgba(c, a))\n    df = pd.DataFrame(index=pd.RangeIndex(7))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))", "masked_code": "def test_color(self):\n    (c, a) = ('#FF0000', 0)\n    m = self.mark(color=c, alpha=a)\n    assert (resolve_color(m, {}) == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(7))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))", "ground_truth": ["mpl.colors.to_rgba(c, a)"], "quality_analysis": {"complexity_score": 12, "left_complexity": 7, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1304", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_default", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_default(self):\n    val = 0.0\n    m = self.mark(linewidth=Mappable(val))\n    assert (m._resolve({}, 'linewidth') == val)\n    df = pd.DataFrame(index=pd.RangeIndex(3))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "masked_code": "def test_default(self):\n    val = 0.0\n    m = self.mark(linewidth=Mappable(val))\n    assert (m._resolve({}, 'linewidth') == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(3))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "ground_truth": ["val"], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1306", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_depends", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_depends(self):\n    val = (- 4)\n    df = pd.DataFrame(index=pd.RangeIndex(3))\n    m = self.mark(pointsize=Mappable(val), linewidth=Mappable(depend='pointsize'))\n    assert (m._resolve({}, 'linewidth') == val)\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))\n    m = self.mark(pointsize=0, linewidth=Mappable(depend='pointsize'))\n    assert (m._resolve({}, 'linewidth') == 0)\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), 0))", "masked_code": "def test_depends(self):\n    val = (- 4)\n    df = pd.DataFrame(index=pd.RangeIndex(3))\n    m = self.mark(pointsize=Mappable(val), linewidth=Mappable(depend='pointsize'))\n    assert (m._resolve({}, 'linewidth') == '???')\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))\n    m = self.mark(pointsize=0, linewidth=Mappable(depend='pointsize'))\n    assert (m._resolve({}, 'linewidth') == 0)\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), 0))", "ground_truth": ["val"], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1311", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_fillcolor", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_fillcolor(self):\n    (c, a) = ('#123456', 1)\n    fa = 0\n    m = self.mark(color=c, alpha=a, fillcolor=Mappable(depend='color'), fillalpha=Mappable(fa))\n    assert (resolve_color(m, {}) == mpl.colors.to_rgba(c, a))\n    assert (resolve_color(m, {}, 'fill') == mpl.colors.to_rgba(c, fa))\n    df = pd.DataFrame(index=pd.RangeIndex(4))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))\n    assert_array_equal(resolve_color(m, df, 'fill'), mpl.colors.to_rgba_array(cs, fa))", "masked_code": "def test_fillcolor(self):\n    (c, a) = ('#123456', 1)\n    fa = 0\n    m = self.mark(color=c, alpha=a, fillcolor=Mappable(depend='color'), fillalpha=Mappable(fa))\n    assert (resolve_color(m, {}) == '???')\n    assert (resolve_color(m, {}, 'fill') == mpl.colors.to_rgba(c, fa))\n    df = pd.DataFrame(index=pd.RangeIndex(4))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))\n    assert_array_equal(resolve_color(m, df, 'fill'), mpl.colors.to_rgba_array(cs, fa))", "ground_truth": ["mpl.colors.to_rgba(c, a)"], "quality_analysis": {"complexity_score": 12, "left_complexity": 7, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1312", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_fillcolor", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_fillcolor(self):\n    (c, a) = ('#123456', 1)\n    fa = 0\n    m = self.mark(color=c, alpha=a, fillcolor=Mappable(depend='color'), fillalpha=Mappable(fa))\n    assert (resolve_color(m, {}) == mpl.colors.to_rgba(c, a))\n    assert (resolve_color(m, {}, 'fill') == mpl.colors.to_rgba(c, fa))\n    df = pd.DataFrame(index=pd.RangeIndex(4))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))\n    assert_array_equal(resolve_color(m, df, 'fill'), mpl.colors.to_rgba_array(cs, fa))", "masked_code": "def test_fillcolor(self):\n    (c, a) = ('#123456', 1)\n    fa = 0\n    m = self.mark(color=c, alpha=a, fillcolor=Mappable(depend='color'), fillalpha=Mappable(fa))\n    assert (resolve_color(m, {}) == mpl.colors.to_rgba(c, a))\n    assert (resolve_color(m, {}, 'fill') == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(4))\n    cs = ([c] * len(df))\n    assert_array_equal(resolve_color(m, df), mpl.colors.to_rgba_array(cs, a))\n    assert_array_equal(resolve_color(m, df, 'fill'), mpl.colors.to_rgba_array(cs, fa))", "ground_truth": ["mpl.colors.to_rgba(c, fa)"], "quality_analysis": {"complexity_score": 13, "left_complexity": 8, "right_complexity": 5, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1308", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_mapped", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_mapped(self):\n    values = {'x': (- 2.5), 'y': 0.0, 'z': 9999.1}\n\n    def f(x):\n        return np.array([values[x_i] for x_i in x])\n    m = self.mark(linewidth=Mappable(0))\n    scales = {'linewidth': f}\n    assert (m._resolve({'linewidth': 'z'}, 'linewidth', scales) == 9999.1)\n    df = pd.DataFrame({'linewidth': ['x', 'y', 'z']})\n    expected = np.array([(- 2.5), 0.0, 9999.1], float)\n    assert_array_equal(m._resolve(df, 'linewidth', scales), expected)", "masked_code": "def test_mapped(self):\n    values = {'x': (- 2.5), 'y': 0.0, 'z': 9999.1}\n\n    def f(x):\n        return np.array([values[x_i] for x_i in x])\n    m = self.mark(linewidth=Mappable(0))\n    scales = {'linewidth': f}\n    assert (m._resolve({'linewidth': 'z'}, 'linewidth', scales) == '???')\n    df = pd.DataFrame({'linewidth': ['x', 'y', 'z']})\n    expected = np.array([(- 2.5), 0.0, 9999.1], float)\n    assert_array_equal(m._resolve(df, 'linewidth', scales), expected)", "ground_truth": ["9999.1"], "quality_analysis": {"complexity_score": 11, "left_complexity": 10, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1305", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_rcparam", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_rcparam(self):\n    param = 'axes.edgecolor'\n    val = mpl.rcParams[param]\n    m = self.mark(linewidth=Mappable(rc=param))\n    assert (m._resolve({}, 'linewidth') == val)\n    df = pd.DataFrame(index=pd.RangeIndex(2))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "masked_code": "def test_rcparam(self):\n    param = 'axes.edgecolor'\n    val = mpl.rcParams[param]\n    m = self.mark(linewidth=Mappable(rc=param))\n    assert (m._resolve({}, 'linewidth') == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(2))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "ground_truth": ["val"], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1298", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0)) == '???')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "ground_truth": ["'<0>'"], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1299", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '???')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "ground_truth": ["'<-2.5>'"], "quality_analysis": {"complexity_score": 10, "left_complexity": 9, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1300", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == '???')\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "ground_truth": ["\"<''>\""], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1301", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '???')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "ground_truth": ["'<rc:axes.titlesize>'"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1302", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_repr", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '<depend:alpha>')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "masked_code": "def test_repr(self):\n    assert (str(Mappable(0)) == '<0>')\n    assert (str(Mappable((- 2.5))) == '<-2.5>')\n    assert (str(Mappable('')) == \"<''>\")\n    assert (str(Mappable(rc='axes.titlesize')) == '<rc:axes.titlesize>')\n    assert (str(Mappable(depend='alpha')) == '???')\n    assert (str(Mappable(auto=False)) == '<undefined>')", "ground_truth": ["'<depend:alpha>'"], "quality_analysis": {"complexity_score": 7, "left_complexity": 6, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1303", "reponame": "seaborn", "testpath": "tests/_marks/test_base.py", "testname": "test_base.py", "funcname": "test_value", "imports": ["from dataclasses import dataclass", "import numpy as np", "import pandas as pd", "import matplotlib as mpl", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._marks.base import Mark, Mappable, resolve_color"], "code": "def test_value(self):\n    val = (- 7.3)\n    m = self.mark(linewidth=val)\n    assert (m._resolve({}, 'linewidth') == val)\n    df = pd.DataFrame(index=pd.RangeIndex(5))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "masked_code": "def test_value(self):\n    val = (- 7.3)\n    m = self.mark(linewidth=val)\n    assert (m._resolve({}, 'linewidth') == '???')\n    df = pd.DataFrame(index=pd.RangeIndex(5))\n    assert_array_equal(m._resolve(df, 'linewidth'), np.full(len(df), val))", "ground_truth": ["val"], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestMappable"}
{"task_id": "seaborn_1345", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_binwidth", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_binwidth(self, long_df):\n    binwidth = 0.0001\n    df = pd.DataFrame({'x': np.linspace(1, 1.01, 100)})\n    h = Hist(binwidth=binwidth)\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    n_bins = bin_kws['bins']\n    (left, right) = bin_kws['range']\n    assert (((right - left) / n_bins) == pytest.approx(binwidth))", "masked_code": "def test_binwidth(self, long_df):\n    binwidth = 0.0001\n    df = pd.DataFrame({'x': np.linspace(1, 1.01, 100)})\n    h = Hist(binwidth=binwidth)\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    n_bins = bin_kws['bins']\n    (left, right) = bin_kws['range']\n    assert (((right - left) / n_bins) == '???')", "ground_truth": ["0.0001", "pytest.approx(binwidth)"], "quality_analysis": {"complexity_score": 11, "left_complexity": 7, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1359", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_common_bins_subset", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_common_bins_subset(self, long_df, triple_args):\n    df = pd.DataFrame({'x': np.arange(6), 'group': (['gr'] * 6), 'a': ['A', 'B', 'C', 'A', 'B', 'C'], 's': (['S'] * 6)})\n    h = Hist(common_bins=False)\n    out = h(df, *triple_args)\n    bins = []\n    for (_, out_part) in out.groupby('a'):\n        bins.append(tuple(out_part['x']))\n    assert (len(set(bins)) == out['a'].nunique())", "masked_code": "def test_common_bins_subset(self, long_df, triple_args):\n    df = pd.DataFrame({'x': np.arange(6), 'group': (['gr'] * 6), 'a': ['A', 'B', 'C', 'A', 'B', 'C'], 's': (['S'] * 6)})\n    h = Hist(common_bins=False)\n    out = h(df, *triple_args)\n    bins = []\n    for (_, out_part) in out.groupby('a'):\n        bins.append(tuple(out_part['x']))\n    assert (len(set(bins)) == '???')", "ground_truth": ["3", "out['a'].nunique()"], "quality_analysis": {"complexity_score": 10, "left_complexity": 7, "right_complexity": 3, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1355", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_common_norm_default", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_common_norm_default(self, long_df, triple_args):\n    df = pd.DataFrame({'x': np.arange(10), 'group': (['hello'] * 10), 'a': (['same'] * 10), 's': (['same'] * 10)})\n    h = Hist(stat='percent')\n    out = h(df, *triple_args)\n    assert (out['y'].sum() == pytest.approx(100))", "masked_code": "def test_common_norm_default(self, long_df, triple_args):\n    df = pd.DataFrame({'x': np.arange(10), 'group': (['hello'] * 10), 'a': (['same'] * 10), 's': (['same'] * 10)})\n    h = Hist(stat='percent')\n    out = h(df, *triple_args)\n    assert (out['y'].sum() == '???')", "ground_truth": ["100", "100.0", "pytest.approx(100)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1356", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_common_norm_false", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_common_norm_false(self, long_df, triple_args):\n    df = pd.DataFrame({'x': np.arange(9), 'group': (['m'] * 9), 'a': (['A', 'B', 'C'] * 3), 's': (['X', 'Y', 'Z'] * 3)})\n    h = Hist(stat='percent', common_norm=False)\n    out = h(df, *triple_args)\n    for (_, out_part) in out.groupby(['a', 's']):\n        assert (out_part['y'].sum() == pytest.approx(100))", "masked_code": "def test_common_norm_false(self, long_df, triple_args):\n    df = pd.DataFrame({'x': np.arange(9), 'group': (['m'] * 9), 'a': (['A', 'B', 'C'] * 3), 's': (['X', 'Y', 'Z'] * 3)})\n    h = Hist(stat='percent', common_norm=False)\n    out = h(df, *triple_args)\n    for (_, out_part) in out.groupby(['a', 's']):\n        assert (out_part['y'].sum() == '???')", "ground_truth": ["100", "100.0", "pytest.approx(100)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1357", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_common_norm_subset", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_common_norm_subset(self, long_df, triple_args):\n    df = pd.DataFrame({'x': np.arange(20), 'group': (['m'] * 20), 'a': [str(i) for i in range(20)], 's': (['single_group'] * 20)})\n    h = Hist(stat='percent', common_norm=['a'])\n    out = h(df, *triple_args)\n    for (_, out_part) in out.groupby('a'):\n        assert (out_part['y'].sum() == pytest.approx(100))", "masked_code": "def test_common_norm_subset(self, long_df, triple_args):\n    df = pd.DataFrame({'x': np.arange(20), 'group': (['m'] * 20), 'a': [str(i) for i in range(20)], 's': (['single_group'] * 20)})\n    h = Hist(stat='percent', common_norm=['a'])\n    out = h(df, *triple_args)\n    for (_, out_part) in out.groupby('a'):\n        assert (out_part['y'].sum() == '???')", "ground_truth": ["100", "100.0", "pytest.approx(100)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1351", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_count_stat", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_count_stat(self, long_df, single_args):\n    df = pd.DataFrame({'x': [42], 'group': ['alpha']})\n    h = Hist(stat='count')\n    out = h(df, *single_args)\n    assert (out['y'].sum() == len(df))", "masked_code": "def test_count_stat(self, long_df, single_args):\n    df = pd.DataFrame({'x': [42], 'group': ['alpha']})\n    h = Hist(stat='count')\n    out = h(df, *single_args)\n    assert (out['y'].sum() == '???')", "ground_truth": ["1", "len(df)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1354", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_cumulative_count", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_cumulative_count(self, long_df, single_args):\n    df = pd.DataFrame({'x': [7, 7, 7], 'group': ['x', 'x', 'x']})\n    h = Hist(stat='count', cumulative=True)\n    out = h(df, *single_args)\n    assert (out['y'].max() == len(df))", "masked_code": "def test_cumulative_count(self, long_df, single_args):\n    df = pd.DataFrame({'x': [7, 7, 7], 'group': ['x', 'x', 'x']})\n    h = Hist(stat='count', cumulative=True)\n    out = h(df, *single_args)\n    assert (out['y'].max() == '???')", "ground_truth": ["3", "len(df)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1347", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_discrete_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_discrete_bins(self, long_df):\n    df = pd.DataFrame({'x': np.array([(- 10), (- 5), 0, 5, 10, 0, 0, (- 5), 5])})\n    h = Hist(discrete=True)\n    x = df['x'].astype(int)\n    bin_kws = h._define_bin_params(df.assign(x=x), 'x', 'continuous')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "masked_code": "def test_discrete_bins(self, long_df):\n    df = pd.DataFrame({'x': np.array([(- 10), (- 5), 0, 5, 10, 0, 0, (- 5), 5])})\n    h = Hist(discrete=True)\n    x = df['x'].astype(int)\n    bin_kws = h._define_bin_params(df.assign(x=x), 'x', 'continuous')\n    assert (bin_kws['range'] == '???')\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "ground_truth": ["((x.min() - 0.5), (x.max() + 0.5))", "(-10.5, 10.5)"], "quality_analysis": {"complexity_score": 19, "left_complexity": 5, "right_complexity": 14, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1348", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_discrete_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_discrete_bins(self, long_df):\n    df = pd.DataFrame({'x': np.array([(- 10), (- 5), 0, 5, 10, 0, 0, (- 5), 5])})\n    h = Hist(discrete=True)\n    x = df['x'].astype(int)\n    bin_kws = h._define_bin_params(df.assign(x=x), 'x', 'continuous')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "masked_code": "def test_discrete_bins(self, long_df):\n    df = pd.DataFrame({'x': np.array([(- 10), (- 5), 0, 5, 10, 0, 0, (- 5), 5])})\n    h = Hist(discrete=True)\n    x = df['x'].astype(int)\n    bin_kws = h._define_bin_params(df.assign(x=x), 'x', 'continuous')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == '???')", "ground_truth": ["((x.max() - x.min()) + 1)", "np.int64(21)"], "quality_analysis": {"complexity_score": 16, "left_complexity": 5, "right_complexity": 11, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1349", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_discrete_bins_from_nominal_scale", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_discrete_bins_from_nominal_scale(self, rng):\n    h = Hist()\n    x = np.array([(- 8), (- 2), 0, 4, 8, 4, (- 2), 0, 8, (- 8)])\n    df = pd.DataFrame({'x': x})\n    bin_kws = h._define_bin_params(df, 'x', 'nominal')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "masked_code": "def test_discrete_bins_from_nominal_scale(self, rng):\n    h = Hist()\n    x = np.array([(- 8), (- 2), 0, 4, 8, 4, (- 2), 0, 8, (- 8)])\n    df = pd.DataFrame({'x': x})\n    bin_kws = h._define_bin_params(df, 'x', 'nominal')\n    assert (bin_kws['range'] == '???')\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "ground_truth": ["((x.min() - 0.5), (x.max() + 0.5))", "(-8.5, 8.5)"], "quality_analysis": {"complexity_score": 19, "left_complexity": 5, "right_complexity": 14, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1350", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_discrete_bins_from_nominal_scale", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_discrete_bins_from_nominal_scale(self, rng):\n    h = Hist()\n    x = np.array([(- 8), (- 2), 0, 4, 8, 4, (- 2), 0, 8, (- 8)])\n    df = pd.DataFrame({'x': x})\n    bin_kws = h._define_bin_params(df, 'x', 'nominal')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == ((x.max() - x.min()) + 1))", "masked_code": "def test_discrete_bins_from_nominal_scale(self, rng):\n    h = Hist()\n    x = np.array([(- 8), (- 2), 0, 4, 8, 4, (- 2), 0, 8, (- 8)])\n    df = pd.DataFrame({'x': x})\n    bin_kws = h._define_bin_params(df, 'x', 'nominal')\n    assert (bin_kws['range'] == ((x.min() - 0.5), (x.max() + 0.5)))\n    assert (bin_kws['bins'] == '???')", "ground_truth": ["((x.max() - x.min()) + 1)", "np.int64(17)"], "quality_analysis": {"complexity_score": 16, "left_complexity": 5, "right_complexity": 11, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1353", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_frequency_stat", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_frequency_stat(self, long_df, single_args):\n    df = pd.DataFrame({'x': [(- 7), (- 7), 3, 15, 3], 'group': ['a', 'b', 'c', 'a', 'b']})\n    h = Hist(stat='frequency')\n    out = h(df, *single_args)\n    assert ((out['y'] * out['space']).sum() == len(df))", "masked_code": "def test_frequency_stat(self, long_df, single_args):\n    df = pd.DataFrame({'x': [(- 7), (- 7), 3, 15, 3], 'group': ['a', 'b', 'c', 'a', 'b']})\n    h = Hist(stat='frequency')\n    out = h(df, *single_args)\n    assert ((out['y'] * out['space']).sum() == '???')", "ground_truth": ["5", "len(df)"], "quality_analysis": {"complexity_score": 7, "left_complexity": 3, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1343", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_int_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_int_bins(self, long_df):\n    n = 100\n    df = pd.DataFrame({'x': np.linspace((- 50), 50, 137)})\n    h = Hist(bins=n)\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    assert (bin_kws['range'] == (df['x'].min(), df['x'].max()))\n    assert (bin_kws['bins'] == n)", "masked_code": "def test_int_bins(self, long_df):\n    n = 100\n    df = pd.DataFrame({'x': np.linspace((- 50), 50, 137)})\n    h = Hist(bins=n)\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    assert (bin_kws['range'] == '???')\n    assert (bin_kws['bins'] == n)", "ground_truth": ["(-50.0, 50.0)", "(df['x'].min(), df['x'].max())"], "quality_analysis": {"complexity_score": 13, "left_complexity": 5, "right_complexity": 8, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1344", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_int_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_int_bins(self, long_df):\n    n = 100\n    df = pd.DataFrame({'x': np.linspace((- 50), 50, 137)})\n    h = Hist(bins=n)\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    assert (bin_kws['range'] == (df['x'].min(), df['x'].max()))\n    assert (bin_kws['bins'] == n)", "masked_code": "def test_int_bins(self, long_df):\n    n = 100\n    df = pd.DataFrame({'x': np.linspace((- 50), 50, 137)})\n    h = Hist(bins=n)\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    assert (bin_kws['range'] == (df['x'].min(), df['x'].max()))\n    assert (bin_kws['bins'] == '???')", "ground_truth": ["100", "n"], "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1352", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_percent_stat", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_percent_stat(self, long_df, single_args):\n    df = pd.DataFrame({'x': [5, 5], 'group': ['w', 'w']})\n    h = Hist(stat='percent')\n    out = h(df, *single_args)\n    assert (out['y'].sum() == 100)", "masked_code": "def test_percent_stat(self, long_df, single_args):\n    df = pd.DataFrame({'x': [5, 5], 'group': ['w', 'w']})\n    h = Hist(stat='percent')\n    out = h(df, *single_args)\n    assert (out['y'].sum() == '???')", "ground_truth": ["100"], "quality_analysis": {"complexity_score": 4, "left_complexity": 3, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1341", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_string_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_string_bins(self, long_df):\n    df = pd.DataFrame({'x': np.random.uniform((- 100), 100, 1024)})\n    h = Hist(bins='sturges')\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    assert (bin_kws['range'] == (df['x'].min(), df['x'].max()))\n    assert (bin_kws['bins'] == int((np.ceil(np.log2(len(df))) + 1)))", "masked_code": "def test_string_bins(self, long_df):\n    df = pd.DataFrame({'x': np.random.uniform((- 100), 100, 1024)})\n    h = Hist(bins='sturges')\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    assert (bin_kws['range'] == '???')\n    assert (bin_kws['bins'] == int((np.ceil(np.log2(len(df))) + 1)))", "ground_truth": ["(-99.92522486387836, 99.89295959477323)", "(df['x'].min(), df['x'].max())"], "quality_analysis": {"complexity_score": 13, "left_complexity": 5, "right_complexity": 8, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_1342", "reponame": "seaborn", "testpath": "tests/_stats/test_counting.py", "testname": "test_counting.py", "funcname": "test_string_bins", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.counting import Hist, Count"], "code": "def test_string_bins(self, long_df):\n    df = pd.DataFrame({'x': np.random.uniform((- 100), 100, 1024)})\n    h = Hist(bins='sturges')\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    assert (bin_kws['range'] == (df['x'].min(), df['x'].max()))\n    assert (bin_kws['bins'] == int((np.ceil(np.log2(len(df))) + 1)))", "masked_code": "def test_string_bins(self, long_df):\n    df = pd.DataFrame({'x': np.random.uniform((- 100), 100, 1024)})\n    h = Hist(bins='sturges')\n    bin_kws = h._define_bin_params(df, 'x', 'continuous')\n    assert (bin_kws['range'] == (df['x'].min(), df['x'].max()))\n    assert (bin_kws['bins'] == '???')", "ground_truth": ["11", "int((np.ceil(np.log2(len(df))) + 1))"], "quality_analysis": {"complexity_score": 21, "left_complexity": 5, "right_complexity": 16, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestHist"}
{"task_id": "seaborn_628", "reponame": "seaborn", "testpath": "tests/test_docstrings.py", "testname": "test_docstrings.py", "funcname": "test_from_dict", "imports": ["from seaborn._docstrings import DocstringComponents"], "code": "def test_from_dict(self):\n    obj = DocstringComponents(EXAMPLE_DICT)\n    assert (obj.param_large_number == 'num : int\\n    A very large number parameter.')\n    assert (obj.param_empty_string == 'empty : str\\n    An empty string parameter.')\n    assert (obj.param_negative_float == 'nfloat : float\\n    A negative floating point parameter.')", "masked_code": "def test_from_dict(self):\n    obj = DocstringComponents(EXAMPLE_DICT)\n    assert (obj.param_large_number == '???')\n    assert (obj.param_empty_string == 'empty : str\\n    An empty string parameter.')\n    assert (obj.param_negative_float == 'nfloat : float\\n    A negative floating point parameter.')", "ground_truth": ["'num : int\\n    A very large number parameter.'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestDocstringComponents"}
{"task_id": "seaborn_630", "reponame": "seaborn", "testpath": "tests/test_docstrings.py", "testname": "test_docstrings.py", "funcname": "test_from_function", "imports": ["from seaborn._docstrings import DocstringComponents"], "code": "def test_from_function(self):\n    obj = DocstringComponents.from_function_params(example_func)\n    assert (obj.num == 'num : int\\n    A function parameter with a large value.')\n    assert (obj.empty == 'empty : str\\n    A function parameter that may be empty.')\n    assert (obj.nfloat == 'nfloat : float\\n    A negative floating point.')", "masked_code": "def test_from_function(self):\n    obj = DocstringComponents.from_function_params(example_func)\n    assert (obj.num == '???')\n    assert (obj.empty == 'empty : str\\n    A function parameter that may be empty.')\n    assert (obj.nfloat == 'nfloat : float\\n    A negative floating point.')", "ground_truth": ["'num : int\\n    A function parameter with a large value.'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestDocstringComponents"}
{"task_id": "seaborn_631", "reponame": "seaborn", "testpath": "tests/test_docstrings.py", "testname": "test_docstrings.py", "funcname": "test_from_method", "imports": ["from seaborn._docstrings import DocstringComponents"], "code": "def test_from_method(self):\n    obj = DocstringComponents.from_function_params(ExampleClass.example_method)\n    assert (obj.num == 'num : int\\n    A method parameter taking a large number.')\n    assert (obj.empty == 'empty : str\\n    A method parameter that may be an empty string.')\n    assert (obj.nfloat == 'nfloat : float\\n    A method parameter that may be negative.')", "masked_code": "def test_from_method(self):\n    obj = DocstringComponents.from_function_params(ExampleClass.example_method)\n    assert (obj.num == '???')\n    assert (obj.empty == 'empty : str\\n    A method parameter that may be an empty string.')\n    assert (obj.nfloat == 'nfloat : float\\n    A method parameter that may be negative.')", "ground_truth": ["'num : int\\n    A method parameter taking a large number.'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestDocstringComponents"}
{"task_id": "seaborn_629", "reponame": "seaborn", "testpath": "tests/test_docstrings.py", "testname": "test_docstrings.py", "funcname": "test_from_nested_components", "imports": ["from seaborn._docstrings import DocstringComponents"], "code": "def test_from_nested_components(self):\n    obj_inner = DocstringComponents(EXAMPLE_DICT)\n    obj_outer = DocstringComponents.from_nested_components(inner=obj_inner)\n    assert (obj_outer.inner.param_large_number == 'num : int\\n    A very large number parameter.')\n    assert (obj_outer.inner.param_empty_string == 'empty : str\\n    An empty string parameter.')\n    assert (obj_outer.inner.param_negative_float == 'nfloat : float\\n    A negative floating point parameter.')", "masked_code": "def test_from_nested_components(self):\n    obj_inner = DocstringComponents(EXAMPLE_DICT)\n    obj_outer = DocstringComponents.from_nested_components(inner=obj_inner)\n    assert (obj_outer.inner.param_large_number == '???')\n    assert (obj_outer.inner.param_empty_string == 'empty : str\\n    An empty string parameter.')\n    assert (obj_outer.inner.param_negative_float == 'nfloat : float\\n    A negative floating point parameter.')", "ground_truth": ["'num : int\\n    A very large number parameter.'"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestDocstringComponents"}
{"task_id": "seaborn_999", "reponame": "seaborn", "testpath": "tests/_core/test_groupby.py", "testname": "test_groupby.py", "funcname": "test_init_from_dict", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy"], "code": "def test_init_from_dict():\n    order = {'': [0, (- 1), 1.1], 10: None, (- 4.5): ['alpha', '', None], 'Z': ['foo', 'bar']}\n    g = GroupBy(order)\n    assert (g.order == order)", "masked_code": "def test_init_from_dict():\n    order = {'': [0, (- 1), 1.1], 10: None, (- 4.5): ['alpha', '', None], 'Z': ['foo', 'bar']}\n    g = GroupBy(order)\n    assert (g.order == '???')", "ground_truth": ["order", "{'': [0, -1, 1.1], '10': None, '-4.5': ['alpha', '', None], 'Z': ['foo', 'bar']}"], "quality_analysis": {"complexity_score": 3, "left_complexity": 2, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_998", "reponame": "seaborn", "testpath": "tests/_core/test_groupby.py", "testname": "test_groupby.py", "funcname": "test_init_from_list", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal", "from seaborn._core.groupby import GroupBy"], "code": "def test_init_from_list():\n    g = GroupBy(['', 0, (- 5), 1.23, 'Z'])\n    assert (g.order == {'': None, 0: None, (- 5): None, 1.23: None, 'Z': None})", "masked_code": "def test_init_from_list():\n    g = GroupBy(['', 0, (- 5), 1.23, 'Z'])\n    assert (g.order == '???')", "ground_truth": ["{'': None, '0': None, '-5': None, '1.23': None, 'Z': None}", "{'': None, 0: None, (- 5): None, 1.23: None, 'Z': None}"], "quality_analysis": {"complexity_score": 17, "left_complexity": 2, "right_complexity": 15, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_715", "reponame": "seaborn", "testpath": "tests/test_miscplot.py", "testname": "test_miscplot.py", "funcname": "test_palplot_size", "imports": ["import matplotlib.pyplot as plt", "from seaborn import miscplot as misc", "from seaborn.palettes import color_palette", "from .test_utils import _network"], "code": "def test_palplot_size(self):\n    pal_empty = []\n    misc.palplot(pal_empty)\n    size_empty = plt.gcf().get_size_inches()\n    assert (tuple(size_empty) == (0, 1))\n    pal_large = color_palette('husl', 20)\n    misc.palplot(pal_large)\n    size_large = plt.gcf().get_size_inches()\n    assert (tuple(size_large) == (20, 1))\n    pal_float = color_palette('husl', 0)\n    misc.palplot(pal_float, 1.5)\n    size_float = plt.gcf().get_size_inches()\n    assert (tuple(size_float) == (0, 1.5))\n    pal_single = color_palette('husl', 1)\n    import pytest\n    with pytest.raises(ValueError):\n        misc.palplot(pal_single, (- 2))\n    pal6 = color_palette('husl', 6)\n    misc.palplot(pal6, 2.5)\n    size6 = plt.gcf().get_size_inches()\n    assert (tuple(size6) == (15, 2.5))", "masked_code": "def test_palplot_size(self):\n    pal_empty = []\n    misc.palplot(pal_empty)\n    size_empty = plt.gcf().get_size_inches()\n    assert (tuple(size_empty) == '???')\n    pal_large = color_palette('husl', 20)\n    misc.palplot(pal_large)\n    size_large = plt.gcf().get_size_inches()\n    assert (tuple(size_large) == (20, 1))\n    pal_float = color_palette('husl', 0)\n    misc.palplot(pal_float, 1.5)\n    size_float = plt.gcf().get_size_inches()\n    assert (tuple(size_float) == (0, 1.5))\n    pal_single = color_palette('husl', 1)\n    import pytest\n    with pytest.raises(ValueError):\n        misc.palplot(pal_single, (- 2))\n    pal6 = color_palette('husl', 6)\n    misc.palplot(pal6, 2.5)\n    size6 = plt.gcf().get_size_inches()\n    assert (tuple(size6) == (15, 2.5))", "ground_truth": ["(0, 1)"], "quality_analysis": {"complexity_score": 8, "left_complexity": 4, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestPalPlot"}
{"task_id": "seaborn_716", "reponame": "seaborn", "testpath": "tests/test_miscplot.py", "testname": "test_miscplot.py", "funcname": "test_palplot_size", "imports": ["import matplotlib.pyplot as plt", "from seaborn import miscplot as misc", "from seaborn.palettes import color_palette", "from .test_utils import _network"], "code": "def test_palplot_size(self):\n    pal_empty = []\n    misc.palplot(pal_empty)\n    size_empty = plt.gcf().get_size_inches()\n    assert (tuple(size_empty) == (0, 1))\n    pal_large = color_palette('husl', 20)\n    misc.palplot(pal_large)\n    size_large = plt.gcf().get_size_inches()\n    assert (tuple(size_large) == (20, 1))\n    pal_float = color_palette('husl', 0)\n    misc.palplot(pal_float, 1.5)\n    size_float = plt.gcf().get_size_inches()\n    assert (tuple(size_float) == (0, 1.5))\n    pal_single = color_palette('husl', 1)\n    import pytest\n    with pytest.raises(ValueError):\n        misc.palplot(pal_single, (- 2))\n    pal6 = color_palette('husl', 6)\n    misc.palplot(pal6, 2.5)\n    size6 = plt.gcf().get_size_inches()\n    assert (tuple(size6) == (15, 2.5))", "masked_code": "def test_palplot_size(self):\n    pal_empty = []\n    misc.palplot(pal_empty)\n    size_empty = plt.gcf().get_size_inches()\n    assert (tuple(size_empty) == (0, 1))\n    pal_large = color_palette('husl', 20)\n    misc.palplot(pal_large)\n    size_large = plt.gcf().get_size_inches()\n    assert (tuple(size_large) == '???')\n    pal_float = color_palette('husl', 0)\n    misc.palplot(pal_float, 1.5)\n    size_float = plt.gcf().get_size_inches()\n    assert (tuple(size_float) == (0, 1.5))\n    pal_single = color_palette('husl', 1)\n    import pytest\n    with pytest.raises(ValueError):\n        misc.palplot(pal_single, (- 2))\n    pal6 = color_palette('husl', 6)\n    misc.palplot(pal6, 2.5)\n    size6 = plt.gcf().get_size_inches()\n    assert (tuple(size6) == (15, 2.5))", "ground_truth": ["(20, 1)"], "quality_analysis": {"complexity_score": 8, "left_complexity": 4, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestPalPlot"}
{"task_id": "seaborn_717", "reponame": "seaborn", "testpath": "tests/test_miscplot.py", "testname": "test_miscplot.py", "funcname": "test_palplot_size", "imports": ["import matplotlib.pyplot as plt", "from seaborn import miscplot as misc", "from seaborn.palettes import color_palette", "from .test_utils import _network"], "code": "def test_palplot_size(self):\n    pal_empty = []\n    misc.palplot(pal_empty)\n    size_empty = plt.gcf().get_size_inches()\n    assert (tuple(size_empty) == (0, 1))\n    pal_large = color_palette('husl', 20)\n    misc.palplot(pal_large)\n    size_large = plt.gcf().get_size_inches()\n    assert (tuple(size_large) == (20, 1))\n    pal_float = color_palette('husl', 0)\n    misc.palplot(pal_float, 1.5)\n    size_float = plt.gcf().get_size_inches()\n    assert (tuple(size_float) == (0, 1.5))\n    pal_single = color_palette('husl', 1)\n    import pytest\n    with pytest.raises(ValueError):\n        misc.palplot(pal_single, (- 2))\n    pal6 = color_palette('husl', 6)\n    misc.palplot(pal6, 2.5)\n    size6 = plt.gcf().get_size_inches()\n    assert (tuple(size6) == (15, 2.5))", "masked_code": "def test_palplot_size(self):\n    pal_empty = []\n    misc.palplot(pal_empty)\n    size_empty = plt.gcf().get_size_inches()\n    assert (tuple(size_empty) == (0, 1))\n    pal_large = color_palette('husl', 20)\n    misc.palplot(pal_large)\n    size_large = plt.gcf().get_size_inches()\n    assert (tuple(size_large) == (20, 1))\n    pal_float = color_palette('husl', 0)\n    misc.palplot(pal_float, 1.5)\n    size_float = plt.gcf().get_size_inches()\n    assert (tuple(size_float) == '???')\n    pal_single = color_palette('husl', 1)\n    import pytest\n    with pytest.raises(ValueError):\n        misc.palplot(pal_single, (- 2))\n    pal6 = color_palette('husl', 6)\n    misc.palplot(pal6, 2.5)\n    size6 = plt.gcf().get_size_inches()\n    assert (tuple(size6) == (15, 2.5))", "ground_truth": ["(0, 1.5)"], "quality_analysis": {"complexity_score": 8, "left_complexity": 4, "right_complexity": 4, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestPalPlot"}
{"task_id": "seaborn_1368", "reponame": "seaborn", "testpath": "tests/_stats/test_regression.py", "testname": "test_regression.py", "funcname": "test_one_grouper", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from numpy.testing import assert_array_equal, assert_array_almost_equal", "from pandas.testing import assert_frame_equal", "from seaborn._core.groupby import GroupBy", "from seaborn._stats.regression import PolyFit"], "code": "def test_one_grouper(self, df):\n    df_aug = pd.DataFrame({'x': np.concatenate([np.array([(- 1000), 0, 1000]), np.linspace((- 10), 10, 10), np.repeat(0.0, 5), np.array([np.nan, 5, (- 5)]), np.array([10000000000.0, (- 10000000000.0), 3.14159, (- 2.71828)])]), 'y': np.concatenate([np.array([50, (- 50), 0]), np.linspace(10, (- 10), 10), np.repeat((- 123.456), 5), np.array([np.nan, 1, (- 1)]), np.array([100000.0, (- 100000.0), 2.71828, (- 3.14159)])]), 'color': ((((['a', 'b', 'c'] + (['a'] * 10)) + (['b'] * 5)) + ['c', 'a', 'b']) + ['a', 'c', 'b', 'c']), 'group': (((((['special', 'zero', 'special'] + (['g1'] * 5)) + (['g2'] * 5)) + (['g1'] * 5)) + ['g1', 'g2', 'g2']) + ['huge', 'huge', 'huge', 'huge'])})\n    target_length = ((((3 + 10) + 5) + 3) + 4)\n    assert (len(df_aug['x']) == target_length)\n    groupby = GroupBy(['group'])\n    gridsize = 7\n    res = PolyFit(gridsize=gridsize)(df_aug, groupby, 'x', {})\n    assert (res.columns.to_list() == ['x', 'y', 'group'])\n    ngroups = df_aug['group'].nunique()\n    assert_array_equal(res.index, np.arange(res.index.size))\n    for (_, part) in res.groupby('group'):\n        grid = np.linspace(part['x'].min(), part['x'].max(), gridsize)\n        assert_array_equal(part['x'], grid)\n        assert part['y'].diff().diff().dropna().abs().gt(0).any()", "masked_code": "def test_one_grouper(self, df):\n    df_aug = pd.DataFrame({'x': np.concatenate([np.array([(- 1000), 0, 1000]), np.linspace((- 10), 10, 10), np.repeat(0.0, 5), np.array([np.nan, 5, (- 5)]), np.array([10000000000.0, (- 10000000000.0), 3.14159, (- 2.71828)])]), 'y': np.concatenate([np.array([50, (- 50), 0]), np.linspace(10, (- 10), 10), np.repeat((- 123.456), 5), np.array([np.nan, 1, (- 1)]), np.array([100000.0, (- 100000.0), 2.71828, (- 3.14159)])]), 'color': ((((['a', 'b', 'c'] + (['a'] * 10)) + (['b'] * 5)) + ['c', 'a', 'b']) + ['a', 'c', 'b', 'c']), 'group': (((((['special', 'zero', 'special'] + (['g1'] * 5)) + (['g2'] * 5)) + (['g1'] * 5)) + ['g1', 'g2', 'g2']) + ['huge', 'huge', 'huge', 'huge'])})\n    target_length = ((((3 + 10) + 5) + 3) + 4)\n    assert (len(df_aug['x']) == '???')\n    groupby = GroupBy(['group'])\n    gridsize = 7\n    res = PolyFit(gridsize=gridsize)(df_aug, groupby, 'x', {})\n    assert (res.columns.to_list() == ['x', 'y', 'group'])\n    ngroups = df_aug['group'].nunique()\n    assert_array_equal(res.index, np.arange(res.index.size))\n    for (_, part) in res.groupby('group'):\n        grid = np.linspace(part['x'].min(), part['x'].max(), gridsize)\n        assert_array_equal(part['x'], grid)\n        assert part['y'].diff().diff().dropna().abs().gt(0).any()", "ground_truth": ["25", "target_length"], "quality_analysis": {"complexity_score": 9, "left_complexity": 8, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": "TestPolyFit"}
{"task_id": "seaborn_1156", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == '???')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1157", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == '???')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1158", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == '???')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1159", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == '???')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1160", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == '???')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1161", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == '???')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1162", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == '???')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1163", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == '???')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'categorical'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1164", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == '???')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1165", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == '???')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'categorical'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1166", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == '???')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'boolean'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1167", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == '???')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'categorical'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1168", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == '???')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'categorical'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1169", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == '???')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'categorical'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1170", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == '???')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'categorical'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1171", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == '???')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'boolean'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1172", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == '???')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1173", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == '???')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'numeric'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1174", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == '???')\n    assert (variable_type(s.astype(object)) == 'datetime')", "ground_truth": ["'datetime'"], "quality_analysis": {"complexity_score": 5, "left_complexity": 4, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "seaborn_1175", "reponame": "seaborn", "testpath": "tests/_core/test_rules.py", "testname": "test_rules.py", "funcname": "test_variable_type", "imports": ["import numpy as np", "import pandas as pd", "import pytest", "from seaborn._core.rules import VarType, variable_type, categorical_order"], "code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == 'datetime')", "masked_code": "def test_variable_type():\n    s = pd.Series([0, (- 10), (2 ** 63), np.nan, np.inf, (- np.inf), 3.14])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s.astype(object)) == 'numeric')\n    s = pd.Series([1.5, 2, None, 3.0, pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([np.nan, pd.NA])\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([pd.NA, pd.NA], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(- 100), 0, pd.NA, 42], dtype='Int64')\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series([(10 ** 10), (- (10 ** 12)), pd.NA, np.nan], dtype=object)\n    assert (variable_type(s) == 'numeric')\n    s = pd.Series(['', '  ', 'hello', '\ud83c\udf1f'])\n    assert (variable_type(s) == 'categorical')\n    s = pd.Series([True, True, False, True, False])\n    assert (variable_type(s) == 'numeric')\n    assert (variable_type(s, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    s = pd.to_timedelta([0, '2 days', np.nan, '1 min'])\n    s = pd.Series(s)\n    assert (variable_type(s) == 'categorical')\n    s_cat = pd.Series([True, False, 1.0, 0.0, np.nan], dtype='category')\n    assert (variable_type(s_cat, boolean_type='categorical') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='numeric') == 'categorical')\n    assert (variable_type(s_cat, boolean_type='boolean') == 'categorical')\n    s = pd.Series([1, 0, 1, 0])\n    assert (variable_type(s, boolean_type='boolean') == 'boolean')\n    assert (variable_type(s, boolean_type='boolean', strict_boolean=True) == 'numeric')\n    s = pd.Series([1, 0, (- 1), 2])\n    assert (variable_type(s, boolean_type='boolean') == 'numeric')\n    s = pd.Series([pd.Timestamp('1970-01-01'), pd.Timestamp('2038-01-19')])\n    assert (variable_type(s) == 'datetime')\n    assert (variable_type(s.astype(object)) == '???')", "ground_truth": ["'datetime'"], "quality_analysis": {"complexity_score": 8, "left_complexity": 7, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
