{"task_id": "pulp_0", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "funcname": "test_lpdot", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_lpdot():\n    x = LpVariable(name='x')\n    product = lpDot((- 3.5), (4 * x))\n    assert (product.toDict() == [{'name': 'x', 'value': (- 14.0)}])", "masked_code": "def test_lpdot():\n    x = LpVariable(name='x')\n    product = lpDot((- 3.5), (4 * x))\n    assert (product.toDict() == '???')", "ground_truth": ["[{'name': 'x', 'value': (- 14.0)}]", "[{'name': 'x', 'value': -14.0}]"], "quality_analysis": {"complexity_score": 14, "left_complexity": 3, "right_complexity": 11, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pulp_1", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "funcname": "test_pulp_002", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_pulp_002():\n    '\\n    Test the lpDot operation with more diverse data\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [0, (- 4), 5.5]\n    assert (dict(lpDot([x, y, z], a)) == {y: (- 4), z: 5.5})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {y: (- 8), z: 11.0})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {y: (- 4), z: 1.5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {y: (- 4), z: 1.5})", "masked_code": "def test_pulp_002():\n    '\\n    Test the lpDot operation with more diverse data\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [0, (- 4), 5.5]\n    assert (dict(lpDot([x, y, z], a)) == '???')\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {y: (- 8), z: 11.0})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {y: (- 4), z: 1.5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {y: (- 4), z: 1.5})", "ground_truth": ["{y: (- 4), z: 5.5}", "{y: -4, z: 5.5}"], "quality_analysis": {"complexity_score": 21, "left_complexity": 12, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pulp_2", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "funcname": "test_pulp_002", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_pulp_002():\n    '\\n    Test the lpDot operation with more diverse data\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [0, (- 4), 5.5]\n    assert (dict(lpDot([x, y, z], a)) == {y: (- 4), z: 5.5})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {y: (- 8), z: 11.0})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {y: (- 4), z: 1.5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {y: (- 4), z: 1.5})", "masked_code": "def test_pulp_002():\n    '\\n    Test the lpDot operation with more diverse data\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [0, (- 4), 5.5]\n    assert (dict(lpDot([x, y, z], a)) == {y: (- 4), z: 5.5})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == '???')\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {y: (- 4), z: 1.5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {y: (- 4), z: 1.5})", "ground_truth": ["{y: (- 8), z: 11.0}", "{y: -8, z: 11.0}"], "quality_analysis": {"complexity_score": 30, "left_complexity": 21, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pulp_3", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "funcname": "test_pulp_002", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_pulp_002():\n    '\\n    Test the lpDot operation with more diverse data\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [0, (- 4), 5.5]\n    assert (dict(lpDot([x, y, z], a)) == {y: (- 4), z: 5.5})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {y: (- 8), z: 11.0})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {y: (- 4), z: 1.5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {y: (- 4), z: 1.5})", "masked_code": "def test_pulp_002():\n    '\\n    Test the lpDot operation with more diverse data\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [0, (- 4), 5.5]\n    assert (dict(lpDot([x, y, z], a)) == {y: (- 4), z: 5.5})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {y: (- 8), z: 11.0})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == '???')\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {y: (- 4), z: 1.5})", "ground_truth": ["{y: (- 4), z: 1.5}", "{y: -4, z: 1.5}"], "quality_analysis": {"complexity_score": 27, "left_complexity": 18, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
{"task_id": "pulp_4", "reponame": "pulp", "testpath": "pulp/tests/test_lpdot.py", "testname": "test_lpdot.py", "funcname": "test_pulp_002", "imports": ["from pulp import lpDot, LpVariable"], "code": "def test_pulp_002():\n    '\\n    Test the lpDot operation with more diverse data\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [0, (- 4), 5.5]\n    assert (dict(lpDot([x, y, z], a)) == {y: (- 4), z: 5.5})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {y: (- 8), z: 11.0})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {y: (- 4), z: 1.5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == {y: (- 4), z: 1.5})", "masked_code": "def test_pulp_002():\n    '\\n    Test the lpDot operation with more diverse data\\n    '\n    x = LpVariable('x')\n    y = LpVariable('y')\n    z = LpVariable('z')\n    a = [0, (- 4), 5.5]\n    assert (dict(lpDot([x, y, z], a)) == {y: (- 4), z: 5.5})\n    assert (dict(lpDot([(2 * x), (2 * y), (2 * z)], a)) == {y: (- 8), z: 11.0})\n    assert (dict(lpDot([(x + y), (y + z), z], a)) == {y: (- 4), z: 1.5})\n    assert (dict(lpDot(a, [(x + y), (y + z), z])) == '???')", "ground_truth": ["{y: (- 4), z: 1.5}", "{y: -4, z: 1.5}"], "quality_analysis": {"complexity_score": 27, "left_complexity": 18, "right_complexity": 9, "is_quality": true, "reason": "High quality assertion"}, "classname": null}
