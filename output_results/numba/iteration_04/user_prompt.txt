## Current Project Structure
```
repo_to_process/
├── .github/
│   ├── ISSUE_TEMPLATE/
│   │   ├── Bug_report.md
│   │   ├── config.yml
│   │   ├── Feature_request.md
│   │   ├── first_rc_checklist.md
│   │   └── sub_rc_checklist.md
│   ├── workflows/
│   │   ├── conda_workflow_matrix.json
│   │   ├── numba_linux-64_conda_builder.yml
│   │   ├── numba_linux-64_wheel_builder.yml
│   │   ├── numba_linux-arm64_conda_builder.yml
│   │   ├── numba_linux-arm64_wheel_builder.yml
│   │   ├── numba_osx-64_conda_builder.yml
│   │   ├── numba_osx-64_wheel_builder.yml
│   │   ├── numba_osx-arm64_conda_builder.yml
│   │   ├── numba_osx-arm64_wheel_builder.yml
│   │   ├── numba_win-64_builder.yml
│   │   ├── numba_win-64_wheel_builder.yml
│   │   ├── stale.yml
│   │   ├── towncrier.yml
│   │   └── wheel_workflow_matrix.json
│   │       └── ... (9 more files)
│   ├── CODEOWNERS
│   └── PULL_REQUEST_TEMPLATE.md
├── bin/
│   └── numba
├── buildscripts/
│   ├── azure/
│   │   ├── azure-linux-macos.yml
│   │   └── azure-windows.yml
│   ├── condarecipe.local/
│   │   ├── bld.bat
│   │   ├── build.sh
│   │   ├── conda_build_config.yaml
│   │   ├── license.txt
│   │   ├── meta.yaml
│   │   ├── run_test.bat
│   │   └── run_test.sh
│   │       └── ... (2 more files)
│   ├── github/
│   │   ├── build_wheel_linux.sh
│   │   ├── MacOSX10.10.sdk.checksum
│   │   ├── patch_wheel_dylib.py
│   │   ├── repair_wheel_linux.sh
│   │   └── setup_platform.sh
│   ├── gpuci/
│   │   ├── axis.yaml
│   │   └── build.sh
│   └── incremental/
│       ├── after_success.sh
│       ├── build.cmd
│       ├── build.sh
│       ├── install_miniconda.sh
│       ├── MacOSX10.10.sdk.checksum
│       ├── setup_conda_environment.cmd
│       ├── setup_conda_environment.sh
│       └── test.sh
│           └── ... (3 more files)
├── contrib/
│   └── valgrind-numba.supp
├── docs/
│   ├── _static/
│   │   ├── js/
│   │   │   └── modernizr.min.js
│   │   ├── numba-blue-icon-rgb.svg
│   │   ├── numba-white-icon-rgb.svg
│   │   └── rtd-overrides.css
│   ├── _templates/
│   │   └── EMPTY
│   ├── dagmap/
│   │   ├── dagmap.yaml
│   │   ├── jquery.graphviz.svg.js
│   │   ├── README.md
│   │   ├── render.py
│   │   └── template.html
│   ├── source/
│   │   ├── _ext/
│   │   │   └── ghfiles.py
│   │   ├── cuda/
│   │   │   ├── bindings.rst
│   │   │   ├── caching.rst
│   │   │   ├── cooperative_groups.rst
│   │   │   ├── cuda_array_interface.rst
│   │   │   ├── cuda_compilation.rst
│   │   │   ├── cuda_ffi.rst
│   │   │   ├── cudapysupported.rst
│   │   │   ├── device-functions.rst
│   │   │   ├── device-management.rst
│   │   │   ├── examples.rst
│   │   │   ├── external-memory.rst
│   │   │   ├── faq.rst
│   │   │   ├── fastmath.rst
│   │   │   ├── index.rst
│   │   │   ├── intrinsics.rst
│   │   │   ├── ipc.rst
│   │   │   ├── kernels.rst
│   │   │   ├── laplace_final.svg
│   │   │   ├── laplace_initial.svg
│   │   │   ├── memory.rst
│   │   │   ├── minor_version_compatibility.rst
│   │   │   ├── overview.rst
│   │   │   ├── random.rst
│   │   │   ├── reduction.rst
│   │   │   ├── simulator.rst
│   │   │   └── ufunc.rst
│   │   │       └── ... (21 more files)
│   │   ├── cuda-reference/
│   │   │   ├── host.rst
│   │   │   ├── index.rst
│   │   │   ├── kernel.rst
│   │   │   ├── libdevice.rst
│   │   │   ├── memory.rst
│   │   │   └── types.rst
│   │   │       └── ... (1 more files)
│   │   ├── developer/
│   │   │   ├── architecture.rst
│   │   │   ├── bytecode.rst
│   │   │   ├── caching.rst
│   │   │   ├── compiler_pass_example.py
│   │   │   ├── contributing.rst
│   │   │   ├── custom_pipeline.rst
│   │   │   ├── debugging.rst
│   │   │   ├── dispatching.rst
│   │   │   ├── environment.rst
│   │   │   ├── event_api.rst
│   │   │   ├── generators.rst
│   │   │   ├── hashing.rst
│   │   │   ├── index.rst
│   │   │   ├── inline_example.py
│   │   │   ├── inline_overload_example.py
│   │   │   ├── inlining.rst
│   │   │   ├── listings.rst
│   │   │   ├── literal.rst
│   │   │   ├── live_variable_analysis.rst
│   │   │   ├── llvm_timings.rst
│   │   │   ├── mission.rst
│   │   │   ├── numba-runtime.rst
│   │   │   ├── release.rst
│   │   │   ├── repomap.rst
│   │   │   ├── rewrites.rst
│   │   │   ├── stencil.rst
│   │   │   ├── sys_monitoring.rst
│   │   │   ├── target_extension.rst
│   │   │   └── threading_implementation.rst
│   │   │       └── ... (24 more files)
│   │   ├── extending/
│   │   │   ├── entrypoints.rst
│   │   │   ├── high-level.rst
│   │   │   ├── index.rst
│   │   │   ├── interval-example.rst
│   │   │   ├── low-level.rst
│   │   │   ├── mynorm.py
│   │   │   ├── overloading-guide.rst
│   │   │   └── template.py
│   │   │       └── ... (3 more files)
│   │   ├── proposals/
│   │   │   ├── cfunc.rst
│   │   │   ├── extension-points.rst
│   │   │   ├── external-memory-management.rst
│   │   │   ├── index.rst
│   │   │   ├── integer-typing.rst
│   │   │   ├── jit-classes.rst
│   │   │   ├── np-where-override.py
│   │   │   ├── recursion_callstack.svg
│   │   │   ├── type-inference.rst
│   │   │   └── typing_recursion.rst
│   │   │       └── ... (5 more files)
│   │   ├── reference/
│   │   │   ├── aot-compilation.rst
│   │   │   ├── deprecation.rst
│   │   │   ├── envvars.rst
│   │   │   ├── fpsemantics.rst
│   │   │   ├── index.rst
│   │   │   ├── jit-compilation.rst
│   │   │   ├── numpysupported.rst
│   │   │   ├── pysemantics.rst
│   │   │   ├── pysupported.rst
│   │   │   ├── types.rst
│   │   │   └── utils.rst
│   │   │       └── ... (6 more files)
│   │   ├── release/
│   │   │   ├── 0.58.0-notes.rst
│   │   │   ├── 0.58.1-notes.rst
│   │   │   ├── 0.59.0-notes.rst
│   │   │   ├── 0.59.1-notes.rst
│   │   │   ├── 0.60.0-notes.rst
│   │   │   ├── 0.61.0-notes.rst
│   │   │   ├── 0.61.1-notes.rst
│   │   │   └── 0.61.2-notes.rst
│   │   │       └── ... (3 more files)
│   │   ├── user/
│   │   │   ├── 5minguide.rst
│   │   │   ├── cfunc.rst
│   │   │   ├── cli.rst
│   │   │   ├── code_coverage.rst
│   │   │   ├── examples.rst
│   │   │   ├── faq.rst
│   │   │   ├── index.rst
│   │   │   ├── installing.rst
│   │   │   ├── jit-module.rst
│   │   │   ├── jit.rst
│   │   │   ├── jitclass.rst
│   │   │   ├── overview.rst
│   │   │   ├── parallel.rst
│   │   │   ├── performance-tips.rst
│   │   │   ├── pycc.rst
│   │   │   ├── stencil.rst
│   │   │   ├── talks.rst
│   │   │   ├── threading-layer.rst
│   │   │   ├── troubleshoot.rst
│   │   │   ├── vectorize.rst
│   │   │   └── withobjmode.rst
│   │   │       └── ... (16 more files)
│   │   ├── conf.py
│   │   ├── glossary.rst
│   │   ├── index.rst
│   │   ├── release-notes-overview.rst
│   │   └── release-notes.rst
│   ├── upcoming_changes/
│   │   ├── 10035.improvement.rst
│   │   ├── 10044.improvement.rst
│   │   ├── 10047.bug_fix.rst
│   │   ├── 10050.bug_fix.rst
│   │   ├── 10052.bug_fix.rst
│   │   ├── 10079.improvement.rst
│   │   ├── 10081.bug_fix.rst
│   │   ├── 10088.bug_fix.rst
│   │   ├── 10097.np_support.rst
│   │   ├── 10102.bug_fix.rst
│   │   ├── 10106.change.rst
│   │   ├── 10109.highlight.rst
│   │   ├── 10119.infrastructure.rst
│   │   ├── 10122.new_feature.rst
│   │   ├── 9259.bug_fix.rst
│   │   ├── 9390.np_support.rst
│   │   ├── 9676.improvement.rst
│   │   ├── 9805.bug_fix.rst
│   │   ├── 9861.improvement.rst
│   │   ├── 9862.bug_fix.rst
│   │   ├── 9876.bug_fix.rst
│   │   ├── 9888.bug_fix.rst
│   │   ├── 9892.improvement.rst
│   │   ├── 9893.bug_fix.rst
│   │   ├── 9916.improvement.rst
│   │   ├── 9926.improvement.rst
│   │   ├── 9973.bug_fix.rst
│   │   ├── README.rst
│   │   └── template.rst
│   │       └── ... (24 more files)
│   ├── environment.yml
│   ├── make.bat
│   └── Makefile
├── maint/
│   ├── git-copy.py
│   ├── github_weekly_meeting.py
│   ├── gitlog2changelog.py
│   ├── towncrier_checker.py
│   └── towncrier_rst_validator.py
├── numba/
│   ├── cext/
│   │   ├── __init__.py
│   │   ├── cext.h
│   │   ├── dictobject.c
│   │   ├── dictobject.h
│   │   ├── listobject.c
│   │   ├── listobject.h
│   │   └── utils.c
│   │       └── ... (2 more files)
│   ├── cloudpickle/
│   │   ├── __init__.py
│   │   ├── cloudpickle.py
│   │   └── cloudpickle_fast.py
│   ├── core/
│   │   ├── annotations/
│   │   │   ├── __init__.py
│   │   │   ├── pretty_annotate.py
│   │   │   ├── template.html
│   │   │   └── type_annotations.py
│   │   ├── datamodel/
│   │   │   ├── __init__.py
│   │   │   ├── manager.py
│   │   │   ├── models.py
│   │   │   ├── packer.py
│   │   │   ├── registry.py
│   │   │   └── testing.py
│   │   │       └── ... (1 more files)
│   │   ├── rewrites/
│   │   │   ├── __init__.py
│   │   │   ├── ir_print.py
│   │   │   ├── registry.py
│   │   │   ├── static_binop.py
│   │   │   ├── static_getitem.py
│   │   │   └── static_raise.py
│   │   │       └── ... (1 more files)
│   │   ├── runtime/
│   │   │   ├── __init__.py
│   │   │   ├── _nrt_python.c
│   │   │   ├── _nrt_pythonmod.c
│   │   │   ├── context.py
│   │   │   ├── nrt.cpp
│   │   │   ├── nrt.h
│   │   │   ├── nrt.py
│   │   │   ├── nrt_external.h
│   │   │   ├── nrtdynmod.py
│   │   │   └── nrtopt.py
│   │   │       └── ... (5 more files)
│   │   ├── typeconv/
│   │   │   ├── __init__.py
│   │   │   ├── _typeconv.cpp
│   │   │   ├── castgraph.py
│   │   │   ├── rules.py
│   │   │   ├── test.cpp
│   │   │   ├── typeconv.cpp
│   │   │   ├── typeconv.hpp
│   │   │   └── typeconv.py
│   │   │       └── ... (3 more files)
│   │   ├── types/
│   │   │   ├── __init__.py
│   │   │   ├── __init__.pyi
│   │   │   ├── abstract.py
│   │   │   ├── common.py
│   │   │   ├── containers.py
│   │   │   ├── function_type.py
│   │   │   ├── functions.py
│   │   │   ├── iterators.py
│   │   │   ├── misc.py
│   │   │   ├── npytypes.py
│   │   │   └── scalars.py
│   │   │       └── ... (6 more files)
│   │   ├── typing/
│   │   │   ├── __init__.py
│   │   │   ├── arraydecl.py
│   │   │   ├── asnumbatype.py
│   │   │   ├── bufproto.py
│   │   │   ├── builtins.py
│   │   │   ├── cffi_utils.py
│   │   │   ├── cmathdecl.py
│   │   │   ├── collections.py
│   │   │   ├── context.py
│   │   │   ├── ctypes_utils.py
│   │   │   ├── dictdecl.py
│   │   │   ├── enumdecl.py
│   │   │   ├── listdecl.py
│   │   │   ├── mathdecl.py
│   │   │   ├── npdatetime.py
│   │   │   ├── npydecl.py
│   │   │   ├── setdecl.py
│   │   │   ├── templates.py
│   │   │   └── typeof.py
│   │   │       └── ... (14 more files)
│   │   ├── unsafe/
│   │   │   ├── __init__.py
│   │   │   ├── bytes.py
│   │   │   ├── eh.py
│   │   │
... (635 lines omitted)
```

## Previous Operation Results:
### File Operations:
No files to create
### Command Execution:
--- Command: python setup.py build_ext --inplace ---
SUCCESS: False
STDOUT:
TBB not found
Using OpenMP from: True
running build_ext
building 'numba._dynfunc' extension
creating build
creating build/temp.linux-x86_64-3.10
creating build/temp.linux-x86_64-3.10/numba
x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c numba/_dynfuncmod.c -o build/temp.linux-x86_64-3.10/numba/_dynfuncmod.o

STDERR:
/usr/lib/python3/dist-packages/setuptools/dist.py:493: UserWarning: Normalizing '0.62.0dev0+440.g262b49a3e.dirty' to '0.62.0.dev0+440.g262b49a3e.dirty'
  warnings.warn(tmpl.format(**locals()))
In file included from numba/_dynfunc.c:6,
                 from numba/_dynfuncmod.c:1:
numba/_pymodule.h:6:10: fatal error: Python.h: No such file or directory
    6 | #include "Python.h"
      |          ^~~~~~~~~~
compilation terminated.
error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1


--- Command: pytest ---
SUCCESS: False
STDOUT:
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0
rootdir: /app/repo_to_process
collected 0 items / 352 errors

==================================== ERRORS ====================================
_________ ERROR collecting numba/cuda/tests/cudadrv/test_array_attr.py _________
ImportError while importing test module '/app/repo_to_process/numba/cuda/tests/cudadrv/test_array_attr.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
numba/core/typeconv/typeconv.py:4: in <module>
    from numba.core.typeconv import _typeconv
E   ImportError: cannot import name '_typeconv' from 'numba.core.typeconv' (/app/repo_to_process/numba/core/typeconv/__init__.py)

During handling of the above exception, another exception occurred:
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
numba/__init__.py:72: in <module>
    from numba.misc.special import (
numba/misc/special.py:3: in <module>
    from numba.core.typing.typeof import typeof
numba/core/typing/__init__.py:1: in <module>
    from .context import BaseContext, Context
numba/core/typing/context.py:11: in <module>
    from numba.core.typeconv import Conversion, rules
numba/core/typeconv/rules.py:2: in <module>
    from .typeconv import TypeManager, TypeCastingRules
numba/core/typeconv/typeconv.py:16: in <module>
    raise ImportError(msg)
E   ImportError: Numba could not be imported.
E   --------------------------------------------------------------------------------
E   If you are seeing this message and are undertaking Numba development work, you may need to rebuild Numba.
E   Please see the development set up guide:
E   
E   https://numba.readthedocs.io/en/stable/developer/contributing.html.
E   
E   --------------------------------------------------------------------------------
E   If you are not working on Numba development, the original error was: 'cannot import name '_typeconv' from 'numba.core.typeconv' (/app/repo_to_process/numba/core/typeconv/__init__.py)'.
E   For help, please visit:
E   
E   https://numba.readthedocs.io/en/stable/user/faq.html#numba-could-not-be-imported
_______ ERROR collecting numba/cuda/tests/cudadrv/test_context_stack.py ________
ImportError while importing test module '/app/repo_to_process/numba/cuda/tests/cudadrv/test_context_stack.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
numba/core/typeconv/typeconv.py:4: in <module>
    from numba.core.typeconv import _typeconv
E   ImportError: cannot import name '_typeconv' from 'numba.core.typeconv' (/app/repo_to_process/numba/core/typeconv/__init__.py)

During handling of the above exception, another exception occurred:
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
numba/__init__.py:72: in <module>
    from numba.misc.special import (
numba/misc/special.py:3: in <module>
    from numba.core.typing.typeof import typeof
numba/core/typing/__init__.py:1: in <module>
    from .context import BaseContext, Context
numba/core/typing/context.py:11: in <module>
    from numba.core.typeconv import Conversion, rules
numba/core/typeconv/rules.py:2: in <module>
    from .typeconv import TypeManager, TypeCastingRules
numba/core/typeconv/typeconv.py:16: in <module>
    raise ImportError(msg)
E   ImportError: Numba could not be imported.
E   --------------------------------------------------------------------------------
E   If you are seeing this message and are undertaking Numba development work, you may need to rebuild Numba.
E   Please see the development set up guide:
E   
E   https://numba.readthedocs.io/en/stable/developer/contributing.html.
E   
E   --------------------------------------------------------------------------------
E   If you are not working on Numba development, the original error was: 'cannot import name '_typeconv' from 'numba.core.typeconv' (/app/repo_to_process/numba/core/typeconv/__init__.py)'.
E   For help, please visit:
E   
E   https://numba.readthedocs.io/en/stable/user/faq.html#numba-could-not-be-imported
_____ ERROR collecting numba/cuda/tests/cudadrv/test_cuda_array_slicing.py _____
ImportError while importing test module '/app/repo_to_process/numba/cuda/tests/cudadrv/test_cuda_array_slicing.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
numba/core/typeconv/typeconv.py:4: in <module>
    from numba.core.typeconv import _typeconv
E   ImportError: cannot import name '_typeconv' from 'numba.core.typeconv' (/app/repo_to_process/numba/core/typeconv/__init__.py)

During handling of the above exception, another exception occurred:
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
numba/__init__.py:72: in <module>
    from numba.misc.special import (
numba/misc/special.py:3: in <module>
    from numba.core.typing.typeof import typeof
numba/core/typing/__init__.py:1: in <module>
    from .context import BaseContext, Context
numba/core/typing/context.py:11: in <module>
    from numba.core.typeconv import Conversion, rules
numba/core/typeconv/rules.py:2: in <module>
    from .typeconv import TypeManager, TypeCastingRules
numba/core/typeconv/typeconv.py:16: in <module>
    raise ImportError(msg)
E   ImportError: Numba could not be imported.
E   --------------------------------------------------------------------------------
E   If you are seeing this message and are undertaking Numba development work, you may need to rebuild Numba.
E   Please see the development set up guide:
E   
E   https://numba.readthedocs.io/en/stable/developer/contributing.html.
E   
E   --------------------------------------------------------------------------------
E   If you are not working on Numba development, the original error was: 'cannot import name '_typeconv' from 'numba.core.typeconv' (/app/repo_to_process/numba/core/typeconv/__init__.py)'.
E   For help, please visit:
E   
E   https://numba.readthedocs.io/en/stable/user/faq.html#numba-could-not-be-imported
_____ ERROR collecting numba/cuda/tests/cudadrv/test_cuda_auto_context.py ______
ImportError while importing test module '/app/repo_to_process/numba/cuda/tests/cudadrv/test_cuda_auto_context.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
numba/core/typeconv/typeconv.py:4: in <module>
    from numba.core.typeconv import _typeconv
E   ImportError: cannot import name '_typeconv' from 'numba.core.typeconv' (/app/repo_to_process/numba/core/typeconv/__init__.py)

During handling of the above exception, another exception occurred:
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
numba/__init__.py:72: in <module>
    from numba.misc.special import (
numba/misc/special.py:3: in <module>
    from numba.core.typing.typeof import typeof
numba/core/typing/__init__.py:1: in <module>
    from .context import BaseContext, Context
numba/core/typing/context.py:11: in <module>
    from numba.core.typeconv import Conversion, rules
numba/core/typeconv/rules.py:2: in <module>
    from .typeconv import TypeManager, TypeCastingRules
numba/core/typeconv/typeconv.py:16: in <module>
    raise ImportError(msg)
E   ImportError: Numba could not be imported.
E   --------------------------------------------------------------------------------
E   If you are seeing this message and are undertaking Numba development work, you may need to rebuild Numba.
E   Please see the development set up guide:
E   
E   https://numba.readthedocs.io/en/stable/developer/contributing.html.
E   
E   --------------------------------------------------------------------------------
E   If you are not working on Numba development, the original error was: 'cannot import name '_typeconv' from 'numba.core.typeconv' (/app/repo_to_process/numba/core/typeconv/__init__.py)'.
E   For help, please visit:
E   
E   https://numba.readthedocs.io/en/stable/user/faq.html#numba-could-not-be-imported
_____ ERROR collecting numba/cuda/tests/cudadrv/test_cuda_devicerecord.py ______
ImportError
... (12533 lines omitted)


## Your Task (Phase 1: Environment Setup)
**Analyze the `pytest` output above.**
- Did `pytest` report `ModuleNotFoundError` or `ImportError`? If so, you have found a missing dependency. Your next action MUST be to install it using `pip`. For example, if you see `ModuleNotFoundError: No module named 'tifffile'`, respond with `pip install tifffile`.
- Did `pytest` report `ERROR collecting test`? This indicates a problem with the test files themselves or the environment setup. Continue to debug.
- You are still in Phase 1. Do NOT proceed to Phase 2 until these errors are resolved and `pytest` can collect tests without crashing.
- If you are truly stuck after several attempts, declare failure with ```status
failed
```.