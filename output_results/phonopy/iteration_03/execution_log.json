[
  {
    "command": "pytest",
    "success": false,
    "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0\nrootdir: /app/repo_to_process\nconfigfile: pyproject.toml\ncollected 300 items\n\ntest/api/test_api_phonopy.py EEEEEEEFF                                   [  3%]\ntest/cui/test_phonopy_cui.py FF.FFFFFFFFF                                [  7%]\ntest/gruneisen/test_gruneisen.py EE                                      [  7%]\ntest/harmonic/test_derivative_dynmat.py EEEEE                            [  9%]\ntest/harmonic/test_displacements.py EEEEEEEEEEEEEEEEEEEEEEE              [ 17%]\ntest/harmonic/test_dynamical_matrix.py EEEEEEEEEEE                       [ 20%]\ntest/harmonic/test_dynmat_to_fc.py ..EEEEEEE                             [ 23%]\ntest/harmonic/test_force_constants.py EEEEEEEEEEE                        [ 27%]\ntest/interface/test_CP2K.py s                                            [ 27%]\ntest/interface/test_CRYSTAL.py .                                         [ 28%]\ntest/interface/test_TURBOMOLE.py .                                       [ 28%]\ntest/interface/test_abacus.py ....                                       [ 29%]\ntest/interface/test_abinit.py ..                                         [ 30%]\ntest/interface/test_castep.py .                                          [ 30%]\ntest/interface/test_conversion.py .                                      [ 31%]\ntest/interface/test_lammps.py .........                                  [ 34%]\ntest/interface/test_phonopy_yaml.py .....FFEE.E                          [ 37%]\ntest/interface/test_pwmat.py ..                                          [ 38%]\ntest/interface/test_pwscf.py .....                                       [ 40%]\ntest/interface/test_pypolymlp.py E                                       [ 40%]\ntest/interface/test_qlm.py ..                                            [ 41%]\ntest/interface/test_symfc.py EEEE                                        [ 42%]\ntest/interface/test_vasp.py ...........                                  [ 46%]\ntest/interface/test_wien2k.py .                                          [ 46%]\ntest/phonon/test_band_structure.py EEEE                                  [ 47%]\ntest/phonon/test_dos.py EEEEE                                            [ 49%]\ntest/phonon/test_group_velocity.py EEE                                   [ 50%]\ntest/phonon/test_irreps.py FFFFFFFFFFFFFFFFFFFFF                         [ 57%]\ntest/phonon/test_mesh.py EEEEEE                                          [ 59%]\ntest/phonon/test_modulation.py E                                         [ 59%]\ntest/phonon/test_moment.py E                                             [ 60%]\ntest/phonon/test_qpoints.py EE                                           [ 60%]\ntest/phonon/test_random_displacements.py EEEEEE                          [ 62%]\ntest/phonon/test_tetrahedron_mesh.py FFF                                 [ 63%]\ntest/phonon/test_thermal_displacement.py EEE                             [ 64%]\ntest/phonon/test_thermal_properties.py EE                                [ 65%]\ntest/phonon/test_thermal_properties_classical.py EE                      [ 66%]\ntest/phonopy_load/test_phonopy_load.py FF                                [ 66%]\ntest/qha/test_QHA.py ..                                                  [ 67%]\ntest/qha/test_QHA_efe.py ..                                              [ 68%]\ntest/qha/test_electron.py .                                              [ 68%]\ntest/spectrum/test_dynamic_structure_factor.py EE                        [ 69%]\ntest/spectrum/test_velocity.py .                                         [ 69%]\ntest/sscha/test_core.py E                                                [ 69%]\ntest/structure/test_atoms.py .............E..........                    [ 77%]\ntest/structure/test_brillouin_zone.py ..                                 [ 78%]\ntest/structure/test_cells.py EEE....E..EEFFEEEEEEEFEEE.EE                [ 87%]\ntest/structure/test_grid_points.py .EEEEEEEEEEEEEEE                      [ 93%]\ntest/structure/test_symmetry.py EFFFEEEEEEEEE                            [ 97%]\ntest/structure/test_tetrahedron_method.py FFF                            [ 98%]\ntest/test_exception.py E                                                 [ 98%]\ntest/test_file_IO.py F.                                                  [ 99%]\ntest/unfolding/test_unfolding.py EE                                      [100%]\n--- Writing function-level test call chains report to report_functions.jsonl ---\nSuccessfully wrote 160 records to report_functions.jsonl\n\n--- Writing aggregated file-level test call chains report to report_files.jsonl ---\nSuccessfully wrote 37 records to report_files.jsonl\n\n--- End of Reports ---\n\n\n==================================== ERRORS ====================================\n_______________ ERROR at setup of test_displacements_setter_NaCl _______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_forces_setter_NaCl_type1 ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_forces_setter_NaCl_type2 ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_energies_setter_NaCl_type1 _______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_fd() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 with RD results.\n    \n        This data contains supercell energies and NAC params.\n    \n        \"\"\"\n        yaml_filename = cwd / \"phonopy_params_NaCl-fd.yaml.xz\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False)\n\ntest/conftest.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f4217986a70>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_energies_setter_NaCl_type2 _______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_rd() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 with RD results.\n    \n        This data contains supercell energies and NAC params.\n    \n        \"\"\"\n        yaml_filename = cwd / \"phonopy_params_NaCl-rd.yaml.xz\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False)\n\ntest/conftest.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177ca6e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_mlp_NaCl_type2 _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_rd() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 with RD results.\n    \n        This data contains supercell energies and NAC params.\n    \n        \"\"\"\n        yaml_filename = cwd / \"phonopy_params_NaCl-rd.yaml.xz\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False)\n\ntest/conftest.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177ca6e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_load_mlp_pypolymlp ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_kcl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of KCl for mlpsscha_KCl-120.pmlp.\"\"\"\n        yaml_filename = cwd / \"phonopy_KCl.yaml\"\n>       return phonopy.load(yaml_filename, produce_fc=False, log_level=1)\n\ntest/conftest.py:304: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f421796e230>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_gruneisen_mesh _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_gruneisen() -> tuple[Phonopy, Phonopy, Phonopy]:\n        \"\"\"Return Phonopy class instances of NaCl 2x2x2 at three volumes.\"\"\"\n>       ph0 = phonopy.load(\n            cwd / \"phonopy_params_NaCl-1.00.yaml.xz\",\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c1300>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_gruneisen_band _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_gruneisen() -> tuple[Phonopy, Phonopy, Phonopy]:\n        \"\"\"Return Phonopy class instances of NaCl 2x2x2 at three volumes.\"\"\"\n>       ph0 = phonopy.load(\n            cwd / \"phonopy_params_NaCl-1.00.yaml.xz\",\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c1300>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________ ERROR at setup of test_ddm_nac ________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________ ERROR at setup of test_ddm_nac_wang ______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_wang() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       ph = phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c3ff40>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_ddm_nac_compact ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_compact_fcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 with compact fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=True,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fe86d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________ ERROR at setup of test_ddm_nonac _______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bced70>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_ddm_nonac_compact ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac_compact_fc() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC with compact fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=True,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c7b190>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________ ERROR at setup of test_nacl __________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________________ ERROR at setup of test_si ___________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_si() -> Phonopy:\n        \"\"\"Return Phonopy class instance of Si-prim 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Si.yaml\"\n>       return phonopy.load(\n            yaml_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b59240>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________ ERROR at setup of test_sno2 __________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_sno2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of rutile SnO2 2x2x3.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_SnO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_SnO2\"\n        born_filename = cwd / \"BORN_SnO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd2f20>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________ ERROR at setup of test_tio2 __________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________ ERROR at setup of test_tio2_random_disp[False-None-4] _____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_tio2_random_disp[False-None-auto] ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________ ERROR at setup of test_tio2_random_disp[False-0.03-4] _____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_tio2_random_disp[False-0.03-auto] ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________ ERROR at setup of test_tio2_random_disp[True-None-4] _____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_tio2_random_disp[True-None-auto] ____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________ ERROR at setup of test_tio2_random_disp[True-0.03-4] _____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_tio2_random_disp[True-0.03-auto] ____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______ ERROR at setup of test_tio2_random_disp_rd_auto_estimation_factor _______\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________ ERROR at setup of test_tio2_random_disp_with_random_dist[None] ________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________ ERROR at setup of test_tio2_random_disp_with_random_dist[0.05] ________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________ ERROR at setup of test_tio2_random_disp_with_random_dist[0.2] _________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____ ERROR at setup of test_tio2_random_disp_with_random_dist_defualt[None] ____\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____ ERROR at setup of test_tio2_random_disp_with_random_dist_defualt[0.1] _____\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______ ERROR at setup of test_tio2_random_disp_with_random_max_distance _______\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_tio2_random_disp_plusminus _______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of test_tio2_random_distances _________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________ ERROR at setup of test_zr3n4 _________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_zr3n4() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze Zr3N4 1x1x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Zr3N4.yaml\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c51930>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________ ERROR at setup of test_tipn3 _________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tipn3() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiPN3 4x2x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_TiPN3.yaml.xz\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bcd690>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_dynmat[True-C] _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bced70>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_dynmat[False-C] ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bced70>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_dynmat[True-Py] ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bced70>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_dynmat[False-Py] ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bced70>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_dynmat_without_hermitianize ______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tipn3() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiPN3 4x2x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_TiPN3.yaml.xz\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bcd690>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of test_dynmat_dense_svecs[C] _________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac_dense_svecs() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC with dense svecs.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=True,\n            store_dense_svecs=True,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd5ba0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________ ERROR at setup of test_dynmat_dense_svecs[Py] _________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac_dense_svecs() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC with dense svecs.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=True,\n            store_dense_svecs=True,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd5ba0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_dynmat_gonze_lee ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________ ERROR at setup of test_dynmat_gonze_lee_short_range_fc ____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_dynmat_gonze_lee_full_term _______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________ ERROR at setup of test_dynmat_wang ______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_wang() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       ph = phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c3ff40>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_ph2ph_with_nac _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_ph2ph_without_nac ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bced70>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_with_eigenvalues ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_with_dynamical_matrices[False-C] ____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________ ERROR at setup of test_with_dynamical_matrices[True-C] ____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_with_dynamical_matrices[False-Py] ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_with_dynamical_matrices[True-Py] ____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________________ ERROR at setup of test_fc ___________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________ ERROR at setup of test_fc_nofcsym _______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_fc_compact_fcsym ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_compact_fcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 with compact fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=True,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fe86d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_fc_compact_symfc ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_rd_symfc() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 with RD results.\n    \n        This data contains supercell energies and NAC params. Symfc is used to\n        compute force constants.\n    \n        \"\"\"\n        pytest.importorskip(\"symfc\")\n        pytest.importorskip(\"spglib\", minversion=\"2.5\")\n    \n        yaml_filename = cwd / \"phonopy_params_NaCl-rd.yaml.xz\"\n>       return phonopy.load(\n            yaml_filename, log_level=1, fc_calculator=\"symfc\", is_compact_fc=True\n        )\n\ntest/conftest.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3aa3ee0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________ ERROR at setup of test_fc_cutoff_radius[False] ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________ ERROR at setup of test_fc_cutoff_radius[True] _________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________ ERROR at setup of test_fc_cutoff_radius_svecs[False-False] __________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________ ERROR at setup of test_fc_cutoff_radius_svecs[False-True] ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________ ERROR at setup of test_fc_cutoff_radius_svecs[True-False] ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_fc_cutoff_radius_svecs[True-True] ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________ ERROR at setup of test_rearrange_force_constants_array ____________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_write_phonopy_yaml ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_write_phonopy_yaml_extra ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________ ERROR at setup of test_phonopy_yaml_extended_symbol ______________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_pypolymlp_develop ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_rd() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 with RD results.\n    \n        This data contains supercell energies and NAC params.\n    \n        \"\"\"\n        yaml_filename = cwd / \"phonopy_params_NaCl-rd.yaml.xz\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False)\n\ntest/conftest.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177ca6e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_symfc_cutoff[None] ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of test_symfc_cutoff[cutoff1] _________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________ ERROR at setup of test_symmetrize_by_projector ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_zr3n4_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze Zr3N4 1x1x1.\n    \n        Without symmetrizing force constants.\n        Full FC.\n    \n        \"\"\"\n        yaml_filename = cwd / \"phonopy_params_Zr3N4.yaml\"\n>       return phonopy.load(\n            yaml_filename,\n            is_compact_fc=False,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f4216e50520>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____ ERROR at setup of test_symmetrize_by_projector_with_inconsistent_p2s _____\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\n    \n        Without symmetrizing force constants.\n        Full FC.\n    \n        \"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c54700>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_band_structure _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_band_structure_gv ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_band_structure_bc ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_band_structure_write_hdf5 _______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________ ERROR at setup of testTotalDOS ________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of testTotalDOSTetrahedron ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________ ERROR at setup of testProjectedlDOS ______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of testPartialDOSTetrahedron __________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________ ERROR at setup of test_get_pdos_indices ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________ ERROR at setup of test_gv_nacl ________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________ ERROR at setup of test_gv_nacl_wang ______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_wang() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       ph = phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c3ff40>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________ ERROR at setup of test_gv_si _________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_si() -> Phonopy:\n        \"\"\"Return Phonopy class instance of Si-prim 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Si.yaml\"\n>       return phonopy.load(\n            yaml_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b59240>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________ ERROR at setup of test_Mesh_nofcsym ______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_Mesh_full_fcsym ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_Mesh_compact_fcsym ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_compact_fcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 with compact fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=True,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fe86d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of test_Mesh_full_fcsym_nonac _________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nonac() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without NAC.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            is_nac=False,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bced70>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of test_Mesh_full_fcsym_wang __________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_wang() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       ph = phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c3ff40>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_Mesh_full_fcsym_si ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_si() -> Phonopy:\n        \"\"\"Return Phonopy class instance of Si-prim 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Si.yaml\"\n>       return phonopy.load(\n            yaml_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b59240>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________ ERROR at setup of test_modulation _______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________ ERROR at setup of test_moment _________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________ ERROR at setup of test_Qpoints ________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl_nofcsym() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2 without symmetrizing fc2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            symmetrize_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fcf970>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_Qpoints_with_NAC_qdirection ______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_random_displacements_Zr3N4 _______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_zr3n4() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze Zr3N4 1x1x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Zr3N4.yaml\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c51930>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________ ERROR at setup of test_random_displacements_all_atoms_TiPN3 __________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tipn3() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiPN3 4x2x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_TiPN3.yaml.xz\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bcd690>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___ ERROR at setup of test_random_displacements_all_atoms_TiPN3_max_distance ___\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tipn3() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiPN3 4x2x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_TiPN3.yaml.xz\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bcd690>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_tio2_random_disp_plusminus[True] ____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_tio2_random_disp_plusminus[False] ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of test_treat_imaginary_modes _________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_srtio3() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze SrTiO3 3x3x3.\"\"\"\n        yaml_filename = cwd / \"phonopy_SrTiO3.yaml.xz\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:295: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c3c6a0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of test_ThermalDisplacements __________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_ThermalDisplacementMatrices ______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_sno2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of rutile SnO2 2x2x3.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_SnO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_SnO2\"\n        born_filename = cwd / \"BORN_SnO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd2f20>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_compare_TD_and_TDM ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_thermal_properties ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_thermal_properties_at_temperatues ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_thermal_properties ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_thermal_properties_at_temperatues ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________ ERROR at setup of test_IXS_G_to_L_Si _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_si() -> Phonopy:\n        \"\"\"Return Phonopy class instance of Si-prim 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Si.yaml\"\n>       return phonopy.load(\n            yaml_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b59240>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_IXS_G_to_L_NaCl ____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________ ERROR at setup of test_MLPSSCHA ________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_kcl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of KCl for mlpsscha_KCl-120.pmlp.\"\"\"\n        yaml_filename = cwd / \"phonopy_KCl.yaml\"\n>       return phonopy.load(yaml_filename, produce_fc=False, log_level=1)\n\ntest/conftest.py:304: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f421796e230>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_PhonopyAtoms_with_Xn_symbol ______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_compute_permutation_sno2 ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_sno2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of rutile SnO2 2x2x3.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_SnO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_SnO2\"\n        born_filename = cwd / \"BORN_SnO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd2f20>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_compute_permutation_tio2 ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_compute_permutation_nacl ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________ ERROR at setup of test_get_supercell_nacl_snf _________________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ ERROR at setup of test_get_primitive_convcell_nacl ______________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____ ERROR at setup of test_get_primitive_convcell_nacl_with_cetring_symbol ____\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________ ERROR at setup of test_get_primitive_convcell_nacl_svecs[True] ________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______ ERROR at setup of test_get_primitive_convcell_nacl_svecs[False] ________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________ ERROR at setup of test_TrimmedCell ______________________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_ShortestPairs_sparse_nacl _______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_ShortestPairs_dense_nacl ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______ ERROR at setup of test_sparse_to_dense_and_dense_to_sparse_nacl ________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______ ERROR at setup of test_sparse_to_dense_and_dense_to_sparse_tipn3 _______\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tipn3() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiPN3 4x2x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_TiPN3.yaml.xz\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bcd690>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________ ERROR at setup of test_isclose ________________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________ ERROR at setup of test_isclose_with_arbitrary_order ______________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________ ERROR at setup of test_convert_to_phonopy_primitive ______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________ ERROR at setup of test_get_supercell_with_Xn_symbol ______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________ ERROR at setup of test_get_primitive_with_Xn_symbol ______________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________ ERROR at setup of test_GridPoints_NaCl_with_rotations _____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______ ERROR at setup of test_GridPoints_NaCl_with_rotations_fit_BZ[True] ______\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____ ERROR at setup of test_GridPoints_NaCl_with_rotations_fit_BZ[False] ______\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________ ERROR at setup of test_GridPoints_SnO2_with_rotations _____________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_sno2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of rutile SnO2 2x2x3.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_SnO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_SnO2\"\n        born_filename = cwd / \"BORN_SnO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd2f20>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_GridPoints_SnO2_with_rotations_MP ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_sno2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of rutile SnO2 2x2x3.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_SnO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_SnO2\"\n        born_filename = cwd / \"BORN_SnO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd2f20>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______ ERROR at setup of test_SNF_from_GeneralizedRegularGridPoints[True] ______\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____ ERROR at setup of test_SNF_from_GeneralizedRegularGridPoints[False] ______\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___ ERROR at setup of test_GeneralizedRegularGridPoints_rotations_tio2[True] ___\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__ ERROR at setup of test_GeneralizedRegularGridPoints_rotations_tio2[False] ___\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_ ERROR at setup of test_GeneralizedRegularGridPoints_rotations_zr3n4[True-True] _\n\n    @pytest.fixture(scope=\"session\")\n    def ph_zr3n4() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze Zr3N4 1x1x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Zr3N4.yaml\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c51930>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_ ERROR at setup of test_GeneralizedRegularGridPoints_rotations_zr3n4[True-False] _\n\n    @pytest.fixture(scope=\"session\")\n    def ph_zr3n4() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze Zr3N4 1x1x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Zr3N4.yaml\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c51930>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_ ERROR at setup of test_GeneralizedRegularGridPoints_rotations_zr3n4[False-True] _\n\n    @pytest.fixture(scope=\"session\")\n    def ph_zr3n4() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze Zr3N4 1x1x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Zr3N4.yaml\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c51930>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_ ERROR at setup of test_GeneralizedRegularGridPoints_rotations_zr3n4[False-False] _\n\n    @pytest.fixture(scope=\"session\")\n    def ph_zr3n4() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze Zr3N4 1x1x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Zr3N4.yaml\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c51930>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________ ERROR at setup of test_watch_GeneralizedRegularGridPoints ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________ ERROR at setup of test_length2mesh ______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_get_map_operations ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_symmetrize_borns_and_epsilon_nacl ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________ ERROR at setup of test_symmetrize_borns_and_epsilon_tio2 ___________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_Symmetry_pointgroup __________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_tio2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze TiO2 3x3x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_TiO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_TiO2\"\n        born_filename = cwd / \"BORN_TiO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bce1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________ ERROR at setup of test_Symmetry_nosym_s2p_map _________________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________ ERROR at setup of test_with_pmat_and_smat ___________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________ ERROR at setup of test_with_pcell _______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________ ERROR at setup of test_site_symmetry _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_sno2() -> Phonopy:\n        \"\"\"Return Phonopy class instance of rutile SnO2 2x2x3.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_SnO2.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_SnO2\"\n        born_filename = cwd / \"BORN_SnO2\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd2f20>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________ ERROR at setup of test_collect_unique_rotations ________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________ ERROR at setup of test_reciprocal_operations _________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_zr3n4() -> Phonopy:\n        \"\"\"Return Phonopy class instance of anataze Zr3N4 1x1x1.\"\"\"\n        yaml_filename = cwd / \"phonopy_params_Zr3N4.yaml\"\n>       return phonopy.load(\n            yaml_filename, is_compact_fc=False, log_level=1, produce_fc=True\n        )\n\ntest/conftest.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c51930>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________ ERROR at setup of test_ForcesetsNotFoundError _________________\n\n    @pytest.fixture(scope=\"session\")\n    def nacl_unitcell_order1() -> PhonopyAtoms:\n        \"\"\"Return Phonopy class instance of only NaCl unitcell with order-1.\"\"\"\n        yaml_filename = cwd / \"phonopy_NaCl_unitcell1.yaml\"\n>       return phonopy.load(yaml_filename, log_level=1, produce_fc=False).unitcell\n\ntest/conftest.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c517e0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ ERROR at setup of test_Unfolding_NaCl _____________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________ ERROR at setup of test_Unfolding_SC ______________________\n\n    @pytest.fixture(scope=\"session\")\n    def ph_nacl() -> Phonopy:\n        \"\"\"Return Phonopy class instance of NaCl 2x2x2.\"\"\"\n        yaml_filename = cwd / \"phonopy_disp_NaCl.yaml\"\n        force_sets_filename = cwd / \"FORCE_SETS_NaCl\"\n        born_filename = cwd / \"BORN_NaCl\"\n>       return phonopy.load(\n            yaml_filename,\n            force_sets_filename=force_sets_filename,\n            born_filename=born_filename,\n            is_compact_fc=False,\n            log_level=1,\n            produce_fc=True,\n        )\n\ntest/conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c81f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n=================================== FAILURES ===================================\n___________________________ test_Phonopy_calculator ____________________________\n\n    def test_Phonopy_calculator():\n        \"\"\"Test phonopy_load with phonopy_params.yaml.\"\"\"\n>       ph_orig = phonopy.load(\n            cwd / \"..\" / \"phonopy_params_NaCl-fd.yaml.xz\", produce_fc=False, log_level=2\n        )\n\ntest/api/test_api_phonopy.py:287: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42178c89d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________________ test_Phonopy_calculator_QE __________________________\n\n    def test_Phonopy_calculator_QE():\n        \"\"\"Test phonopy_load with phonopy_params.yaml for QE.\"\"\"\n>       ph_orig = phonopy.load(\n            cwd / \"..\" / \"phonopy_params_NaCl-QE.yaml.xz\", produce_fc=False, log_level=2\n        )\n\ntest/api/test_api_phonopy.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f4217161120>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n----------------------------- Captured stdout call -----------------------------\nSet \"qe\" mode.\n_________________________ test_phonopy_disp_Cr[False] __________________________\n\nis_ncl = False\n\n    @pytest.mark.parametrize(\"is_ncl\", [False, True])\n    def test_phonopy_disp_Cr(is_ncl: bool):\n        \"\"\"Test phonopy -d option.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                cell_filename = cwd / \"POSCAR-unitcell_Cr\"\n                if is_ncl:\n                    magmoms = \"0 0 1 0 0 -1\"\n                else:\n                    magmoms = \"1 -1\"\n    \n                argparse_control = _get_phonopy_args(\n                    cell_filename=cell_filename,\n                    supercell_dimension=\"2 2 2\",\n                    is_displacement=True,\n                    magmoms=magmoms,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1766: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f421705f010>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n__________________________ test_phonopy_disp_Cr[True] __________________________\n\nis_ncl = True\n\n    @pytest.mark.parametrize(\"is_ncl\", [False, True])\n    def test_phonopy_disp_Cr(is_ncl: bool):\n        \"\"\"Test phonopy -d option.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                cell_filename = cwd / \"POSCAR-unitcell_Cr\"\n                if is_ncl:\n                    magmoms = \"0 0 1 0 0 -1\"\n                else:\n                    magmoms = \"1 -1\"\n    \n                argparse_control = _get_phonopy_args(\n                    cell_filename=cell_filename,\n                    supercell_dimension=\"2 2 2\",\n                    is_displacement=True,\n                    magmoms=magmoms,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1766: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42178b7b50>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________________ test_phonopy_load[False] ___________________________\n\nload_phonopy_yaml = False\n\n    @pytest.mark.parametrize(\"load_phonopy_yaml\", [False, True])\n    def test_phonopy_load(load_phonopy_yaml: bool):\n        \"\"\"Test phonopy/phonopy-load command.\"\"\"\n        pytest.importorskip(\"symfc\")\n    \n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                # Check sys.exit(0)\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"..\" / \"phonopy_params_NaCl-1.00.yaml.xz\",\n                    load_phonopy_yaml=load_phonopy_yaml,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1777: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3f533a0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n___________________________ test_phonopy_load[True] ____________________________\n\nload_phonopy_yaml = True\n\n    @pytest.mark.parametrize(\"load_phonopy_yaml\", [False, True])\n    def test_phonopy_load(load_phonopy_yaml: bool):\n        \"\"\"Test phonopy/phonopy-load command.\"\"\"\n        pytest.importorskip(\"symfc\")\n    \n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                # Check sys.exit(0)\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"..\" / \"phonopy_params_NaCl-1.00.yaml.xz\",\n                    load_phonopy_yaml=load_phonopy_yaml,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1777: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f421709ba30>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________ test_unit_conversion_factor[False] ______________________\n\nload_phonopy_yaml = False\n\n    @pytest.mark.parametrize(\"load_phonopy_yaml\", [False, True])\n    def test_unit_conversion_factor(load_phonopy_yaml: bool):\n        \"\"\"Test unit_conversion_factor using phonopy/phonopy-load command.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                # Check sys.exit(0)\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"..\" / \"phonopy_params_NaCl-fd.yaml.xz\",\n                    band_paths=\"0 0 0 0 0 1/2\",\n                    frequency_conversion_factor=100,\n                    load_phonopy_yaml=load_phonopy_yaml,\n                )\n                with pytest.warns(DeprecationWarning):\n                    with pytest.raises(SystemExit) as excinfo:\n>                       main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1777: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42178b7e80>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________ test_unit_conversion_factor[True] _______________________\n\nload_phonopy_yaml = True\n\n    @pytest.mark.parametrize(\"load_phonopy_yaml\", [False, True])\n    def test_unit_conversion_factor(load_phonopy_yaml: bool):\n        \"\"\"Test unit_conversion_factor using phonopy/phonopy-load command.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                # Check sys.exit(0)\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"..\" / \"phonopy_params_NaCl-fd.yaml.xz\",\n                    band_paths=\"0 0 0 0 0 1/2\",\n                    frequency_conversion_factor=100,\n                    load_phonopy_yaml=load_phonopy_yaml,\n                )\n                with pytest.warns(DeprecationWarning):\n                    with pytest.raises(SystemExit) as excinfo:\n>                       main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1777: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3f97010>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n____________________ test_unit_conversion_factor_QE[False] _____________________\n\nload_phonopy_yaml = False\n\n    @pytest.mark.parametrize(\"load_phonopy_yaml\", [False, True])\n    def test_unit_conversion_factor_QE(load_phonopy_yaml: bool):\n        \"\"\"Test unit_conversion_factor for QE using phonopy/phonopy-load command.\"\"\"\n        pytest.importorskip(\"symfc\")\n    \n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                # Check sys.exit(0)\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"..\" / \"phonopy_params_NaCl-QE.yaml.xz\",\n                    band_paths=\"0 0 0 0 0 1/2\",\n                    load_phonopy_yaml=load_phonopy_yaml,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1777: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b8f520>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________ test_unit_conversion_factor_QE[True] _____________________\n\nload_phonopy_yaml = True\n\n    @pytest.mark.parametrize(\"load_phonopy_yaml\", [False, True])\n    def test_unit_conversion_factor_QE(load_phonopy_yaml: bool):\n        \"\"\"Test unit_conversion_factor for QE using phonopy/phonopy-load command.\"\"\"\n        pytest.importorskip(\"symfc\")\n    \n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                # Check sys.exit(0)\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"..\" / \"phonopy_params_NaCl-QE.yaml.xz\",\n                    band_paths=\"0 0 0 0 0 1/2\",\n                    load_phonopy_yaml=load_phonopy_yaml,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1777: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f42177c2080>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________ test_phonopy_is_check_symmetry ________________________\n\n    def test_phonopy_is_check_symmetry():\n        \"\"\"Test phonopy --symmetry command with phonopy.yaml input structure.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                # Check sys.exit(0)\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"..\" / \"phonopy_params_NaCl-1.00.yaml.xz\",\n                    load_phonopy_yaml=False,\n                    is_check_symmetry=True,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1946: in main\n    _show_symmetry_info_then_exit(cell_info, symprec)\nphonopy/cui/phonopy_script.py:1725: in _show_symmetry_info_then_exit\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3ff2b00>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________________ test_conf_file ________________________________\n\n    def test_conf_file():\n        \"\"\"Test phonopy CONFILE.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"dim.conf\",\n                    cell_filename=cwd / \"POSCAR-unitcell_Cr\",\n                    load_phonopy_yaml=False,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:295: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1766: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cd4100>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n----------------------------- Captured stdout call -----------------------------\n\"/app/repo_to_process/test/cui/dim.conf\" was read as phonopy configuration file.\n______________________________ test_config_option ______________________________\n\n    def test_config_option():\n        \"\"\"Test phonopy-yaml --config.\"\"\"\n        pytest.importorskip(\"symfc\")\n    \n        with tempfile.TemporaryDirectory() as temp_dir:\n            original_cwd = pathlib.Path.cwd()\n            os.chdir(temp_dir)\n    \n            try:\n                argparse_control = _get_phonopy_args(\n                    filename=cwd / \"..\" / \"phonopy_params_NaCl-1.00.yaml.xz\",\n                    conf_filename=cwd / \"mesh.conf\",\n                    load_phonopy_yaml=True,\n                )\n                with pytest.raises(SystemExit) as excinfo:\n>                   main(**argparse_control)\n\ntest/cui/test_phonopy_cui.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/phonopy_script.py:1951: in main\n    phonon = _init_phonopy(settings, cell_info, symprec, log_level)\nphonopy/cui/phonopy_script.py:1777: in _init_phonopy\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3ca16c0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n----------------------------- Captured stdout call -----------------------------\n\"/app/repo_to_process/test/cui/mesh.conf\" was read as phonopy configuration file.\n_____________________________ test_read_cell_yaml ______________________________\n\nhelper_methods = <class 'conftest.helper_methods.<locals>.HelperMethods'>\n\n    def test_read_cell_yaml(helper_methods):\n        \"\"\"Test to parse phonopy_symcells.yaml like file.\"\"\"\n        filename = cwd / \"phonopy_symcells_NaCl.yaml\"\n        cell = read_cell_yaml(filename)\n        _compare_NaCl_convcell(cell, helper_methods.compare_cells)\n    \n        pcell = read_cell_yaml(filename, cell_type=\"primitive\")\n>       helper_methods.compare_cells(pcell, get_primitive(cell, \"F\"))\n\ntest/interface/test_phonopy_yaml.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c4e350>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________ test_read_cell_yaml_with_stream ________________________\n\nhelper_methods = <class 'conftest.helper_methods.<locals>.HelperMethods'>\n\n    def test_read_cell_yaml_with_stream(helper_methods):\n        \"\"\"Test to parse phonopy_symcells.yaml like file.\"\"\"\n        filename = cwd / \"phonopy_symcells_NaCl.yaml\"\n        with open(filename) as fp:\n            cell = _get_unitcell(fp)\n            _compare_NaCl_convcell(cell, helper_methods.compare_cells)\n            fp.seek(0)\n            pcell = read_cell_yaml(fp, cell_type=\"primitive\")\n>           helper_methods.compare_cells(pcell, get_primitive(cell, \"F\"))\n\ntest/interface/test_phonopy_yaml.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cb62f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________________ test_pt03_P2 _________________________________\n\n    def test_pt03_P2():\n        \"\"\"Test of pt03_P2.\"\"\"\n        data = _load_data(chars_P2)\n>       phonon = _get_phonon(\"P2\", [3, 2, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:758: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c7a440>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________________ test_pt04_Pc _________________________________\n\n    def test_pt04_Pc():\n        \"\"\"Test of pt04_Pc.\"\"\"\n        data = _load_data(chars_Pc)\n>       phonon = _get_phonon(\"Pc\", [2, 2, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:770: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fb0490>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________________ test_pt06_P222_1 _______________________________\n\n    def test_pt06_P222_1():\n        \"\"\"Test of pt06_P222_1.\"\"\"\n        data = _load_data(chars_P222_1)\n>       phonon = _get_phonon(\"P222_1\", [2, 2, 1], np.eye(3))\n\ntest/phonon/test_irreps.py:782: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3cb7310>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________________ test_pt07_Amm2 ________________________________\n\n    def test_pt07_Amm2():\n        \"\"\"Test of pt07_Amm2.\"\"\"\n        data = _load_data(chars_Amm2)\n>       phonon = _get_phonon(\"Amm2\", [3, 2, 2], [[1, 0, 0], [0, 0.5, -0.5], [0, 0.5, 0.5]])\n\ntest/phonon/test_irreps.py:802: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3f95720>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________________ test_pt09_P4_1 ________________________________\n\n    def test_pt09_P4_1():\n        \"\"\"Test of pt09_P4_1.\"\"\"\n        data = _load_data(chars_P4_1)\n>       phonon = _get_phonon(\"P4_1\", [2, 2, 1], np.eye(3))\n\ntest/phonon/test_irreps.py:820: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c7b1c0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________________ test_pt10_Pbar4 ________________________________\n\n    def test_pt10_Pbar4():\n        \"\"\"Test of pt10_Pbar4.\"\"\"\n        data = _load_data(chars_Pbar4)\n>       phonon = _get_phonon(\"P-4\", [1, 1, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:832: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3a4a590>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________________ test_pt11_I4_1a ________________________________\n\n    def test_pt11_I4_1a():\n        \"\"\"Test of pt11_I4_1a.\"\"\"\n        data = _load_data(chars_I4_1a)\n>       phonon = _get_phonon(\n            \"I4_1a\", [2, 2, 1], np.array([[-1, 1, 1], [1, -1, 1], [1, 1, -1]]) * 0.5\n        )\n\ntest/phonon/test_irreps.py:848: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b8d9f0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________________ test_pt13_P4mm ________________________________\n\n    def test_pt13_P4mm():\n        \"\"\"Test of pt13_P4mm.\"\"\"\n        data = _load_data(chars_P4mm)\n>       phonon = _get_phonon(\"P4mm\", [3, 3, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:869: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fe93c0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_____________________________ test_pt14_Pbar42_1m ______________________________\n\n    def test_pt14_Pbar42_1m():\n        \"\"\"Test of pt14_Pbar42_1m.\"\"\"\n        data = _load_data(chars_Pbar42_1m)\n>       phonon = _get_phonon(\"P-42_1m\", [2, 2, 3], np.eye(3))\n\ntest/phonon/test_irreps.py:887: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3aa1ed0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________________ test_pt19_P3m1 ________________________________\n\n    def test_pt19_P3m1():\n        \"\"\"Test of pt19_P3m1.\"\"\"\n        data = _load_data(chars_P3m1)\n>       phonon = _get_phonon(\"P3m1\", [4, 4, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c57f40>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________________ test_pt19_P31m ________________________________\n\n    def test_pt19_P31m():\n        \"\"\"Test of pt19_P31m.\"\"\"\n        data = _load_data(chars_P31m)\n>       phonon = _get_phonon(\"P31m\", [1, 1, 3], np.eye(3))\n\ntest/phonon/test_irreps.py:924: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c4d750>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________________ test_pt20_Pbar3m1 _______________________________\n\n    def test_pt20_Pbar3m1():\n        \"\"\"Test of pt20_Pbar3m1.\"\"\"\n        data = _load_data(chars_Pbar3m1)\n>       phonon = _get_phonon(\"P-3m1\", [3, 3, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:942: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c1ce80>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________________ test_pt21_P6 _________________________________\n\n    def test_pt21_P6():\n        \"\"\"Test of pt21_P6.\"\"\"\n        data = _load_data(chars_P6)\n>       phonon = _get_phonon(\"P6\", [2, 2, 1], np.eye(3))\n\ntest/phonon/test_irreps.py:962: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b254b0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________________ test_pt22_Pbar6 ________________________________\n\n    def test_pt22_Pbar6():\n        \"\"\"Test of pt22_Pbar6.\"\"\"\n        data = _load_data(chars_Pbar6)\n>       phonon = _get_phonon(\"P-6\", [1, 1, 3], np.eye(3))\n\ntest/phonon/test_irreps.py:979: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3f97b20>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________________ test_pt24_P6_222 _______________________________\n\n    def test_pt24_P6_222():\n        \"\"\"Test of pt24_P6_222.\"\"\"\n        data = _load_data(chars_P6_222)\n>       phonon = _get_phonon(\"P6_222\", [2, 2, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:999: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3a52980>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________________ test_pt26_Pbar6m2 _______________________________\n\n    def test_pt26_Pbar6m2():\n        \"\"\"Test of pt26_Pbar6m2.\"\"\"\n        data = _load_data(chars_Pbar6m2)\n>       phonon = _get_phonon(\"P-6m2\", [2, 2, 3], np.eye(3))\n\ntest/phonon/test_irreps.py:1019: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b92f50>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________________ test_pt26_Pbar62m _______________________________\n\n    def test_pt26_Pbar62m():\n        \"\"\"Test of pt26_Pbar62m.\"\"\"\n        data = _load_data(chars_Pbar62m)\n>       phonon = _get_phonon(\"P-62m\", [1, 1, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:1037: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bed240>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________________ test_pt28_P2_13 ________________________________\n\n    def test_pt28_P2_13():\n        \"\"\"Test of pt28_P2_13.\"\"\"\n        data = _load_data(chars_P2_13)\n>       phonon = _get_phonon(\"P2_13\", [2, 2, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:1056: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b8f340>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________________ test_pt29_Pabar3 _______________________________\n\n    def test_pt29_Pabar3():\n        \"\"\"Test of pt29_Pabar3.\"\"\"\n        data = _load_data(chars_Pabar3)\n>       phonon = _get_phonon(\"Pa-3\", [2, 2, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:1074: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f384ba00>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________________ test_pt30_P4_332 _______________________________\n\n    def test_pt30_P4_332():\n        \"\"\"Test of pt30_P4_332.\"\"\"\n        data = _load_data(chars_P4_332)\n>       phonon = _get_phonon(\"P4_332\", [1, 1, 1], np.eye(3))\n\ntest/phonon/test_irreps.py:1117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c1f100>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________________ test_pt31_Pbar43m _______________________________\n\n    def test_pt31_Pbar43m():\n        \"\"\"Test of pt31_Pbar43m.\"\"\"\n        data = _load_data(chars_Pbar43m)\n>       phonon = _get_phonon(\"P-43m\", [2, 2, 2], np.eye(3))\n\ntest/phonon/test_irreps.py:1160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_irreps.py:1203: in _get_phonon\n    phonon = phonopy.load(\nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3ae5c00>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________________ test_Amm2[langs0] _______________________________\n\nlangs = ('C', 'C')\n\n    @pytest.mark.parametrize(\"langs\", [(\"C\", \"C\"), (\"Py\", \"C\"), (\"C\", \"Py\")])\n    def test_Amm2(langs):\n        \"\"\"Test of DOS calculation using TetrahedronMesh for Amm2 crystal.\"\"\"\n        data = np.loadtxt(StringIO(dos_str))\n>       phonon = _get_phonon(\"Amm2\", [3, 2, 2], [[1, 0, 0], [0, 0.5, -0.5], [0, 0.5, 0.5]])\n\ntest/phonon/test_tetrahedron_mesh.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_tetrahedron_mesh.py:72: in _get_phonon\n    phonon = Phonopy(cell, np.diag(dim), primitive_matrix=pmat)\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3b58640>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________________ test_Amm2[langs1] _______________________________\n\nlangs = ('Py', 'C')\n\n    @pytest.mark.parametrize(\"langs\", [(\"C\", \"C\"), (\"Py\", \"C\"), (\"C\", \"Py\")])\n    def test_Amm2(langs):\n        \"\"\"Test of DOS calculation using TetrahedronMesh for Amm2 crystal.\"\"\"\n        data = np.loadtxt(StringIO(dos_str))\n>       phonon = _get_phonon(\"Amm2\", [3, 2, 2], [[1, 0, 0], [0, 0.5, -0.5], [0, 0.5, 0.5]])\n\ntest/phonon/test_tetrahedron_mesh.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_tetrahedron_mesh.py:72: in _get_phonon\n    phonon = Phonopy(cell, np.diag(dim), primitive_matrix=pmat)\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3fb1300>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________________________ test_Amm2[langs2] _______________________________\n\nlangs = ('C', 'Py')\n\n    @pytest.mark.parametrize(\"langs\", [(\"C\", \"C\"), (\"Py\", \"C\"), (\"C\", \"Py\")])\n    def test_Amm2(langs):\n        \"\"\"Test of DOS calculation using TetrahedronMesh for Amm2 crystal.\"\"\"\n        data = np.loadtxt(StringIO(dos_str))\n>       phonon = _get_phonon(\"Amm2\", [3, 2, 2], [[1, 0, 0], [0, 0.5, -0.5], [0, 0.5, 0.5]])\n\ntest/phonon/test_tetrahedron_mesh.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/phonon/test_tetrahedron_mesh.py:72: in _get_phonon\n    phonon = Phonopy(cell, np.diag(dim), primitive_matrix=pmat)\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3c7dde0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_________________________ test_unit_conversion_factor __________________________\n\n    def test_unit_conversion_factor():\n        \"\"\"Test phonopy_load with phonopy_params.yaml.\"\"\"\n>       ph = phonopy.load(\n            cwd / \"..\" / \"phonopy_params_NaCl-fd.yaml.xz\", produce_fc=False, log_level=2\n        )\n\ntest/phonopy_load/test_phonopy_load.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3818460>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________________ test_unit_conversion_factor_QE ________________________\n\n    def test_unit_conversion_factor_QE():\n        \"\"\"Test phonopy_load with QE phonopy_params.yaml.\"\"\"\n>       ph = phonopy.load(\n            cwd / \"..\" / \"phonopy_params_NaCl-QE.yaml.xz\", produce_fc=False, log_level=2\n        )\n\ntest/phonopy_load/test_phonopy_load.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3a51480>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n----------------------------- Captured stdout call -----------------------------\nSet \"qe\" mode.\n______________ test_get_primitive_convcell_Cr_with_magmoms[False] ______________\n\nconvcell_cr = <phonopy.structure.atoms.PhonopyAtoms object at 0x7f41f3cbb970>\nis_ncl = False\nhelper_methods = <class 'conftest.helper_methods.<locals>.HelperMethods'>\n\n    @pytest.mark.parametrize(\"is_ncl\", [False, True])\n    def test_get_primitive_convcell_Cr_with_magmoms(\n        convcell_cr: PhonopyAtoms, is_ncl: bool, helper_methods: Callable\n    ):\n        \"\"\"Test get_primitive by Cr with magmoms.\"\"\"\n        if is_ncl:\n            convcell_cr.magnetic_moments = [[0, 0, 1], [0, 0, -1]]\n        else:\n            convcell_cr.magnetic_moments = [1, -1]\n        smat = [[2, 0, 0], [0, 2, 0], [0, 0, 2]]\n        scell = get_supercell(convcell_cr, smat, is_old_style=True)\n        pmat = np.linalg.inv(smat)\n>       pcell = get_primitive(scell, primitive_matrix=pmat)\n\ntest/structure/test_cells.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bec310>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n______________ test_get_primitive_convcell_Cr_with_magmoms[True] _______________\n\nconvcell_cr = <phonopy.structure.atoms.PhonopyAtoms object at 0x7f41f3cbb970>\nis_ncl = True\nhelper_methods = <class 'conftest.helper_methods.<locals>.HelperMethods'>\n\n    @pytest.mark.parametrize(\"is_ncl\", [False, True])\n    def test_get_primitive_convcell_Cr_with_magmoms(\n        convcell_cr: PhonopyAtoms, is_ncl: bool, helper_methods: Callable\n    ):\n        \"\"\"Test get_primitive by Cr with magmoms.\"\"\"\n        if is_ncl:\n            convcell_cr.magnetic_moments = [[0, 0, 1], [0, 0, -1]]\n        else:\n            convcell_cr.magnetic_moments = [1, -1]\n        smat = [[2, 0, 0], [0, 2, 0], [0, 0, 2]]\n        scell = get_supercell(convcell_cr, smat, is_old_style=True)\n        pmat = np.linalg.inv(smat)\n>       pcell = get_primitive(scell, primitive_matrix=pmat)\n\ntest/structure/test_cells.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3bca1d0>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n________________ test_sparse_to_dense_and_dense_to_sparse_al2o3 ________________\n\nconvcell_al2o3 = <phonopy.structure.atoms.PhonopyAtoms object at 0x7f41f3819030>\n\n    def test_sparse_to_dense_and_dense_to_sparse_al2o3(convcell_al2o3: PhonopyAtoms):\n        \"\"\"Test for sparse_to_dense_svecs and dense_to_sparse_svecs by Al2O3.\"\"\"\n        smat = np.diag([3, 3, 2])\n        scell = get_supercell(convcell_al2o3, smat)\n    \n        pmat = np.diag([1.0 / 3, 1.0 / 3, 1.0 / 2]) @ get_primitive_matrix(\"R\")\n>       pcell = get_primitive(scell, primitive_matrix=pmat)\n\ntest/structure/test_cells.py:413: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f3818910>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n_______________________ test_collinear_magnetic_symmetry _______________________\n\nconvcell_cr = <phonopy.structure.atoms.PhonopyAtoms object at 0x7f41f3cbb970>\n\n    def test_collinear_magnetic_symmetry(convcell_cr: PhonopyAtoms):\n        \"\"\"Test symmetry search with collinear magnetic moments.\"\"\"\n        symprec = 1e-5\n        symmetry_nonspin = Symmetry(convcell_cr, symprec=symprec)\n        atom_map_nonspin = symmetry_nonspin.get_map_atoms()\n        len_sym_nonspin = len(symmetry_nonspin.symmetry_operations[\"rotations\"])\n    \n        cell_withspin = convcell_cr.copy()\n        cell_withspin.magnetic_moments = [1, -1]\n        symmetry_withspin = Symmetry(cell_withspin, symprec=symprec)\n        atom_map_withspin = symmetry_withspin.get_map_atoms()\n        len_sym_withspin = len(symmetry_withspin.symmetry_operations[\"rotations\"])\n    \n        cell_brokenspin = convcell_cr.copy()\n        cell_brokenspin.magnetic_moments = [1, -2]\n        symmetry_brokenspin = Symmetry(cell_brokenspin, symprec=symprec)\n        atom_map_brokenspin = symmetry_brokenspin.get_map_atoms()\n        len_sym_brokenspin = len(symmetry_brokenspin.symmetry_operations[\"rotations\"])\n    \n        assert (atom_map_nonspin == atom_map_withspin).all()\n        assert (atom_map_nonspin != atom_map_brokenspin).any()\n>       assert len_sym_nonspin == len_sym_withspin\nE       assert 32 == 96\n\ntest/structure/test_symmetry.py:62: AssertionError\n_________________ test_non_collinear_magnetic_symmetry[False] __________________\n\nconvcell_cr = <phonopy.structure.atoms.PhonopyAtoms object at 0x7f41f3cbb970>\nis_flat = False\n\n    @pytest.mark.parametrize(\"is_flat\", [False, True])\n    def test_non_collinear_magnetic_symmetry(convcell_cr: PhonopyAtoms, is_flat: bool):\n        \"\"\"Test symmetry search with non-collinear magnetic moments.\"\"\"\n        symprec = 1e-5\n        symmetry_nonspin = Symmetry(convcell_cr, symprec=symprec)\n        atom_map_nonspin = symmetry_nonspin.get_map_atoms()\n        len_sym_nonspin = len(symmetry_nonspin.symmetry_operations[\"rotations\"])\n    \n        cell_withspin = convcell_cr.copy()\n        if is_flat:\n            cell_withspin.magnetic_moments = [0, 0, 1, 0, 0, -1]\n        else:\n            cell_withspin.magnetic_moments = [[0, 0, 1], [0, 0, -1]]\n        symmetry_withspin = Symmetry(cell_withspin, symprec=symprec)\n        atom_map_withspin = symmetry_withspin.get_map_atoms()\n        len_sym_withspin = len(symmetry_withspin.symmetry_operations[\"rotations\"])\n    \n        cell_brokenspin = convcell_cr.copy()\n        if is_flat:\n            cell_brokenspin.magnetic_moments = [1, 1, 1, -2, -2, -2]\n        else:\n            cell_brokenspin.magnetic_moments = [[1, 1, 1], [-2, -2, -2]]\n        symmetry_brokenspin = Symmetry(cell_brokenspin, symprec=symprec)\n        atom_map_brokenspin = symmetry_brokenspin.get_map_atoms()\n        len_sym_brokenspin = len(symmetry_brokenspin.symmetry_operations[\"rotations\"])\n    \n        assert (atom_map_nonspin == atom_map_withspin).all()\n        assert (atom_map_nonspin == atom_map_brokenspin).any()\n>       assert len_sym_nonspin == 96\nE       assert 32 == 96\n\ntest/structure/test_symmetry.py:94: AssertionError\n__________________ test_non_collinear_magnetic_symmetry[True] __________________\n\nconvcell_cr = <phonopy.structure.atoms.PhonopyAtoms object at 0x7f41f3cbb970>\nis_flat = True\n\n    @pytest.mark.parametrize(\"is_flat\", [False, True])\n    def test_non_collinear_magnetic_symmetry(convcell_cr: PhonopyAtoms, is_flat: bool):\n        \"\"\"Test symmetry search with non-collinear magnetic moments.\"\"\"\n        symprec = 1e-5\n        symmetry_nonspin = Symmetry(convcell_cr, symprec=symprec)\n        atom_map_nonspin = symmetry_nonspin.get_map_atoms()\n        len_sym_nonspin = len(symmetry_nonspin.symmetry_operations[\"rotations\"])\n    \n        cell_withspin = convcell_cr.copy()\n        if is_flat:\n            cell_withspin.magnetic_moments = [0, 0, 1, 0, 0, -1]\n        else:\n            cell_withspin.magnetic_moments = [[0, 0, 1], [0, 0, -1]]\n        symmetry_withspin = Symmetry(cell_withspin, symprec=symprec)\n        atom_map_withspin = symmetry_withspin.get_map_atoms()\n        len_sym_withspin = len(symmetry_withspin.symmetry_operations[\"rotations\"])\n    \n        cell_brokenspin = convcell_cr.copy()\n        if is_flat:\n            cell_brokenspin.magnetic_moments = [1, 1, 1, -2, -2, -2]\n        else:\n            cell_brokenspin.magnetic_moments = [[1, 1, 1], [-2, -2, -2]]\n        symmetry_brokenspin = Symmetry(cell_brokenspin, symprec=symprec)\n        atom_map_brokenspin = symmetry_brokenspin.get_map_atoms()\n        len_sym_brokenspin = len(symmetry_brokenspin.symmetry_operations[\"rotations\"])\n    \n        assert (atom_map_nonspin == atom_map_withspin).all()\n        assert (atom_map_nonspin == atom_map_brokenspin).any()\n>       assert len_sym_nonspin == 96\nE       assert 32 == 96\n\ntest/structure/test_symmetry.py:94: AssertionError\n________________ test_get_all_tetrahedra_relative_grid_address _________________\n\nlang = 'C'\n\n    def get_all_tetrahedra_relative_grid_address(lang=\"C\"):\n        \"\"\"Return relative grid addresses dataset.\n    \n        This exists only for the test.\n    \n        \"\"\"\n        try:\n>           import phonopy._phonopy as phonoc\nE           ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/tetrahedron_method.py:80: ModuleNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_get_all_tetrahedra_relative_grid_address():\n        \"\"\"Test of get_all_tetrahedra_relative_grid_address.\"\"\"\n>       rel_ga = get_all_tetrahedra_relative_grid_address()\n\ntest/structure/test_tetrahedron_method.py:1199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlang = 'C'\n\n    def get_all_tetrahedra_relative_grid_address(lang=\"C\"):\n        \"\"\"Return relative grid addresses dataset.\n    \n        This exists only for the test.\n    \n        \"\"\"\n        try:\n            import phonopy._phonopy as phonoc\n        except ImportError:\n            import sys\n    \n            print(\"Phonopy C-extension has to be built properly.\")\n>           sys.exit(1)\nE           SystemExit: 1\n\nphonopy/structure/tetrahedron_method.py:85: SystemExit\n----------------------------- Captured stdout call -----------------------------\nPhonopy C-extension has to be built properly.\n____________________ test_get_tetrahedra_integration_weight ____________________\n\nomegas = [7.75038996, 8.45225776]\ntetrahedra_omegas = [[8.31845176, 8.69248151, 8.78939432, 8.66179133], [8.31845176, 8.69248151, 8.57211855, 8.66179133], [8.31845176, 8.30..., 8.66179133], [8.31845176, 8.15781566, 8.57211855, 8.66179133], [8.31845176, 8.15781566, 8.16360975, 8.66179133], ...]\nfunction = 'I'\n\n    def get_tetrahedra_integration_weight(omegas, tetrahedra_omegas, function=\"I\"):\n        \"\"\"Return integration weights.\n    \n        Parameters\n        ----------\n        omegas : float or list of float values\n            Energy(s) at which the integration weight(s) are computed.\n        tetrahedra_omegas : ndarray of list of list\n            Energies at vertices of 24 tetrahedra\n            shape=(24, 4)\n            dytpe='double'\n        function : str, 'I' or 'J'\n            'J' is for intetration and 'I' is for its derivative.\n    \n        \"\"\"\n        try:\n>           import phonopy._phonopy as phonoc\nE           ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/tetrahedron_method.py:115: ModuleNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_get_tetrahedra_integration_weight():\n        \"\"\"Test of get_tetrahedra_integration_weight.\"\"\"\n>       iw_I = get_tetrahedra_integration_weight(freqs, tetra_freqs, function=\"I\")\n\ntest/structure/test_tetrahedron_method.py:1207: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nomegas = [7.75038996, 8.45225776]\ntetrahedra_omegas = [[8.31845176, 8.69248151, 8.78939432, 8.66179133], [8.31845176, 8.69248151, 8.57211855, 8.66179133], [8.31845176, 8.30..., 8.66179133], [8.31845176, 8.15781566, 8.57211855, 8.66179133], [8.31845176, 8.15781566, 8.16360975, 8.66179133], ...]\nfunction = 'I'\n\n    def get_tetrahedra_integration_weight(omegas, tetrahedra_omegas, function=\"I\"):\n        \"\"\"Return integration weights.\n    \n        Parameters\n        ----------\n        omegas : float or list of float values\n            Energy(s) at which the integration weight(s) are computed.\n        tetrahedra_omegas : ndarray of list of list\n            Energies at vertices of 24 tetrahedra\n            shape=(24, 4)\n            dytpe='double'\n        function : str, 'I' or 'J'\n            'J' is for intetration and 'I' is for its derivative.\n    \n        \"\"\"\n        try:\n            import phonopy._phonopy as phonoc\n        except ImportError:\n            import sys\n    \n            print(\"Phonopy C-extension has to be built properly.\")\n>           sys.exit(1)\nE           SystemExit: 1\n\nphonopy/structure/tetrahedron_method.py:120: SystemExit\n----------------------------- Captured stdout call -----------------------------\nPhonopy C-extension has to be built properly.\n_______________ test_get_tetrahedra_integration_weight_one_freq ________________\n\nomegas = 7.75038996\ntetrahedra_omegas = [[8.31845176, 8.69248151, 8.78939432, 8.66179133], [8.31845176, 8.69248151, 8.57211855, 8.66179133], [8.31845176, 8.30..., 8.66179133], [8.31845176, 8.15781566, 8.57211855, 8.66179133], [8.31845176, 8.15781566, 8.16360975, 8.66179133], ...]\nfunction = 'I'\n\n    def get_tetrahedra_integration_weight(omegas, tetrahedra_omegas, function=\"I\"):\n        \"\"\"Return integration weights.\n    \n        Parameters\n        ----------\n        omegas : float or list of float values\n            Energy(s) at which the integration weight(s) are computed.\n        tetrahedra_omegas : ndarray of list of list\n            Energies at vertices of 24 tetrahedra\n            shape=(24, 4)\n            dytpe='double'\n        function : str, 'I' or 'J'\n            'J' is for intetration and 'I' is for its derivative.\n    \n        \"\"\"\n        try:\n>           import phonopy._phonopy as phonoc\nE           ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/tetrahedron_method.py:115: ModuleNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_get_tetrahedra_integration_weight_one_freq():\n        \"\"\"Test of get_tetrahedra_integration_weight with float as first parameter.\"\"\"\n        iw_I = []\n        iw_J = []\n        for i in range(2):\n            iw_I.append(\n>               get_tetrahedra_integration_weight(freqs[i], tetra_freqs, function=\"I\")\n            )\n\ntest/structure/test_tetrahedron_method.py:1219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nomegas = 7.75038996\ntetrahedra_omegas = [[8.31845176, 8.69248151, 8.78939432, 8.66179133], [8.31845176, 8.69248151, 8.57211855, 8.66179133], [8.31845176, 8.30..., 8.66179133], [8.31845176, 8.15781566, 8.57211855, 8.66179133], [8.31845176, 8.15781566, 8.16360975, 8.66179133], ...]\nfunction = 'I'\n\n    def get_tetrahedra_integration_weight(omegas, tetrahedra_omegas, function=\"I\"):\n        \"\"\"Return integration weights.\n    \n        Parameters\n        ----------\n        omegas : float or list of float values\n            Energy(s) at which the integration weight(s) are computed.\n        tetrahedra_omegas : ndarray of list of list\n            Energies at vertices of 24 tetrahedra\n            shape=(24, 4)\n            dytpe='double'\n        function : str, 'I' or 'J'\n            'J' is for intetration and 'I' is for its derivative.\n    \n        \"\"\"\n        try:\n            import phonopy._phonopy as phonoc\n        except ImportError:\n            import sys\n    \n            print(\"Phonopy C-extension has to be built properly.\")\n>           sys.exit(1)\nE           SystemExit: 1\n\nphonopy/structure/tetrahedron_method.py:120: SystemExit\n----------------------------- Captured stdout call -----------------------------\nPhonopy C-extension has to be built properly.\n_______________________________ test_parse_BORN ________________________________\n\n    def test_parse_BORN():\n        \"\"\"Test of parse_BORN.\"\"\"\n>       ph = phonopy.load(cwd / \"phonopy_disp_NaCl.yaml\")\n\ntest/test_file_IO.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nphonopy/cui/load.py:280: in load\n    phonon = Phonopy(\nphonopy/api_phonopy.py:320: in __init__\n    self._build_primitive_cell()\nphonopy/api_phonopy.py:3479: in _build_primitive_cell\n    self._primitive = get_primitive(\nphonopy/structure/cells.py:801: in get_primitive\n    return Primitive(\nphonopy/structure/cells.py:347: in __init__\n    self._run(supercell, positions_to_reorder=positions_to_reorder)\nphonopy/structure/cells.py:465: in _run\n    (self._smallest_vectors, self._multiplicity) = self._get_smallest_vectors(\nphonopy/structure/cells.py:562: in _get_smallest_vectors\n    svecs, multi = get_smallest_vectors(\nphonopy/structure/cells.py:1013: in get_smallest_vectors\n    spairs = ShortestPairs(\nphonopy/structure/cells.py:1080: in __init__\n    svecs, multi = self._run_dense()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <phonopy.structure.cells.ShortestPairs object at 0x7f41f252ee30>\n\n    def _run_dense(self):\n        \"\"\"Find shortest atomic pair vectors.\n    \n        Returns\n        -------\n        shortest_vectors : ndarray\n            Shortest vectors in supercell coordinates.\n            shape=(sum(multiplicities[:, :, 0], 3), dtype='double'\n        multiplicities : ndarray\n            Number of equidistance shortest vectors. The last dimension\n            indicates [0] multipliticy at the pair of atoms in the supercell\n            and primitive cell, and [1] integral of multiplicities to\n            this pair, i.e., which indicates address used in\n            `shortest_vectors`.\n            shape=(size_super, size_prim, 2), dtype='int64'\n    \n        \"\"\"\n        (\n            lattice_points,\n            supercell_fracs,\n            primitive_fracs,\n            trans_mat_inv,\n            reduced_bases,\n        ) = self._transform_cell_basis(\"int64\")\n    \n        # Phase1 : Set multiplicity.\n        # shortest_vectors is a dummy array.\n        shortest_vectors = np.zeros((1, 3), dtype=\"double\", order=\"C\")\n        multiplicity = np.zeros(\n            (len(supercell_fracs), len(primitive_fracs), 2), dtype=\"int64\", order=\"C\"\n        )\n>       import phonopy._phonopy as phonoc\nE       ModuleNotFoundError: No module named 'phonopy._phonopy'\n\nphonopy/structure/cells.py:1139: ModuleNotFoundError\n=========================== short test summary info ============================\nFAILED test/api/test_api_phonopy.py::test_Phonopy_calculator - ModuleNotFound...\nFAILED test/api/test_api_phonopy.py::test_Phonopy_calculator_QE - ModuleNotFo...\nFAILED test/cui/test_phonopy_cui.py::test_phonopy_disp_Cr[False] - ModuleNotF...\nFAILED test/cui/test_phonopy_cui.py::test_phonopy_disp_Cr[True] - ModuleNotFo...\nFAILED test/cui/test_phonopy_cui.py::test_phonopy_load[False] - ModuleNotFoun...\nFAILED test/cui/test_phonopy_cui.py::test_phonopy_load[True] - ModuleNotFound...\nFAILED test/cui/test_phonopy_cui.py::test_unit_conversion_factor[False] - Mod...\nFAILED test/cui/test_phonopy_cui.py::test_unit_conversion_factor[True] - Modu...\nFAILED test/cui/test_phonopy_cui.py::test_unit_conversion_factor_QE[False] - ...\nFAILED test/cui/test_phonopy_cui.py::test_unit_conversion_factor_QE[True] - M...\nFAILED test/cui/test_phonopy_cui.py::test_phonopy_is_check_symmetry - ModuleN...\nFAILED test/cui/test_phonopy_cui.py::test_conf_file - ModuleNotFoundError: No...\nFAILED test/cui/test_phonopy_cui.py::test_config_option - ModuleNotFoundError...\nFAILED test/interface/test_phonopy_yaml.py::test_read_cell_yaml - ModuleNotFo...\nFAILED test/interface/test_phonopy_yaml.py::test_read_cell_yaml_with_stream\nFAILED test/phonon/test_irreps.py::test_pt03_P2 - ModuleNotFoundError: No mod...\nFAILED test/phonon/test_irreps.py::test_pt04_Pc - ModuleNotFoundError: No mod...\nFAILED test/phonon/test_irreps.py::test_pt06_P222_1 - ModuleNotFoundError: No...\nFAILED test/phonon/test_irreps.py::test_pt07_Amm2 - ModuleNotFoundError: No m...\nFAILED test/phonon/test_irreps.py::test_pt09_P4_1 - ModuleNotFoundError: No m...\nFAILED test/phonon/test_irreps.py::test_pt10_Pbar4 - ModuleNotFoundError: No ...\nFAILED test/phonon/test_irreps.py::test_pt11_I4_1a - ModuleNotFoundError: No ...\nFAILED test/phonon/test_irreps.py::test_pt13_P4mm - ModuleNotFoundError: No m...\nFAILED test/phonon/test_irreps.py::test_pt14_Pbar42_1m - ModuleNotFoundError:...\nFAILED test/phonon/test_irreps.py::test_pt19_P3m1 - ModuleNotFoundError: No m...\nFAILED test/phonon/test_irreps.py::test_pt19_P31m - ModuleNotFoundError: No m...\nFAILED test/phonon/test_irreps.py::test_pt20_Pbar3m1 - ModuleNotFoundError: N...\nFAILED test/phonon/test_irreps.py::test_pt21_P6 - ModuleNotFoundError: No mod...\nFAILED test/phonon/test_irreps.py::test_pt22_Pbar6 - ModuleNotFoundError: No ...\nFAILED test/phonon/test_irreps.py::test_pt24_P6_222 - ModuleNotFoundError: No...\nFAILED test/phonon/test_irreps.py::test_pt26_Pbar6m2 - ModuleNotFoundError: N...\nFAILED test/phonon/test_irreps.py::test_pt26_Pbar62m - ModuleNotFoundError: N...\nFAILED test/phonon/test_irreps.py::test_pt28_P2_13 - ModuleNotFoundError: No ...\nFAILED test/phonon/test_irreps.py::test_pt29_Pabar3 - ModuleNotFoundError: No...\nFAILED test/phonon/test_irreps.py::test_pt30_P4_332 - ModuleNotFoundError: No...\nFAILED test/phonon/test_irreps.py::test_pt31_Pbar43m - ModuleNotFoundError: N...\nFAILED test/phonon/test_tetrahedron_mesh.py::test_Amm2[langs0] - ModuleNotFou...\nFAILED test/phonon/test_tetrahedron_mesh.py::test_Amm2[langs1] - ModuleNotFou...\nFAILED test/phonon/test_tetrahedron_mesh.py::test_Amm2[langs2] - ModuleNotFou...\nFAILED test/phonopy_load/test_phonopy_load.py::test_unit_conversion_factor - ...\nFAILED test/phonopy_load/test_phonopy_load.py::test_unit_conversion_factor_QE\nFAILED test/structure/test_cells.py::test_get_primitive_convcell_Cr_with_magmoms[False]\nFAILED test/structure/test_cells.py::test_get_primitive_convcell_Cr_with_magmoms[True]\nFAILED test/structure/test_cells.py::test_sparse_to_dense_and_dense_to_sparse_al2o3\nFAILED test/structure/test_symmetry.py::test_collinear_magnetic_symmetry - as...\nFAILED test/structure/test_symmetry.py::test_non_collinear_magnetic_symmetry[False]\nFAILED test/structure/test_symmetry.py::test_non_collinear_magnetic_symmetry[True]\nFAILED test/structure/test_tetrahedron_method.py::test_get_all_tetrahedra_relative_grid_address\nFAILED test/structure/test_tetrahedron_method.py::test_get_tetrahedra_integration_weight\nFAILED test/structure/test_tetrahedron_method.py::test_get_tetrahedra_integration_weight_one_freq\nFAILED test/test_file_IO.py::test_parse_BORN - ModuleNotFoundError: No module...\nERROR test/api/test_api_phonopy.py::test_displacements_setter_NaCl - ModuleNo...\nERROR test/api/test_api_phonopy.py::test_forces_setter_NaCl_type1 - ModuleNot...\nERROR test/api/test_api_phonopy.py::test_forces_setter_NaCl_type2 - ModuleNot...\nERROR test/api/test_api_phonopy.py::test_energies_setter_NaCl_type1 - ModuleN...\nERROR test/api/test_api_phonopy.py::test_energies_setter_NaCl_type2 - ModuleN...\nERROR test/api/test_api_phonopy.py::test_mlp_NaCl_type2 - ModuleNotFoundError...\nERROR test/api/test_api_phonopy.py::test_load_mlp_pypolymlp - ModuleNotFoundE...\nERROR test/gruneisen/test_gruneisen.py::test_gruneisen_mesh - ModuleNotFoundE...\nERROR test/gruneisen/test_gruneisen.py::test_gruneisen_band - ModuleNotFoundE...\nERROR test/harmonic/test_derivative_dynmat.py::test_ddm_nac - ModuleNotFoundE...\nERROR test/harmonic/test_derivative_dynmat.py::test_ddm_nac_wang - ModuleNotF...\nERROR test/harmonic/test_derivative_dynmat.py::test_ddm_nac_compact - ModuleN...\nERROR test/harmonic/test_derivative_dynmat.py::test_ddm_nonac - ModuleNotFoun...\nERROR test/harmonic/test_derivative_dynmat.py::test_ddm_nonac_compact - Modul...\nERROR test/harmonic/test_displacements.py::test_nacl - ModuleNotFoundError: N...\nERROR test/harmonic/test_displacements.py::test_si - ModuleNotFoundError: No ...\nERROR test/harmonic/test_displacements.py::test_sno2 - ModuleNotFoundError: N...\nERROR test/harmonic/test_displacements.py::test_tio2 - ModuleNotFoundError: N...\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp[False-None-4]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp[False-None-auto]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp[False-0.03-4]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp[False-0.03-auto]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp[True-None-4]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp[True-None-auto]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp[True-0.03-4]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp[True-0.03-auto]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp_rd_auto_estimation_factor\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp_with_random_dist[None]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp_with_random_dist[0.05]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp_with_random_dist[0.2]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp_with_random_dist_defualt[None]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp_with_random_dist_defualt[0.1]\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp_with_random_max_distance\nERROR test/harmonic/test_displacements.py::test_tio2_random_disp_plusminus - ...\nERROR test/harmonic/test_displacements.py::test_tio2_random_distances - Modul...\nERROR test/harmonic/test_displacements.py::test_zr3n4 - ModuleNotFoundError: ...\nERROR test/harmonic/test_displacements.py::test_tipn3 - ModuleNotFoundError: ...\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat[True-C] - ModuleNot...\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat[False-C] - ModuleNo...\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat[True-Py] - ModuleNo...\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat[False-Py] - ModuleN...\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat_without_hermitianize\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat_dense_svecs[C] - Mo...\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat_dense_svecs[Py] - M...\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat_gonze_lee - ModuleN...\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat_gonze_lee_short_range_fc\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat_gonze_lee_full_term\nERROR test/harmonic/test_dynamical_matrix.py::test_dynmat_wang - ModuleNotFou...\nERROR test/harmonic/test_dynmat_to_fc.py::test_ph2ph_with_nac - ModuleNotFoun...\nERROR test/harmonic/test_dynmat_to_fc.py::test_ph2ph_without_nac - ModuleNotF...\nERROR test/harmonic/test_dynmat_to_fc.py::test_with_eigenvalues - ModuleNotFo...\nERROR test/harmonic/test_dynmat_to_fc.py::test_with_dynamical_matrices[False-C]\nERROR test/harmonic/test_dynmat_to_fc.py::test_with_dynamical_matrices[True-C]\nERROR test/harmonic/test_dynmat_to_fc.py::test_with_dynamical_matrices[False-Py]\nERROR test/harmonic/test_dynmat_to_fc.py::test_with_dynamical_matrices[True-Py]\nERROR test/harmonic/test_force_constants.py::test_fc - ModuleNotFoundError: N...\nERROR test/harmonic/test_force_constants.py::test_fc_nofcsym - ModuleNotFound...\nERROR test/harmonic/test_force_constants.py::test_fc_compact_fcsym - ModuleNo...\nERROR test/harmonic/test_force_constants.py::test_fc_compact_symfc - ModuleNo...\nERROR test/harmonic/test_force_constants.py::test_fc_cutoff_radius[False] - M...\nERROR test/harmonic/test_force_constants.py::test_fc_cutoff_radius[True] - Mo...\nERROR test/harmonic/test_force_constants.py::test_fc_cutoff_radius_svecs[False-False]\nERROR test/harmonic/test_force_constants.py::test_fc_cutoff_radius_svecs[False-True]\nERROR test/harmonic/test_force_constants.py::test_fc_cutoff_radius_svecs[True-False]\nERROR test/harmonic/test_force_constants.py::test_fc_cutoff_radius_svecs[True-True]\nERROR test/harmonic/test_force_constants.py::test_rearrange_force_constants_array\nERROR test/interface/test_phonopy_yaml.py::test_write_phonopy_yaml - ModuleNo...\nERROR test/interface/test_phonopy_yaml.py::test_write_phonopy_yaml_extra - Mo...\nERROR test/interface/test_phonopy_yaml.py::test_phonopy_yaml_extended_symbol\nERROR test/interface/test_pypolymlp.py::test_pypolymlp_develop - ModuleNotFou...\nERROR test/interface/test_symfc.py::test_symfc_cutoff[None] - ModuleNotFoundE...\nERROR test/interface/test_symfc.py::test_symfc_cutoff[cutoff1] - ModuleNotFou...\nERROR test/interface/test_symfc.py::test_symmetrize_by_projector - ModuleNotF...\nERROR test/interface/test_symfc.py::test_symmetrize_by_projector_with_inconsistent_p2s\nERROR test/phonon/test_band_structure.py::test_band_structure - ModuleNotFoun...\nERROR test/phonon/test_band_structure.py::test_band_structure_gv - ModuleNotF...\nERROR test/phonon/test_band_structure.py::test_band_structure_bc - ModuleNotF...\nERROR test/phonon/test_band_structure.py::test_band_structure_write_hdf5 - Mo...\nERROR test/phonon/test_dos.py::testTotalDOS - ModuleNotFoundError: No module ...\nERROR test/phonon/test_dos.py::testTotalDOSTetrahedron - ModuleNotFoundError:...\nERROR test/phonon/test_dos.py::testProjectedlDOS - ModuleNotFoundError: No mo...\nERROR test/phonon/test_dos.py::testPartialDOSTetrahedron - ModuleNotFoundErro...\nERROR test/phonon/test_dos.py::test_get_pdos_indices - ModuleNotFoundError: N...\nERROR test/phonon/test_group_velocity.py::test_gv_nacl - ModuleNotFoundError:...\nERROR test/phonon/test_group_velocity.py::test_gv_nacl_wang - ModuleNotFoundE...\nERROR test/phonon/test_group_velocity.py::test_gv_si - ModuleNotFoundError: N...\nERROR test/phonon/test_mesh.py::test_Mesh_nofcsym - ModuleNotFoundError: No m...\nERROR test/phonon/test_mesh.py::test_Mesh_full_fcsym - ModuleNotFoundError: N...\nERROR test/phonon/test_mesh.py::test_Mesh_compact_fcsym - ModuleNotFoundError...\nERROR test/phonon/test_mesh.py::test_Mesh_full_fcsym_nonac - ModuleNotFoundEr...\nERROR test/phonon/test_mesh.py::test_Mesh_full_fcsym_wang - ModuleNotFoundErr...\nERROR test/phonon/test_mesh.py::test_Mesh_full_fcsym_si - ModuleNotFoundError...\nERROR test/phonon/test_modulation.py::test_modulation - ModuleNotFoundError: ...\nERROR test/phonon/test_moment.py::test_moment - ModuleNotFoundError: No modul...\nERROR test/phonon/test_qpoints.py::test_Qpoints - ModuleNotFoundError: No mod...\nERROR test/phonon/test_qpoints.py::test_Qpoints_with_NAC_qdirection - ModuleN...\nERROR test/phonon/test_random_displacements.py::test_random_displacements_Zr3N4\nERROR test/phonon/test_random_displacements.py::test_random_displacements_all_atoms_TiPN3\nERROR test/phonon/test_random_displacements.py::test_random_displacements_all_atoms_TiPN3_max_distance\nERROR test/phonon/test_random_displacements.py::test_tio2_random_disp_plusminus[True]\nERROR test/phonon/test_random_displacements.py::test_tio2_random_disp_plusminus[False]\nERROR test/phonon/test_random_displacements.py::test_treat_imaginary_modes - ...\nERROR test/phonon/test_thermal_displacement.py::test_ThermalDisplacements - M...\nERROR test/phonon/test_thermal_displacement.py::test_ThermalDisplacementMatrices\nERROR test/phonon/test_thermal_displacement.py::test_compare_TD_and_TDM - Mod...\nERROR test/phonon/test_thermal_properties.py::test_thermal_properties - Modul...\nERROR test/phonon/test_thermal_properties.py::test_thermal_properties_at_temperatues\nERROR test/phonon/test_thermal_properties_classical.py::test_thermal_properties\nERROR test/phonon/test_thermal_properties_classical.py::test_thermal_properties_at_temperatues\nERROR test/spectrum/test_dynamic_structure_factor.py::test_IXS_G_to_L_Si - Mo...\nERROR test/spectrum/test_dynamic_structure_factor.py::test_IXS_G_to_L_NaCl - ...\nERROR test/sscha/test_core.py::test_MLPSSCHA - ModuleNotFoundError: No module...\nERROR test/structure/test_atoms.py::test_PhonopyAtoms_with_Xn_symbol - Module...\nERROR test/structure/test_cells.py::test_compute_permutation_sno2 - ModuleNot...\nERROR test/structure/test_cells.py::test_compute_permutation_tio2 - ModuleNot...\nERROR test/structure/test_cells.py::test_compute_permutation_nacl - ModuleNot...\nERROR test/structure/test_cells.py::test_get_supercell_nacl_snf - ModuleNotFo...\nERROR test/structure/test_cells.py::test_get_primitive_convcell_nacl - Module...\nERROR test/structure/test_cells.py::test_get_primitive_convcell_nacl_with_cetring_symbol\nERROR test/structure/test_cells.py::test_get_primitive_convcell_nacl_svecs[True]\nERROR test/structure/test_cells.py::test_get_primitive_convcell_nacl_svecs[False]\nERROR test/structure/test_cells.py::test_TrimmedCell - ModuleNotFoundError: N...\nERROR test/structure/test_cells.py::test_ShortestPairs_sparse_nacl - ModuleNo...\nERROR test/structure/test_cells.py::test_ShortestPairs_dense_nacl - ModuleNot...\nERROR test/structure/test_cells.py::test_sparse_to_dense_and_dense_to_sparse_nacl\nERROR test/structure/test_cells.py::test_sparse_to_dense_and_dense_to_sparse_tipn3\nERROR test/structure/test_cells.py::test_isclose - ModuleNotFoundError: No mo...\nERROR test/structure/test_cells.py::test_isclose_with_arbitrary_order - Modul...\nERROR test/structure/test_cells.py::test_convert_to_phonopy_primitive - Modul...\nERROR test/structure/test_cells.py::test_get_supercell_with_Xn_symbol - Modul...\nERROR test/structure/test_cells.py::test_get_primitive_with_Xn_symbol - Modul...\nERROR test/structure/test_grid_points.py::test_GridPoints_NaCl_with_rotations\nERROR test/structure/test_grid_points.py::test_GridPoints_NaCl_with_rotations_fit_BZ[True]\nERROR test/structure/test_grid_points.py::test_GridPoints_NaCl_with_rotations_fit_BZ[False]\nERROR test/structure/test_grid_points.py::test_GridPoints_SnO2_with_rotations\nERROR test/structure/test_grid_points.py::test_GridPoints_SnO2_with_rotations_MP\nERROR test/structure/test_grid_points.py::test_SNF_from_GeneralizedRegularGridPoints[True]\nERROR test/structure/test_grid_points.py::test_SNF_from_GeneralizedRegularGridPoints[False]\nERROR test/structure/test_grid_points.py::test_GeneralizedRegularGridPoints_rotations_tio2[True]\nERROR test/structure/test_grid_points.py::test_GeneralizedRegularGridPoints_rotations_tio2[False]\nERROR test/structure/test_grid_points.py::test_GeneralizedRegularGridPoints_rotations_zr3n4[True-True]\nERROR test/structure/test_grid_points.py::test_GeneralizedRegularGridPoints_rotations_zr3n4[True-False]\nERROR test/structure/test_grid_points.py::test_GeneralizedRegularGridPoints_rotations_zr3n4[False-True]\nERROR test/structure/test_grid_points.py::test_GeneralizedRegularGridPoints_rotations_zr3n4[False-False]\nERROR test/structure/test_grid_points.py::test_watch_GeneralizedRegularGridPoints\nERROR test/structure/test_grid_points.py::test_length2mesh - ModuleNotFoundEr...\nERROR test/structure/test_symmetry.py::test_get_map_operations - ModuleNotFou...\nERROR test/structure/test_symmetry.py::test_symmetrize_borns_and_epsilon_nacl\nERROR test/structure/test_symmetry.py::test_symmetrize_borns_and_epsilon_tio2\nERROR test/structure/test_symmetry.py::test_Symmetry_pointgroup - ModuleNotFo...\nERROR test/structure/test_symmetry.py::test_Symmetry_nosym_s2p_map - ModuleNo...\nERROR test/structure/test_symmetry.py::test_with_pmat_and_smat - ModuleNotFou...\nERROR test/structure/test_symmetry.py::test_with_pcell - ModuleNotFoundError:...\nERROR test/structure/test_symmetry.py::test_site_symmetry - ModuleNotFoundErr...\nERROR test/structure/test_symmetry.py::test_collect_unique_rotations - Module...\nERROR test/structure/test_symmetry.py::test_reciprocal_operations - ModuleNot...\nERROR test/test_exception.py::test_ForcesetsNotFoundError - ModuleNotFoundErr...\nERROR test/unfolding/test_unfolding.py::test_Unfolding_NaCl - ModuleNotFoundE...\nERROR test/unfolding/test_unfolding.py::test_Unfolding_SC - ModuleNotFoundErr...\n======= 51 failed, 89 passed, 1 skipped, 159 errors in 478.57s (0:07:58) =======\n",
    "stderr": "",
    "execution_time": 479.2166178226471
  }
]