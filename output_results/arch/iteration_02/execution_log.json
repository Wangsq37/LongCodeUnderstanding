[
  {
    "command": "python -m setuptools_scm",
    "success": true,
    "stdout": "7.2.1.dev53+g2c5d3d39b3.d20250811\n",
    "stderr": "/usr/local/lib/python3.10/dist-packages/setuptools_scm/_integration/setuptools.py:31: RuntimeWarning: \nERROR: setuptools==59.6.0 is used in combination with setuptools-scm>=8.x\n\nYour build configuration is incomplete and previously worked by accident!\nsetuptools-scm requires setuptools>=61\n\nSuggested workaround if applicable:\n - migrating from the deprecated setup_requires mechanism to pep517/518\n   and using a pyproject.toml to declare build dependencies\n   which are reliably pre-installed before running the build tools\n\n  warnings.warn(\n",
    "execution_time": 0.25505661964416504
  },
  {
    "command": "pip install -e .",
    "success": false,
    "stdout": "Looking in indexes: https://repo.huaweicloud.com/repository/pypi/simple/\nObtaining file:///app/repo_to_process\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: numpy>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (2.2.6)\nRequirement already satisfied: scipy>=1.8 in /usr/local/lib/python3.10/dist-packages (from arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (1.15.3)\nRequirement already satisfied: pandas>=1.4 in /usr/local/lib/python3.10/dist-packages (from arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (2.3.1)\nRequirement already satisfied: statsmodels>=0.12 in /usr/local/lib/python3.10/dist-packages (from arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (0.14.5)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (2025.2)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.4->arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (1.17.0)\nRequirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.12->arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (1.0.1)\nRequirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.12->arch==7.2.1.dev53+g2c5d3d39b3.d20250811) (25.0)\nBuilding wheels for collected packages: arch\n  Building editable for arch (pyproject.toml): started\n  Building editable for arch (pyproject.toml): finished with status 'error'\nFailed to build arch\n",
    "stderr": "  error: subprocess-exited-with-error\n  \n  × Building editable for arch (pyproject.toml) did not run successfully.\n  │ exit code: 1\n  ╰─> [22 lines of output]\n      running editable_wheel\n      creating /tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch.egg-info\n      writing /tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch.egg-info/PKG-INFO\n      writing dependency_links to /tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch.egg-info/dependency_links.txt\n      writing requirements to /tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch.egg-info/requires.txt\n      writing top-level names to /tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch.egg-info/top_level.txt\n      writing manifest file '/tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch.egg-info/SOURCES.txt'\n      reading manifest template 'MANIFEST.in'\n      adding license file 'LICENSE.md'\n      writing manifest file '/tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch.egg-info/SOURCES.txt'\n      creating '/tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch-7.2.1.dev53+g2c5d3d39b3.d20250811.dist-info'\n      creating /tmp/pip-wheel-_98yrfil/.tmp-7022denl/arch-7.2.1.dev53+g2c5d3d39b3.d20250811.dist-info/WHEEL\n      running build_py\n      running build_ext\n      building 'arch.univariate.recursions' extension\n      creating /tmp/tmpfnhmgy4v.build-temp/arch/univariate\n      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION -I/tmp/pip-build-env-_eus_ufa/overlay/local/lib/python3.10/dist-packages/numpy/_core/include -I/usr/include/python3.10 -c ./arch/univariate/recursions.c -o /tmp/tmpfnhmgy4v.build-temp/arch/univariate/recursions.o\n      ./arch/univariate/recursions.c:30:10: fatal error: Python.h: No such file or directory\n         30 | #include \"Python.h\"\n            |          ^~~~~~~~~~\n      compilation terminated.\n      error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\n  ERROR: Failed building editable for arch\nerror: failed-wheel-build-for-install\n\n× Failed to build installable wheels for some pyproject.toml based projects\n╰─> arch\n",
    "execution_time": 11.053938627243042
  },
  {
    "command": "pytest",
    "success": false,
    "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.4.4, pluggy-1.6.0\nrootdir: /app/repo_to_process\nconfigfile: setup.cfg\ntestpaths: arch\nplugins: xdist-3.8.0, cov-6.2.1, anyio-4.10.0\ncollected 5071 items\n\narch/tests/test_compat.py s                                              [  0%]\narch/tests/test_data.py .........                                        [  0%]\narch/tests/test_examples.py FsFFFFFFF                                    [  0%]\narch/tests/test_tester.py ...                                            [  0%]\narch/tests/test_vendor.py .....                                          [  0%]\narch/tests/bootstrap/test_block_length.py .                              [  0%]\narch/tests/bootstrap/test_bootstrap.py ................................. [  1%]\n......s.......................                                           [  1%]\narch/tests/bootstrap/test_multiple_comparison.py ....................... [  2%]\n...                                                                      [  2%]\narch/tests/covariance/test_covariance.py ............................... [  2%]\n........................................................................ [  4%]\n........................................................................ [  5%]\n........................................................................ [  7%]\n........................................................................ [  8%]\n........................................................................ [ 10%]\n.....                                                                    [ 10%]\narch/tests/unitroot/test_dynamic_ols.py ................................ [ 10%]\n........................................................................ [ 12%]\n........................................................................ [ 13%]\n........................................................................ [ 15%]\n........................................................................ [ 16%]\n........................................................................ [ 17%]\n........................................................................ [ 19%]\n........................................................................ [ 20%]\n......................                                                   [ 21%]\narch/tests/unitroot/test_engle_granger.py .............................. [ 21%]\n.............................................................            [ 22%]\narch/tests/unitroot/test_fmols_ccr.py .................................. [ 23%]\n........................................................................ [ 25%]\n........................................................................ [ 26%]\n........................................................................ [ 27%]\n........................................................................ [ 29%]\n........................................................................ [ 30%]\n........................................................................ [ 32%]\n........................................................................ [ 33%]\n........................................................................ [ 34%]\n........................................................................ [ 36%]\n........................................................................ [ 37%]\n........................................................................ [ 39%]\n........................................................................ [ 40%]\n........................................................................ [ 42%]\n........................................................................ [ 43%]\n........................................................................ [ 44%]\n........................................................................ [ 46%]\n........................................................................ [ 47%]\n........................................................................ [ 49%]\n........................................................................ [ 50%]\n........................................................................ [ 51%]\n........................................................................ [ 53%]\n........................................................................ [ 54%]\n........................................................................ [ 56%]\n........................................................................ [ 57%]\n......................                                                   [ 58%]\narch/tests/unitroot/test_phillips_ouliaris.py .......................... [ 58%]\n........................................................................ [ 60%]\n........................................................................ [ 61%]\n........................................................................ [ 62%]\n........................................................................ [ 64%]\n........................................................................ [ 65%]\n.....................................................                    [ 66%]\narch/tests/unitroot/test_unitroot.py ................................... [ 67%]\n........................................................................ [ 68%]\n........................................................................ [ 70%]\n........................................................................ [ 71%]\n........................................................................ [ 73%]\n........................................................................ [ 74%]\n.............................................................            [ 75%]\narch/tests/univariate/test_arch_in_mean.py ............................. [ 76%]\n...                                                                      [ 76%]\narch/tests/univariate/test_base.py .                                     [ 76%]\narch/tests/univariate/test_distribution.py ............................  [ 76%]\narch/tests/univariate/test_forecast.py ................................. [ 77%]\n........................................................................ [ 79%]\n........................................................................ [ 80%]\n........................................................................ [ 81%]\n........................................................................ [ 83%]\n........................................................................ [ 84%]\n........................................................................ [ 86%]\n.................................................................        [ 87%]\narch/tests/univariate/test_mean.py ..................................... [ 88%]\n........................................................................ [ 89%]\n........................................................................ [ 90%]\n........................................................................ [ 92%]\n........................................................................ [ 93%]\n..............................................                           [ 94%]\narch/tests/univariate/test_moment.py .........                           [ 94%]\narch/tests/univariate/test_recursions.py .................sssss.......   [ 95%]\narch/tests/univariate/test_rescale.py ...                                [ 95%]\narch/tests/univariate/test_variance_forecasting.py ..................... [ 95%]\n...........................                                              [ 96%]\narch/tests/univariate/test_volatility.py ............................... [ 97%]\n............................s.....s.....s.....s.....s.....s.....s.....s. [ 98%]\n....s.....s.....s.....s..                                                [ 98%]\narch/tests/utility/test_array.py ...................                     [ 99%]\narch/tests/utility/test_cov.py .......                                   [ 99%]\narch/tests/utility/test_io.py .........                                  [ 99%]\narch/tests/utility/test_timeseries.py ..............                     [ 99%]\narch/tests/utility/test_utility.py ..                                    [100%]\n\n=================================== FAILURES ===================================\n______________________ test_notebook[bootstrap_examples] _______________________\n\nargs = (<nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f30803de5f0>, {'cell_type': 'code', 'execution_coun...ource': 'import arch.data.frenchdata\\nimport numpy as np\\nimport pandas as pd\\n\\nff = arch.data.frenchdata.load()'}, 5)\nkwargs = {'store_history': True}, name = 'MainThread'\ninner = <coroutine object NotebookClient.async_execute_cell at 0x7f30802dab20>\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\n\n    def wrapped(*args: Any, **kwargs: Any) -> Any:\n        name = threading.current_thread().name\n        inner = coro(*args, **kwargs)\n        try:\n>           asyncio.get_running_loop()\nE           RuntimeError: no running event loop\n\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:154: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nnotebook = '/app/repo_to_process/examples/bootstrap_examples.ipynb'\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\"notebook\", nbs, ids=ids)\n    @pytest.mark.skipif(SKIP, reason=REASON)\n    def test_notebook(notebook):\n        nb_name = os.path.split(notebook)[-1]\n        if nb_name in SLOW_NOTEBOOKS:\n            pytest.skip(\"Notebook is too slow to test\")\n        nb = nbformat.read(notebook, as_version=4)\n        ep = ExecutePreprocessor(allow_errors=False, timeout=240, kernel_name=kernel_name)\n>       ep.preprocess(nb, {\"metadata\": {\"path\": NOTEBOOK_DIR}})\n\narch/tests/test_examples.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:103: in preprocess\n    self.preprocess_cell(cell, resources, index)\n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:124: in preprocess_cell\n    cell = self.execute_cell(cell, index, store_history=True)\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:158: in wrapped\n    return loop.run_until_complete(inner)\n/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:1062: in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f30803de5f0>\ncell = {'cell_type': 'code', 'execution_count': 2, 'metadata': {'execution': {'iopub.status.busy': '2025-08-11T07:51:05.93230..., 'source': 'import arch.data.frenchdata\\nimport numpy as np\\nimport pandas as pd\\n\\nff = arch.data.frenchdata.load()'}\ncell_index = 5\nexec_reply = {'buffers': [], 'content': {'ename': 'ModuleNotFoundError', 'engine_info': {'engine_id': -1, 'engine_uuid': '724d9d71-...e, 'engine': '724d9d71-c0b7-44c0-a234-6d51e46bedb2', 'started': '2025-08-11T07:51:05.932554Z', 'status': 'error'}, ...}\n\n    async def _check_raise_for_error(\n        self, cell: NotebookNode, cell_index: int, exec_reply: dict[str, t.Any] | None\n    ) -> None:\n        if exec_reply is None:\n            return None\n    \n        exec_reply_content = exec_reply[\"content\"]\n        if exec_reply_content[\"status\"] != \"error\":\n            return None\n    \n        cell_allows_errors = (not self.force_raise_errors) and (\n            self.allow_errors\n            or exec_reply_content.get(\"ename\") in self.allow_error_names\n            or \"raises-exception\" in cell.metadata.get(\"tags\", [])\n        )\n        await run_hook(\n            self.on_cell_error, cell=cell, cell_index=cell_index, execute_reply=exec_reply\n        )\n        if not cell_allows_errors:\n>           raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nE           nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\nE           ------------------\nE           import arch.data.frenchdata\nE           import numpy as np\nE           import pandas as pd\nE           \nE           ff = arch.data.frenchdata.load()\nE           ------------------\nE           \nE           \nE           \u001b[0;31m---------------------------------------------------------------------------\u001b[0m\nE           \u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)\nE           Cell \u001b[0;32mIn[2], line 1\u001b[0m\nE           \u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01march\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdata\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfrenchdata\u001b[39;00m\nE           \u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mnumpy\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mnp\u001b[39;00m\nE           \u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpd\u001b[39;00m\nE           \nE           \u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'arch'\n\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:918: CellExecutionError\n________________ test_notebook[unitroot_cointegration_examples] ________________\n\nargs = (<nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f3080306f50>, {'cell_type': 'code', 'execution_coun...log_price = np.log(data)\\n\\nax = log_price.plot()\\nxl = ax.set_xlim(log_price.index.min(), log_price.index.max())'}, 4)\nkwargs = {'store_history': True}, name = 'MainThread'\ninner = <coroutine object NotebookClient.async_execute_cell at 0x7f30801badc0>\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\n\n    def wrapped(*args: Any, **kwargs: Any) -> Any:\n        name = threading.current_thread().name\n        inner = coro(*args, **kwargs)\n        try:\n>           asyncio.get_running_loop()\nE           RuntimeError: no running event loop\n\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:154: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nnotebook = '/app/repo_to_process/examples/unitroot_cointegration_examples.ipynb'\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\"notebook\", nbs, ids=ids)\n    @pytest.mark.skipif(SKIP, reason=REASON)\n    def test_notebook(notebook):\n        nb_name = os.path.split(notebook)[-1]\n        if nb_name in SLOW_NOTEBOOKS:\n            pytest.skip(\"Notebook is too slow to test\")\n        nb = nbformat.read(notebook, as_version=4)\n        ep = ExecutePreprocessor(allow_errors=False, timeout=240, kernel_name=kernel_name)\n>       ep.preprocess(nb, {\"metadata\": {\"path\": NOTEBOOK_DIR}})\n\narch/tests/test_examples.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:103: in preprocess\n    self.preprocess_cell(cell, resources, index)\n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:124: in preprocess_cell\n    cell = self.execute_cell(cell, index, store_history=True)\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:158: in wrapped\n    return loop.run_until_complete(inner)\n/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:1062: in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f3080306f50>\ncell = {'cell_type': 'code', 'execution_count': 2, 'metadata': {'execution': {'iopub.status.busy': '2025-08-11T07:51:08.46587...()\\nlog_price = np.log(data)\\n\\nax = log_price.plot()\\nxl = ax.set_xlim(log_price.index.min(), log_price.index.max())'}\ncell_index = 4\nexec_reply = {'buffers': [], 'content': {'ename': 'ModuleNotFoundError', 'engine_info': {'engine_id': -1, 'engine_uuid': '8b55eeb9-...e, 'engine': '8b55eeb9-572d-482b-9c2d-3123cd2a2f17', 'started': '2025-08-11T07:51:08.466120Z', 'status': 'error'}, ...}\n\n    async def _check_raise_for_error(\n        self, cell: NotebookNode, cell_index: int, exec_reply: dict[str, t.Any] | None\n    ) -> None:\n        if exec_reply is None:\n            return None\n    \n        exec_reply_content = exec_reply[\"content\"]\n        if exec_reply_content[\"status\"] != \"error\":\n            return None\n    \n        cell_allows_errors = (not self.force_raise_errors) and (\n            self.allow_errors\n            or exec_reply_content.get(\"ename\") in self.allow_error_names\n            or \"raises-exception\" in cell.metadata.get(\"tags\", [])\n        )\n        await run_hook(\n            self.on_cell_error, cell=cell, cell_index=cell_index, execute_reply=exec_reply\n        )\n        if not cell_allows_errors:\n>           raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nE           nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\nE           ------------------\nE           import numpy as np\nE           from arch.data import crude\nE           \nE           data = crude.load()\nE           log_price = np.log(data)\nE           \nE           ax = log_price.plot()\nE           xl = ax.set_xlim(log_price.index.min(), log_price.index.max())\nE           ------------------\nE           \nE           \nE           \u001b[0;31m---------------------------------------------------------------------------\u001b[0m\nE           \u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)\nE           Cell \u001b[0;32mIn[2], line 2\u001b[0m\nE           \u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mnumpy\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mnp\u001b[39;00m\nE           \u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01march\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdata\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m crude\nE           \u001b[1;32m      4\u001b[0m data \u001b[38;5;241m=\u001b[39m crude\u001b[38;5;241m.\u001b[39mload()\nE           \u001b[1;32m      5\u001b[0m log_price \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mlog(data)\nE           \nE           \u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'arch'\n\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:918: CellExecutionError\n_______________________ test_notebook[unitroot_examples] _______________________\n\nargs = (<nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307ff0b4c0>, {'cell_type': 'code', 'execution_coun...ault_data.BAA.copy()\\ndefault.name = \"default\"\\ndefault = default - default_data.AAA.values\\nfig = default.plot()'}, 5)\nkwargs = {'store_history': True}, name = 'MainThread'\ninner = <coroutine object NotebookClient.async_execute_cell at 0x7f30801af290>\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\n\n    def wrapped(*args: Any, **kwargs: Any) -> Any:\n        name = threading.current_thread().name\n        inner = coro(*args, **kwargs)\n        try:\n>           asyncio.get_running_loop()\nE           RuntimeError: no running event loop\n\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:154: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nnotebook = '/app/repo_to_process/examples/unitroot_examples.ipynb'\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\"notebook\", nbs, ids=ids)\n    @pytest.mark.skipif(SKIP, reason=REASON)\n    def test_notebook(notebook):\n        nb_name = os.path.split(notebook)[-1]\n        if nb_name in SLOW_NOTEBOOKS:\n            pytest.skip(\"Notebook is too slow to test\")\n        nb = nbformat.read(notebook, as_version=4)\n        ep = ExecutePreprocessor(allow_errors=False, timeout=240, kernel_name=kernel_name)\n>       ep.preprocess(nb, {\"metadata\": {\"path\": NOTEBOOK_DIR}})\n\narch/tests/test_examples.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:103: in preprocess\n    self.preprocess_cell(cell, resources, index)\n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:124: in preprocess_cell\n    cell = self.execute_cell(cell, index, store_history=True)\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:158: in wrapped\n    return loop.run_until_complete(inner)\n/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:1062: in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307ff0b4c0>\ncell = {'cell_type': 'code', 'execution_count': 2, 'metadata': {'execution': {'iopub.status.busy': '2025-08-11T07:51:10.93070... default_data.BAA.copy()\\ndefault.name = \"default\"\\ndefault = default - default_data.AAA.values\\nfig = default.plot()'}\ncell_index = 5\nexec_reply = {'buffers': [], 'content': {'ename': 'ModuleNotFoundError', 'engine_info': {'engine_id': -1, 'engine_uuid': '6ec78268-...e, 'engine': '6ec78268-5e0b-4cae-8dff-877b74a0e178', 'started': '2025-08-11T07:51:10.931020Z', 'status': 'error'}, ...}\n\n    async def _check_raise_for_error(\n        self, cell: NotebookNode, cell_index: int, exec_reply: dict[str, t.Any] | None\n    ) -> None:\n        if exec_reply is None:\n            return None\n    \n        exec_reply_content = exec_reply[\"content\"]\n        if exec_reply_content[\"status\"] != \"error\":\n            return None\n    \n        cell_allows_errors = (not self.force_raise_errors) and (\n            self.allow_errors\n            or exec_reply_content.get(\"ename\") in self.allow_error_names\n            or \"raises-exception\" in cell.metadata.get(\"tags\", [])\n        )\n        await run_hook(\n            self.on_cell_error, cell=cell, cell_index=cell_index, execute_reply=exec_reply\n        )\n        if not cell_allows_errors:\n>           raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nE           nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\nE           ------------------\nE           import arch.data.default\nE           import pandas as pd\nE           import statsmodels.api as sm\nE           \nE           default_data = arch.data.default.load()\nE           default = default_data.BAA.copy()\nE           default.name = \"default\"\nE           default = default - default_data.AAA.values\nE           fig = default.plot()\nE           ------------------\nE           \nE           \nE           \u001b[0;31m---------------------------------------------------------------------------\u001b[0m\nE           \u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)\nE           Cell \u001b[0;32mIn[2], line 1\u001b[0m\nE           \u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01march\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdata\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdefault\u001b[39;00m\nE           \u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpd\u001b[39;00m\nE           \u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mstatsmodels\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mapi\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01msm\u001b[39;00m\nE           \nE           \u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'arch'\n\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:918: CellExecutionError\n________ test_notebook[univariate_forecasting_with_exogenous_variables] ________\n\nargs = (<nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307ffa26b0>, {'cell_type': 'code', 'execution_coun...\\nx0 = x0.iloc[-1000:]\\nx1 = x1.iloc[-1000:]\\ny = y.iloc[-1000:]\\ny.index = x0.index = x1.index = np.arange(1000)'}, 3)\nkwargs = {'store_history': True}, name = 'MainThread'\ninner = <coroutine object NotebookClient.async_execute_cell at 0x7f30801afca0>\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\n\n    def wrapped(*args: Any, **kwargs: Any) -> Any:\n        name = threading.current_thread().name\n        inner = coro(*args, **kwargs)\n        try:\n>           asyncio.get_running_loop()\nE           RuntimeError: no running event loop\n\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:154: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nnotebook = '/app/repo_to_process/examples/univariate_forecasting_with_exogenous_variables.ipynb'\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\"notebook\", nbs, ids=ids)\n    @pytest.mark.skipif(SKIP, reason=REASON)\n    def test_notebook(notebook):\n        nb_name = os.path.split(notebook)[-1]\n        if nb_name in SLOW_NOTEBOOKS:\n            pytest.skip(\"Notebook is too slow to test\")\n        nb = nbformat.read(notebook, as_version=4)\n        ep = ExecutePreprocessor(allow_errors=False, timeout=240, kernel_name=kernel_name)\n>       ep.preprocess(nb, {\"metadata\": {\"path\": NOTEBOOK_DIR}})\n\narch/tests/test_examples.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:103: in preprocess\n    self.preprocess_cell(cell, resources, index)\n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:124: in preprocess_cell\n    cell = self.execute_cell(cell, index, store_history=True)\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:158: in wrapped\n    return loop.run_until_complete(inner)\n/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:1062: in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307ffa26b0>\ncell = {'cell_type': 'code', 'execution_count': 2, 'metadata': {'collapsed': False, 'jupyter': {'outputs_hidden': False}, 'py...i]\\n\\nx0 = x0.iloc[-1000:]\\nx1 = x1.iloc[-1000:]\\ny = y.iloc[-1000:]\\ny.index = x0.index = x1.index = np.arange(1000)'}\ncell_index = 3\nexec_reply = {'buffers': [], 'content': {'ename': 'ModuleNotFoundError', 'engine_info': {'engine_id': -1, 'engine_uuid': '38f79fdc-...e, 'engine': '38f79fdc-4a82-4c30-99a0-bfe5899af270', 'started': '2025-08-11T07:51:13.364350Z', 'status': 'error'}, ...}\n\n    async def _check_raise_for_error(\n        self, cell: NotebookNode, cell_index: int, exec_reply: dict[str, t.Any] | None\n    ) -> None:\n        if exec_reply is None:\n            return None\n    \n        exec_reply_content = exec_reply[\"content\"]\n        if exec_reply_content[\"status\"] != \"error\":\n            return None\n    \n        cell_allows_errors = (not self.force_raise_errors) and (\n            self.allow_errors\n            or exec_reply_content.get(\"ename\") in self.allow_error_names\n            or \"raises-exception\" in cell.metadata.get(\"tags\", [])\n        )\n        await run_hook(\n            self.on_cell_error, cell=cell, cell_index=cell_index, execute_reply=exec_reply\n        )\n        if not cell_allows_errors:\n>           raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nE           nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\nE           ------------------\nE           from arch.univariate import ARX, GARCH, ZeroMean, arch_model\nE           \nE           burn = 250\nE           \nE           x_mod = ARX(None, lags=1)\nE           x0 = x_mod.simulate([1, 0.8, 1], nobs=1000 + burn).data\nE           x1 = x_mod.simulate([2.5, 0.5, 1], nobs=1000 + burn).data\nE           \nE           resid_mod = ZeroMean(volatility=GARCH())\nE           resids = resid_mod.simulate([0.1, 0.1, 0.8], nobs=1000 + burn).data\nE           \nE           phi1 = 0.7\nE           phi0 = 3\nE           y = 10 + resids.copy()\nE           for i in range(1, y.shape[0]):\nE               y[i] = phi0 + phi1 * y[i - 1] + 2 * x0[i] - 2 * x1[i] + resids[i]\nE           \nE           x0 = x0.iloc[-1000:]\nE           x1 = x1.iloc[-1000:]\nE           y = y.iloc[-1000:]\nE           y.index = x0.index = x1.index = np.arange(1000)\nE           ------------------\nE           \nE           \nE           \u001b[0;31m---------------------------------------------------------------------------\u001b[0m\nE           \u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)\nE           Cell \u001b[0;32mIn[2], line 1\u001b[0m\nE           \u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01march\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01munivariate\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m ARX, GARCH, ZeroMean, arch_model\nE           \u001b[1;32m      3\u001b[0m burn \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m250\u001b[39m\nE           \u001b[1;32m      5\u001b[0m x_mod \u001b[38;5;241m=\u001b[39m ARX(\u001b[38;5;28;01mNone\u001b[39;00m, lags\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\nE           \nE           \u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'arch'\n\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:918: CellExecutionError\n________________ test_notebook[univariate_using_fixed_variance] ________________\n\nargs = (<nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307ff10850>, {'cell_type': 'code', 'execution_coun...ata = arch.data.vix.load()\\nvix = vix_data.vix.dropna()\\nvix.name = \"VIX Index\"\\nax = vix.plot(title=\"VIX Index\")'}, 6)\nkwargs = {'store_history': True}, name = 'MainThread'\ninner = <coroutine object NotebookClient.async_execute_cell at 0x7f30801acba0>\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\n\n    def wrapped(*args: Any, **kwargs: Any) -> Any:\n        name = threading.current_thread().name\n        inner = coro(*args, **kwargs)\n        try:\n>           asyncio.get_running_loop()\nE           RuntimeError: no running event loop\n\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:154: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nnotebook = '/app/repo_to_process/examples/univariate_using_fixed_variance.ipynb'\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\"notebook\", nbs, ids=ids)\n    @pytest.mark.skipif(SKIP, reason=REASON)\n    def test_notebook(notebook):\n        nb_name = os.path.split(notebook)[-1]\n        if nb_name in SLOW_NOTEBOOKS:\n            pytest.skip(\"Notebook is too slow to test\")\n        nb = nbformat.read(notebook, as_version=4)\n        ep = ExecutePreprocessor(allow_errors=False, timeout=240, kernel_name=kernel_name)\n>       ep.preprocess(nb, {\"metadata\": {\"path\": NOTEBOOK_DIR}})\n\narch/tests/test_examples.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:103: in preprocess\n    self.preprocess_cell(cell, resources, index)\n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:124: in preprocess_cell\n    cell = self.execute_cell(cell, index, store_history=True)\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:158: in wrapped\n    return loop.run_until_complete(inner)\n/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:1062: in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307ff10850>\ncell = {'cell_type': 'code', 'execution_count': 3, 'metadata': {'execution': {'iopub.status.busy': '2025-08-11T07:51:15.54849...ix_data = arch.data.vix.load()\\nvix = vix_data.vix.dropna()\\nvix.name = \"VIX Index\"\\nax = vix.plot(title=\"VIX Index\")'}\ncell_index = 6\nexec_reply = {'buffers': [], 'content': {'ename': 'ModuleNotFoundError', 'engine_info': {'engine_id': -1, 'engine_uuid': 'bd5a7edb-...e, 'engine': 'bd5a7edb-9118-4818-a3ac-b2dd7c61642e', 'started': '2025-08-11T07:51:15.548707Z', 'status': 'error'}, ...}\n\n    async def _check_raise_for_error(\n        self, cell: NotebookNode, cell_index: int, exec_reply: dict[str, t.Any] | None\n    ) -> None:\n        if exec_reply is None:\n            return None\n    \n        exec_reply_content = exec_reply[\"content\"]\n        if exec_reply_content[\"status\"] != \"error\":\n            return None\n    \n        cell_allows_errors = (not self.force_raise_errors) and (\n            self.allow_errors\n            or exec_reply_content.get(\"ename\") in self.allow_error_names\n            or \"raises-exception\" in cell.metadata.get(\"tags\", [])\n        )\n        await run_hook(\n            self.on_cell_error, cell=cell, cell_index=cell_index, execute_reply=exec_reply\n        )\n        if not cell_allows_errors:\n>           raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nE           nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\nE           ------------------\nE           import arch.data.vix\nE           \nE           vix_data = arch.data.vix.load()\nE           vix = vix_data.vix.dropna()\nE           vix.name = \"VIX Index\"\nE           ax = vix.plot(title=\"VIX Index\")\nE           ------------------\nE           \nE           \nE           \u001b[0;31m---------------------------------------------------------------------------\u001b[0m\nE           \u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)\nE           Cell \u001b[0;32mIn[3], line 1\u001b[0m\nE           \u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01march\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdata\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mvix\u001b[39;00m\nE           \u001b[1;32m      3\u001b[0m vix_data \u001b[38;5;241m=\u001b[39m arch\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39mvix\u001b[38;5;241m.\u001b[39mload()\nE           \u001b[1;32m      4\u001b[0m vix \u001b[38;5;241m=\u001b[39m vix_data\u001b[38;5;241m.\u001b[39mvix\u001b[38;5;241m.\u001b[39mdropna()\nE           \nE           \u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'arch'\n\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:918: CellExecutionError\n_______________ test_notebook[univariate_volatility_forecasting] _______________\n\nargs = (<nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307fdd6920>, {'cell_type': 'code', 'execution_coun..._model\\n\\ndata = arch.data.sp500.load()\\nmarket = data[\"Adj Close\"]\\nreturns = 100 * market.pct_change().dropna()'}, 4)\nkwargs = {'store_history': True}, name = 'MainThread'\ninner = <coroutine object NotebookClient.async_execute_cell at 0x7f30801adee0>\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\n\n    def wrapped(*args: Any, **kwargs: Any) -> Any:\n        name = threading.current_thread().name\n        inner = coro(*args, **kwargs)\n        try:\n>           asyncio.get_running_loop()\nE           RuntimeError: no running event loop\n\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:154: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nnotebook = '/app/repo_to_process/examples/univariate_volatility_forecasting.ipynb'\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\"notebook\", nbs, ids=ids)\n    @pytest.mark.skipif(SKIP, reason=REASON)\n    def test_notebook(notebook):\n        nb_name = os.path.split(notebook)[-1]\n        if nb_name in SLOW_NOTEBOOKS:\n            pytest.skip(\"Notebook is too slow to test\")\n        nb = nbformat.read(notebook, as_version=4)\n        ep = ExecutePreprocessor(allow_errors=False, timeout=240, kernel_name=kernel_name)\n>       ep.preprocess(nb, {\"metadata\": {\"path\": NOTEBOOK_DIR}})\n\narch/tests/test_examples.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:103: in preprocess\n    self.preprocess_cell(cell, resources, index)\n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:124: in preprocess_cell\n    cell = self.execute_cell(cell, index, store_history=True)\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:158: in wrapped\n    return loop.run_until_complete(inner)\n/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:1062: in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307fdd6920>\ncell = {'cell_type': 'code', 'execution_count': 2, 'metadata': {'execution': {'iopub.status.busy': '2025-08-11T07:51:17.79633...arch_model\\n\\ndata = arch.data.sp500.load()\\nmarket = data[\"Adj Close\"]\\nreturns = 100 * market.pct_change().dropna()'}\ncell_index = 4\nexec_reply = {'buffers': [], 'content': {'ename': 'ModuleNotFoundError', 'engine_info': {'engine_id': -1, 'engine_uuid': '2f8aaed8-...e, 'engine': '2f8aaed8-cbba-45ef-bbf4-6860ef083929', 'started': '2025-08-11T07:51:17.796599Z', 'status': 'error'}, ...}\n\n    async def _check_raise_for_error(\n        self, cell: NotebookNode, cell_index: int, exec_reply: dict[str, t.Any] | None\n    ) -> None:\n        if exec_reply is None:\n            return None\n    \n        exec_reply_content = exec_reply[\"content\"]\n        if exec_reply_content[\"status\"] != \"error\":\n            return None\n    \n        cell_allows_errors = (not self.force_raise_errors) and (\n            self.allow_errors\n            or exec_reply_content.get(\"ename\") in self.allow_error_names\n            or \"raises-exception\" in cell.metadata.get(\"tags\", [])\n        )\n        await run_hook(\n            self.on_cell_error, cell=cell, cell_index=cell_index, execute_reply=exec_reply\n        )\n        if not cell_allows_errors:\n>           raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nE           nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\nE           ------------------\nE           import sys\nE           \nE           import arch.data.sp500\nE           import numpy as np\nE           import pandas as pd\nE           from arch import arch_model\nE           \nE           data = arch.data.sp500.load()\nE           market = data[\"Adj Close\"]\nE           returns = 100 * market.pct_change().dropna()\nE           ------------------\nE           \nE           \nE           \u001b[0;31m---------------------------------------------------------------------------\u001b[0m\nE           \u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)\nE           Cell \u001b[0;32mIn[2], line 3\u001b[0m\nE           \u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01msys\u001b[39;00m\nE           \u001b[0;32m----> 3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01march\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdata\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msp500\u001b[39;00m\nE           \u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mnumpy\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mnp\u001b[39;00m\nE           \u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpd\u001b[39;00m\nE           \nE           \u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'arch'\n\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:918: CellExecutionError\n----------------------------- Captured stderr call -----------------------------\nAssertion failed: pfd.revents & POLLIN (src/signaler.cpp:238)\n________________ test_notebook[univariate_volatility_modeling] _________________\n\nargs = (<nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307fd84df0>, {'cell_type': 'code', 'execution_coun...* market.pct_change().dropna()\\nax = returns.plot()\\nxlim = ax.set_xlim(returns.index.min(), returns.index.max())'}, 5)\nkwargs = {'store_history': True}, name = 'MainThread'\ninner = <coroutine object NotebookClient.async_execute_cell at 0x7f30886826c0>\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\n\n    def wrapped(*args: Any, **kwargs: Any) -> Any:\n        name = threading.current_thread().name\n        inner = coro(*args, **kwargs)\n        try:\n>           asyncio.get_running_loop()\nE           RuntimeError: no running event loop\n\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:154: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nnotebook = '/app/repo_to_process/examples/univariate_volatility_modeling.ipynb'\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\"notebook\", nbs, ids=ids)\n    @pytest.mark.skipif(SKIP, reason=REASON)\n    def test_notebook(notebook):\n        nb_name = os.path.split(notebook)[-1]\n        if nb_name in SLOW_NOTEBOOKS:\n            pytest.skip(\"Notebook is too slow to test\")\n        nb = nbformat.read(notebook, as_version=4)\n        ep = ExecutePreprocessor(allow_errors=False, timeout=240, kernel_name=kernel_name)\n>       ep.preprocess(nb, {\"metadata\": {\"path\": NOTEBOOK_DIR}})\n\narch/tests/test_examples.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:103: in preprocess\n    self.preprocess_cell(cell, resources, index)\n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:124: in preprocess_cell\n    cell = self.execute_cell(cell, index, store_history=True)\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:158: in wrapped\n    return loop.run_until_complete(inner)\n/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:1062: in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f307fd84df0>\ncell = {'cell_type': 'code', 'execution_count': 2, 'metadata': {'pycharm': {'is_executing': False}, 'execution': {'iopub.stat...100 * market.pct_change().dropna()\\nax = returns.plot()\\nxlim = ax.set_xlim(returns.index.min(), returns.index.max())'}\ncell_index = 5\nexec_reply = {'buffers': [], 'content': {'ename': 'ModuleNotFoundError', 'engine_info': {'engine_id': -1, 'engine_uuid': '739c332b-...e, 'engine': '739c332b-3a9b-4ef5-9561-475465ac0313', 'started': '2025-08-11T07:51:19.789303Z', 'status': 'error'}, ...}\n\n    async def _check_raise_for_error(\n        self, cell: NotebookNode, cell_index: int, exec_reply: dict[str, t.Any] | None\n    ) -> None:\n        if exec_reply is None:\n            return None\n    \n        exec_reply_content = exec_reply[\"content\"]\n        if exec_reply_content[\"status\"] != \"error\":\n            return None\n    \n        cell_allows_errors = (not self.force_raise_errors) and (\n            self.allow_errors\n            or exec_reply_content.get(\"ename\") in self.allow_error_names\n            or \"raises-exception\" in cell.metadata.get(\"tags\", [])\n        )\n        await run_hook(\n            self.on_cell_error, cell=cell, cell_index=cell_index, execute_reply=exec_reply\n        )\n        if not cell_allows_errors:\n>           raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nE           nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\nE           ------------------\nE           import datetime as dt\nE           \nE           import arch.data.sp500\nE           \nE           st = dt.datetime(1988, 1, 1)\nE           en = dt.datetime(2018, 1, 1)\nE           data = arch.data.sp500.load()\nE           market = data[\"Adj Close\"]\nE           returns = 100 * market.pct_change().dropna()\nE           ax = returns.plot()\nE           xlim = ax.set_xlim(returns.index.min(), returns.index.max())\nE           ------------------\nE           \nE           \nE           \u001b[0;31m---------------------------------------------------------------------------\u001b[0m\nE           \u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)\nE           Cell \u001b[0;32mIn[2], line 3\u001b[0m\nE           \u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mdatetime\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mdt\u001b[39;00m\nE           \u001b[0;32m----> 3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01march\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdata\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msp500\u001b[39;00m\nE           \u001b[1;32m      5\u001b[0m st \u001b[38;5;241m=\u001b[39m dt\u001b[38;5;241m.\u001b[39mdatetime(\u001b[38;5;241m1988\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m)\nE           \u001b[1;32m      6\u001b[0m en \u001b[38;5;241m=\u001b[39m dt\u001b[38;5;241m.\u001b[39mdatetime(\u001b[38;5;241m2018\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m)\nE           \nE           \u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'arch'\n\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:918: CellExecutionError\n________________ test_notebook[univariate_volatility_scenarios] ________________\n\nargs = (<nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f30802628c0>, {'cell_type': 'code', 'execution_coun...igure\", figsize=(16, 6))\\nplt.rc(\"savefig\", dpi=90)\\nplt.rc(\"font\", family=\"sans-serif\")\\nplt.rc(\"font\", size=14)'}, 2)\nkwargs = {'store_history': True}, name = 'MainThread'\ninner = <coroutine object NotebookClient.async_execute_cell at 0x7f307ff68970>\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\n\n    def wrapped(*args: Any, **kwargs: Any) -> Any:\n        name = threading.current_thread().name\n        inner = coro(*args, **kwargs)\n        try:\n>           asyncio.get_running_loop()\nE           RuntimeError: no running event loop\n\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:154: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nnotebook = '/app/repo_to_process/examples/univariate_volatility_scenarios.ipynb'\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\"notebook\", nbs, ids=ids)\n    @pytest.mark.skipif(SKIP, reason=REASON)\n    def test_notebook(notebook):\n        nb_name = os.path.split(notebook)[-1]\n        if nb_name in SLOW_NOTEBOOKS:\n            pytest.skip(\"Notebook is too slow to test\")\n        nb = nbformat.read(notebook, as_version=4)\n        ep = ExecutePreprocessor(allow_errors=False, timeout=240, kernel_name=kernel_name)\n>       ep.preprocess(nb, {\"metadata\": {\"path\": NOTEBOOK_DIR}})\n\narch/tests/test_examples.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:103: in preprocess\n    self.preprocess_cell(cell, resources, index)\n/usr/local/lib/python3.10/dist-packages/nbconvert/preprocessors/execute.py:124: in preprocess_cell\n    cell = self.execute_cell(cell, index, store_history=True)\n/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py:158: in wrapped\n    return loop.run_until_complete(inner)\n/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:1062: in async_execute_cell\n    await self._check_raise_for_error(cell, cell_index, exec_reply)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <nbconvert.preprocessors.execute.ExecutePreprocessor object at 0x7f30802628c0>\ncell = {'cell_type': 'code', 'execution_count': 1, 'metadata': {'execution': {'iopub.status.busy': '2025-08-11T07:51:21.20324...c(\"figure\", figsize=(16, 6))\\nplt.rc(\"savefig\", dpi=90)\\nplt.rc(\"font\", family=\"sans-serif\")\\nplt.rc(\"font\", size=14)'}\ncell_index = 2\nexec_reply = {'buffers': [], 'content': {'ename': 'ModuleNotFoundError', 'engine_info': {'engine_id': -1, 'engine_uuid': '67625f50-...e, 'engine': '67625f50-4c3b-4bd2-bb4d-1fc92a7e0af0', 'started': '2025-08-11T07:51:21.203727Z', 'status': 'error'}, ...}\n\n    async def _check_raise_for_error(\n        self, cell: NotebookNode, cell_index: int, exec_reply: dict[str, t.Any] | None\n    ) -> None:\n        if exec_reply is None:\n            return None\n    \n        exec_reply_content = exec_reply[\"content\"]\n        if exec_reply_content[\"status\"] != \"error\":\n            return None\n    \n        cell_allows_errors = (not self.force_raise_errors) and (\n            self.allow_errors\n            or exec_reply_content.get(\"ename\") in self.allow_error_names\n            or \"raises-exception\" in cell.metadata.get(\"tags\", [])\n        )\n        await run_hook(\n            self.on_cell_error, cell=cell, cell_index=cell_index, execute_reply=exec_reply\n        )\n        if not cell_allows_errors:\n>           raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)\nE           nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\nE           ------------------\nE           %matplotlib inline\nE           from __future__ import annotations\nE           \nE           import matplotlib.pyplot as plt\nE           import numpy as np\nE           import pandas as pd\nE           import seaborn as sns\nE           from arch.univariate import GARCH, ConstantMean, Normal\nE           \nE           sns.set_style(\"darkgrid\")\nE           plt.rc(\"figure\", figsize=(16, 6))\nE           plt.rc(\"savefig\", dpi=90)\nE           plt.rc(\"font\", family=\"sans-serif\")\nE           plt.rc(\"font\", size=14)\nE           ------------------\nE           \nE           \nE           \u001b[0;31m---------------------------------------------------------------------------\u001b[0m\nE           \u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)\nE           Cell \u001b[0;32mIn[1], line 8\u001b[0m\nE           \u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpd\u001b[39;00m\nE           \u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mseaborn\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01msns\u001b[39;00m\nE           \u001b[0;32m----> 8\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01march\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01munivariate\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m GARCH, ConstantMean, Normal\nE           \u001b[1;32m     10\u001b[0m sns\u001b[38;5;241m.\u001b[39mset_style(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdarkgrid\u001b[39m\u001b[38;5;124m\"\u001b[39m)\nE           \u001b[1;32m     11\u001b[0m plt\u001b[38;5;241m.\u001b[39mrc(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfigure\u001b[39m\u001b[38;5;124m\"\u001b[39m, figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m16\u001b[39m, \u001b[38;5;241m6\u001b[39m))\nE           \nE           \u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'arch'\n\n/usr/local/lib/python3.10/dist-packages/nbclient/client.py:918: CellExecutionError\n=============================== warnings summary ===============================\n../../usr/local/lib/python3.10/dist-packages/jupyter_client/connect.py:22\n  /usr/local/lib/python3.10/dist-packages/jupyter_client/connect.py:22: DeprecationWarning: Jupyter is migrating its paths to use standard platformdirs\n  given by the platformdirs library.  To remove this warning and\n  see the appropriate new directories, set the environment variable\n  `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.\n  The use of platformdirs will be the default in `jupyter_core` v6\n    from jupyter_core.paths import jupyter_data_dir, jupyter_runtime_dir, secure_write\n\narch/tests/test_vendor.py::test_deprecate_kwarg\n  /app/repo_to_process/arch/tests/test_vendor.py:62: FutureWarning: the old='yes' keyword is deprecated, use new=True instead.\n    f(2, old=\"yes\", new=True)\n\narch/tests/test_vendor.py::test_deprecate_kwarg\n  /app/repo_to_process/arch/tests/test_vendor.py:63: FutureWarning: the old='yes' keyword is deprecated, use new=True instead.\n    baz(2, old=\"yes\")\n\narch/tests/test_vendor.py::test_deprecate_kwarg\n  /app/repo_to_process/arch/tests/test_vendor.py:64: FutureWarning: the old='no' keyword is deprecated, use new=False instead.\n    baz(2, old=\"no\")\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED arch/tests/test_examples.py::test_notebook[bootstrap_examples] - nbcli...\nFAILED arch/tests/test_examples.py::test_notebook[unitroot_cointegration_examples]\nFAILED arch/tests/test_examples.py::test_notebook[unitroot_examples] - nbclie...\nFAILED arch/tests/test_examples.py::test_notebook[univariate_forecasting_with_exogenous_variables]\nFAILED arch/tests/test_examples.py::test_notebook[univariate_using_fixed_variance]\nFAILED arch/tests/test_examples.py::test_notebook[univariate_volatility_forecasting]\nFAILED arch/tests/test_examples.py::test_notebook[univariate_volatility_modeling]\nFAILED arch/tests/test_examples.py::test_notebook[univariate_volatility_scenarios]\n====== 8 failed, 5043 passed, 20 skipped, 4 warnings in 604.70s (0:10:04) ======\n",
    "stderr": "",
    "execution_time": 607.1492829322815
  }
]