[
  {
    "command": "pip install numba",
    "success": true,
    "stdout": "Looking in indexes: https://repo.huaweicloud.com/repository/pypi/simple/\nCollecting numba\n  Downloading https://repo.huaweicloud.com/repository/pypi/packages/e2/7d/bfb2805bcfbd479f04f835241ecf28519f6e3609912e3a985aed45e21370/numba-0.61.2-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (3.8 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.8/3.8 MB 11.8 MB/s  0:00:00\nCollecting llvmlite<0.45,>=0.44.0dev0 (from numba)\n  Downloading https://repo.huaweicloud.com/repository/pypi/packages/aa/46/8ffbc114def88cc698906bf5acab54ca9fdf9214fe04aed0e71731fb3688/llvmlite-0.44.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (42.4 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 42.4/42.4 MB 5.9 MB/s  0:00:07\nRequirement already satisfied: numpy<2.3,>=1.24 in /usr/local/lib/python3.10/dist-packages (from numba) (2.2.6)\nInstalling collected packages: llvmlite, numba\n\nSuccessfully installed llvmlite-0.44.0 numba-0.61.2\n",
    "stderr": "WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\n",
    "execution_time": 11.389976739883423
  },
  {
    "command": "pytest",
    "success": false,
    "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0\nrootdir: /app/repo_to_process\nconfigfile: pytest.ini\nplugins: cov-6.2.1\ncollected 1776 items\n\ndocs/fluids.numba.rst .                                                  [  0%]\ndocs/fluids.units.rst .                                                  [  0%]\ndocs/fluids.vectorized.rst .                                             [  0%]\ndocs/test_documentation.py .........                                     [  0%]\ndocs/tutorial.rst .                                                      [  0%]\nfluids/atmosphere.py .......                                             [  1%]\nfluids/compressible.py ........................                          [  2%]\nfluids/control_valve.py ..............                                   [  3%]\nfluids/core.py ......................................................... [  6%]\n.........                                                                [  6%]\nfluids/design_climate.py .s..                                            [  7%]\nfluids/drag.py ..........................                                [  8%]\nfluids/filters.py .....                                                  [  8%]\nfluids/fittings.py ..................................................... [ 11%]\n.                                                                        [ 11%]\nfluids/flow_meter.py ..............................                      [ 13%]\nfluids/friction.py ..................................................... [ 16%]\n.......ss.......                                                         [ 17%]\nfluids/geometry.py ....................................................  [ 20%]\nfluids/jet_pump.py ......                                                [ 20%]\nfluids/mixing.py ......                                                  [ 21%]\nfluids/numerics/__init__.py .......                                      [ 21%]\nfluids/numerics/arrays.py ...................                            [ 22%]\nfluids/numerics/polynomial_evaluation.py .                               [ 22%]\nfluids/numerics/polynomial_roots.py .                                    [ 22%]\nfluids/open_flow.py ...........                                          [ 23%]\nfluids/optional/pychebfun.py .                                           [ 23%]\nfluids/optional/spa.py .                                                 [ 23%]\nfluids/packed_bed.py ...................                                 [ 24%]\nfluids/packed_tower.py ..........                                        [ 25%]\nfluids/particle_size_distribution.py .......................             [ 26%]\nfluids/piping.py ....                                                    [ 26%]\nfluids/pump.py ..........                                                [ 27%]\nfluids/safety_valve.py ..............                                    [ 27%]\nfluids/saltation.py .......                                              [ 28%]\nfluids/separator.py ....                                                 [ 28%]\nfluids/two_phase.py .............................                        [ 30%]\nfluids/two_phase_voidage.py ..........................................   [ 32%]\nfluids/units.py ..                                                       [ 32%]\ntests/test_atmosphere.py ........                                        [ 33%]\ntests/test_compressible.py .................                             [ 34%]\ntests/test_control_valve.py .........                                    [ 34%]\ntests/test_core.py ...............                                       [ 35%]\ntests/test_design_climate.py ........F                                   [ 35%]\ntests/test_drag.py .....                                                 [ 36%]\ntests/test_filters.py ..                                                 [ 36%]\ntests/test_fittings.py ........................................          [ 38%]\ntests/test_fittings_fits.py ...............                              [ 39%]\ntests/test_flow_meter.py ..............................................  [ 42%]\ntests/test_friction.py .....................................             [ 44%]\ntests/test_geometry.py ...............................................   [ 46%]\ntests/test_jet_pump.py ........                                          [ 47%]\ntests/test_mixing.py .                                                   [ 47%]\ntests/test_nrlmsise00_file_output.py .                                   [ 47%]\ntests/test_nrlmsise00_full.py .......                                    [ 47%]\ntests/test_numba.py ..........................................           [ 50%]\ntests/test_numerics.py ................................................. [ 52%]\n...                                                                      [ 53%]\ntests/test_numerics_arrays.py .......................................... [ 55%]\n........................................................................ [ 59%]\n........................................................................ [ 63%]\n........................................................................ [ 67%]\n........................................................................ [ 71%]\n........................................................................ [ 75%]\n........................................................................ [ 79%]\n........................................................................ [ 83%]\n.....................................................                    [ 86%]\ntests/test_numerics_doubledouble.py ...................................  [ 88%]\ntests/test_numerics_polynomial_evaluation.py ...........                 [ 89%]\ntests/test_numerics_polynomial_roots.py .....                            [ 89%]\ntests/test_numerics_polynomial_utils.py ...............                  [ 90%]\ntests/test_numerics_special.py .......                                   [ 90%]\ntests/test_open_flow.py .                                                [ 90%]\ntests/test_packed_bed.py ..                                              [ 91%]\ntests/test_packed_tower.py .....                                         [ 91%]\ntests/test_particle_size_distribution.py ............................... [ 93%]\n..                                                                       [ 93%]\ntests/test_piping.py ....                                                [ 93%]\ntests/test_pump.py ............                                          [ 94%]\ntests/test_safety_valve.py .......                                       [ 94%]\ntests/test_saltation.py .......                                          [ 94%]\ntests/test_separator.py .....                                            [ 95%]\ntests/test_two_phase.py ..............................                   [ 96%]\ntests/test_two_phase_voidage.py .......................................  [ 99%]\ntests/test_units.py ...............                                      [ 99%]\ntests/test_vectorized.py ..                                              [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_geocode _________________________________\n\n    @pytest.mark.slow\n    @pytest.mark.online\n    @pytest.mark.skipif(not has_geopy, reason='geopy is required')\n    def test_geocode():\n        latlon = geocode('Fredericton, NB')\n>       assert_close(latlon, (45.966425, -66.645813), rtol=5e-4)\n\ntests/test_design_climate.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfluids/numerics/__init__.py:1687: in assert_close\n    return assert_allclose(a, b, rtol=rtol, atol=atol)\n/usr/local/lib/python3.10/dist-packages/numpy/testing/_private/utils.py:1710: in compare\n    return np._core.numeric.isclose(x, y, rtol=rtol, atol=atol,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = array('Geocoder module `geopy` is required for this\\nfunctionality.',\n      dtype='<U59')\nb = array([ 45.966425, -66.645813]), rtol = 0.0005, atol = 0.0, equal_nan = True\n\n    @array_function_dispatch(_isclose_dispatcher)\n    def isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):\n        \"\"\"\n        Returns a boolean array where two arrays are element-wise equal within a\n        tolerance.\n    \n        The tolerance values are positive, typically very small numbers.  The\n        relative difference (`rtol` * abs(`b`)) and the absolute difference\n        `atol` are added together to compare against the absolute difference\n        between `a` and `b`.\n    \n        .. warning:: The default `atol` is not appropriate for comparing numbers\n                     with magnitudes much smaller than one (see Notes).\n    \n        Parameters\n        ----------\n        a, b : array_like\n            Input arrays to compare.\n        rtol : array_like\n            The relative tolerance parameter (see Notes).\n        atol : array_like\n            The absolute tolerance parameter (see Notes).\n        equal_nan : bool\n            Whether to compare NaN's as equal.  If True, NaN's in `a` will be\n            considered equal to NaN's in `b` in the output array.\n    \n        Returns\n        -------\n        y : array_like\n            Returns a boolean array of where `a` and `b` are equal within the\n            given tolerance. If both `a` and `b` are scalars, returns a single\n            boolean value.\n    \n        See Also\n        --------\n        allclose\n        math.isclose\n    \n        Notes\n        -----\n        For finite values, isclose uses the following equation to test whether\n        two floating point values are equivalent.::\n    \n         absolute(a - b) <= (atol + rtol * absolute(b))\n    \n        Unlike the built-in `math.isclose`, the above equation is not symmetric\n        in `a` and `b` -- it assumes `b` is the reference value -- so that\n        `isclose(a, b)` might be different from `isclose(b, a)`.\n    \n        The default value of `atol` is not appropriate when the reference value\n        `b` has magnitude smaller than one. For example, it is unlikely that\n        ``a = 1e-9`` and ``b = 2e-9`` should be considered \"close\", yet\n        ``isclose(1e-9, 2e-9)`` is ``True`` with default settings. Be sure\n        to select `atol` for the use case at hand, especially for defining the\n        threshold below which a non-zero value in `a` will be considered \"close\"\n        to a very small or zero value in `b`.\n    \n        `isclose` is not defined for non-numeric data types.\n        :class:`bool` is considered a numeric data-type for this purpose.\n    \n        Examples\n        --------\n        >>> import numpy as np\n        >>> np.isclose([1e10,1e-7], [1.00001e10,1e-8])\n        array([ True, False])\n    \n        >>> np.isclose([1e10,1e-8], [1.00001e10,1e-9])\n        array([ True, True])\n    \n        >>> np.isclose([1e10,1e-8], [1.0001e10,1e-9])\n        array([False,  True])\n    \n        >>> np.isclose([1.0, np.nan], [1.0, np.nan])\n        array([ True, False])\n    \n        >>> np.isclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)\n        array([ True, True])\n    \n        >>> np.isclose([1e-8, 1e-7], [0.0, 0.0])\n        array([ True, False])\n    \n        >>> np.isclose([1e-100, 1e-7], [0.0, 0.0], atol=0.0)\n        array([False, False])\n    \n        >>> np.isclose([1e-10, 1e-10], [1e-20, 0.0])\n        array([ True,  True])\n    \n        >>> np.isclose([1e-10, 1e-10], [1e-20, 0.999999e-10], atol=0.0)\n        array([False,  True])\n    \n        \"\"\"\n        # Turn all but python scalars into arrays.\n        x, y, atol, rtol = (\n            a if isinstance(a, (int, float, complex)) else asanyarray(a)\n            for a in (a, b, atol, rtol))\n    \n        # Make sure y is an inexact type to avoid bad behavior on abs(MIN_INT).\n        # This will cause casting of x later. Also, make sure to allow subclasses\n        # (e.g., for numpy.ma).\n        # NOTE: We explicitly allow timedelta, which used to work. This could\n        #       possibly be deprecated. See also gh-18286.\n        #       timedelta works if `atol` is an integer or also a timedelta.\n        #       Although, the default tolerances are unlikely to be useful\n        if (dtype := getattr(y, \"dtype\", None)) is not None and dtype.kind != \"m\":\n            dt = multiarray.result_type(y, 1.)\n            y = asanyarray(y, dtype=dt)\n        elif isinstance(y, int):\n            y = float(y)\n    \n        with errstate(invalid='ignore'):\n>           result = (less_equal(abs(x-y), atol + rtol * abs(y))\n                      & isfinite(y)\n                      | (x == y))\nE           numpy._core._exceptions._UFuncNoLoopError: ufunc 'subtract' did not contain a loop with signature matching types (dtype('<U59'), dtype('float64')) -> None\n\n/usr/local/lib/python3.10/dist-packages/numpy/_core/numeric.py:2447: UFuncTypeError\n=============================== warnings summary ===============================\nconftest.py:12\n  /app/repo_to_process/conftest.py:12: PytestRemovedIn9Warning: The (path: py.path.local) argument is deprecated, please use (collection_path: pathlib.Path)\n  see https://docs.pytest.org/en/latest/deprecations.html#py-path-local-arguments-for-hooks-replaced-with-pathlib-path\n    def pytest_ignore_collect(path):\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_design_climate.py::test_geocode - numpy._core._exceptions._...\n======= 1 failed, 1772 passed, 3 skipped, 1 warning in 139.09s (0:02:19) =======\n",
    "stderr": "",
    "execution_time": 143.2887315750122
  }
]