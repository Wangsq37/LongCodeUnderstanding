[
  {
    "command": "pytest",
    "success": false,
    "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0\nrootdir: /app/repo_to_process\nconfigfile: pytest.ini\nplugins: cov-6.2.1\ncollected 1296 items\n\ndocs/fluids.numba.rst F                                                  [  0%]\ndocs/fluids.units.rst .                                                  [  0%]\ndocs/fluids.vectorized.rst .                                             [  0%]\ndocs/test_documentation.py .........                                     [  0%]\ndocs/tutorial.rst F                                                      [  1%]\ntests/spa/test_spa.py .................................................. [  4%]\n.....................................s                                   [  7%]\ntests/test_atmosphere.py ........                                        [  8%]\ntests/test_compressible.py .................                             [  9%]\ntests/test_control_valve.py .........                                    [ 10%]\ntests/test_core.py ...............                                       [ 11%]\ntests/test_design_climate.py ........F                                   [ 12%]\ntests/test_drag.py .....                                                 [ 12%]\ntests/test_filters.py ..                                                 [ 12%]\ntests/test_fittings.py ........................................          [ 15%]\ntests/test_fittings_fits.py ...............                              [ 17%]\ntests/test_flow_meter.py ..............................................  [ 20%]\ntests/test_friction.py .....................................             [ 23%]\ntests/test_geometry.py ...............................................   [ 27%]\ntests/test_jet_pump.py ........                                          [ 27%]\ntests/test_mixing.py .                                                   [ 27%]\ntests/test_nrlmsise00_file_output.py .                                   [ 27%]\ntests/test_nrlmsise00_full.py .......                                    [ 28%]\ntests/test_numba.py ..........................................           [ 31%]\ntests/test_numerics.py ................................................. [ 35%]\n...                                                                      [ 35%]\ntests/test_numerics_arrays.py .......................................... [ 38%]\n........................................................................ [ 44%]\n........................................................................ [ 50%]\n........................................................................ [ 55%]\n........................................................................ [ 61%]\n........................................................................ [ 66%]\n........................................................................ [ 72%]\n........................................................................ [ 77%]\n.....................................................                    [ 81%]\ntests/test_numerics_doubledouble.py ...................................  [ 84%]\ntests/test_numerics_polynomial_evaluation.py ...........                 [ 85%]\ntests/test_numerics_polynomial_roots.py .....                            [ 85%]\ntests/test_numerics_polynomial_utils.py ...............                  [ 86%]\ntests/test_numerics_special.py .......                                   [ 87%]\ntests/test_open_flow.py .                                                [ 87%]\ntests/test_packed_bed.py ..                                              [ 87%]\ntests/test_packed_tower.py .....                                         [ 88%]\ntests/test_particle_size_distribution.py ............................... [ 90%]\n..                                                                       [ 90%]\ntests/test_piping.py ....                                                [ 90%]\ntests/test_pump.py ............                                          [ 91%]\ntests/test_safety_valve.py .......                                       [ 92%]\ntests/test_saltation.py .......                                          [ 92%]\ntests/test_separator.py .....                                            [ 93%]\ntests/test_two_phase.py ..............................                   [ 95%]\ntests/test_two_phase_voidage.py .......................................  [ 98%]\ntests/test_units.py ...............                                      [ 99%]\ntests/test_vectorized.py ..                                              [100%]\n--- Writing function-level test call chains report to report_functions.jsonl ---\nSuccessfully wrote 1283 records to report_functions.jsonl\n\n--- Writing aggregated file-level test call chains report to report_files.jsonl ---\nSuccessfully wrote 42 records to report_files.jsonl\n\n--- End of Reports ---\n\n\n=================================== FAILURES ===================================\n__________________________ [doctest] fluids.numba.rst __________________________\n006 Numba is only supported on Python 3, and may require the latest version of Numba.\n007 Numba is rapidly evolving, and hopefully in the future it will support more of\n008 the functionality of fluids.\n009 \n010 Using the numba-accelerated version of `fluids` is easy; simply call functions\n011 and classes from the fluids.numba namespace.\n012 \n013 >>> import fluids\n014 >>> import fluids.numba\n015 >>> fluids.numba.bend_rounded(Di=4.020, rc=4.0*5, angle=30, Re=1E5)\nExpected:\n    0.11519070808085\nGot:\n    0.1151907080808519\n\n/app/repo_to_process/docs/fluids.numba.rst:15: DocTestFailure\n____________________________ [doctest] tutorial.rst ____________________________\n259 >>> nearest_pipe(NPS=2) # returns NPS, inside diameter, outer diameter, wall thickness\n260 (2, 0.05248, 0.0603, 0.00391)\n261 \n262 When looking up by actual diameter, the nearest pipe as large or larger \n263 then requested is returned:\n264 \n265 >>> NPS, Di, Do, t = nearest_pipe(Di=0.5)\n266 >>> Di\n267 0.57504\n268 >>> nearest_pipe(Do=0.5)\nExpected:\n    (20, 0.47782, 0.508, 0.01509)\nGot:\n    (20, 0.47782, 0.508, 0.015090000000000001)\n\n/app/repo_to_process/docs/tutorial.rst:268: DocTestFailure\n_________________________________ test_geocode _________________________________\n\n    @pytest.mark.slow\n    @pytest.mark.online\n    @pytest.mark.skipif(not has_geopy, reason='geopy is required')\n    def test_geocode():\n        latlon = geocode('Fredericton, NB')\n>       assert_close(latlon, (45.966425, -66.645813), rtol=5e-4)\n\ntests/test_design_climate.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfluids/numerics/__init__.py:1687: in assert_close\n    return assert_allclose(a, b, rtol=rtol, atol=atol)\n/usr/local/lib/python3.10/dist-packages/numpy/testing/_private/utils.py:1710: in compare\n    return np._core.numeric.isclose(x, y, rtol=rtol, atol=atol,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = array('Geocoder module `geopy` is required for this\\nfunctionality.',\n      dtype='<U59')\nb = array([ 45.966425, -66.645813]), rtol = 0.0005, atol = 0.0, equal_nan = True\n\n    @array_function_dispatch(_isclose_dispatcher)\n    def isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):\n        \"\"\"\n        Returns a boolean array where two arrays are element-wise equal within a\n        tolerance.\n    \n        The tolerance values are positive, typically very small numbers.  The\n        relative difference (`rtol` * abs(`b`)) and the absolute difference\n        `atol` are added together to compare against the absolute difference\n        between `a` and `b`.\n    \n        .. warning:: The default `atol` is not appropriate for comparing numbers\n                     with magnitudes much smaller than one (see Notes).\n    \n        Parameters\n        ----------\n        a, b : array_like\n            Input arrays to compare.\n        rtol : array_like\n            The relative tolerance parameter (see Notes).\n        atol : array_like\n            The absolute tolerance parameter (see Notes).\n        equal_nan : bool\n            Whether to compare NaN's as equal.  If True, NaN's in `a` will be\n            considered equal to NaN's in `b` in the output array.\n    \n        Returns\n        -------\n        y : array_like\n            Returns a boolean array of where `a` and `b` are equal within the\n            given tolerance. If both `a` and `b` are scalars, returns a single\n            boolean value.\n    \n        See Also\n        --------\n        allclose\n        math.isclose\n    \n        Notes\n        -----\n        For finite values, isclose uses the following equation to test whether\n        two floating point values are equivalent.::\n    \n         absolute(a - b) <= (atol + rtol * absolute(b))\n    \n        Unlike the built-in `math.isclose`, the above equation is not symmetric\n        in `a` and `b` -- it assumes `b` is the reference value -- so that\n        `isclose(a, b)` might be different from `isclose(b, a)`.\n    \n        The default value of `atol` is not appropriate when the reference value\n        `b` has magnitude smaller than one. For example, it is unlikely that\n        ``a = 1e-9`` and ``b = 2e-9`` should be considered \"close\", yet\n        ``isclose(1e-9, 2e-9)`` is ``True`` with default settings. Be sure\n        to select `atol` for the use case at hand, especially for defining the\n        threshold below which a non-zero value in `a` will be considered \"close\"\n        to a very small or zero value in `b`.\n    \n        `isclose` is not defined for non-numeric data types.\n        :class:`bool` is considered a numeric data-type for this purpose.\n    \n        Examples\n        --------\n        >>> import numpy as np\n        >>> np.isclose([1e10,1e-7], [1.00001e10,1e-8])\n        array([ True, False])\n    \n        >>> np.isclose([1e10,1e-8], [1.00001e10,1e-9])\n        array([ True, True])\n    \n        >>> np.isclose([1e10,1e-8], [1.0001e10,1e-9])\n        array([False,  True])\n    \n        >>> np.isclose([1.0, np.nan], [1.0, np.nan])\n        array([ True, False])\n    \n        >>> np.isclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)\n        array([ True, True])\n    \n        >>> np.isclose([1e-8, 1e-7], [0.0, 0.0])\n        array([ True, False])\n    \n        >>> np.isclose([1e-100, 1e-7], [0.0, 0.0], atol=0.0)\n        array([False, False])\n    \n        >>> np.isclose([1e-10, 1e-10], [1e-20, 0.0])\n        array([ True,  True])\n    \n        >>> np.isclose([1e-10, 1e-10], [1e-20, 0.999999e-10], atol=0.0)\n        array([False,  True])\n    \n        \"\"\"\n        # Turn all but python scalars into arrays.\n        x, y, atol, rtol = (\n            a if isinstance(a, (int, float, complex)) else asanyarray(a)\n            for a in (a, b, atol, rtol))\n    \n        # Make sure y is an inexact type to avoid bad behavior on abs(MIN_INT).\n        # This will cause casting of x later. Also, make sure to allow subclasses\n        # (e.g., for numpy.ma).\n        # NOTE: We explicitly allow timedelta, which used to work. This could\n        #       possibly be deprecated. See also gh-18286.\n        #       timedelta works if `atol` is an integer or also a timedelta.\n        #       Although, the default tolerances are unlikely to be useful\n        if (dtype := getattr(y, \"dtype\", None)) is not None and dtype.kind != \"m\":\n            dt = multiarray.result_type(y, 1.)\n            y = asanyarray(y, dtype=dt)\n        elif isinstance(y, int):\n            y = float(y)\n    \n        with errstate(invalid='ignore'):\n>           result = (less_equal(abs(x-y), atol + rtol * abs(y))\n                      & isfinite(y)\n                      | (x == y))\nE           numpy._core._exceptions._UFuncNoLoopError: ufunc 'subtract' did not contain a loop with signature matching types (dtype('<U59'), dtype('float64')) -> None\n\n/usr/local/lib/python3.10/dist-packages/numpy/_core/numeric.py:2447: UFuncTypeError\n=========================== short test summary info ============================\nFAILED docs/fluids.numba.rst::fluids.numba.rst\nFAILED docs/tutorial.rst::tutorial.rst\nFAILED tests/test_design_climate.py::test_geocode - numpy._core._exceptions._...\n============ 3 failed, 1292 passed, 1 skipped in 382.58s (0:06:22) =============\n",
    "stderr": "",
    "execution_time": 385.2376637458801
  }
]