[
  {
    "command": "pip install scipy",
    "success": true,
    "stdout": "Looking in indexes: https://repo.huaweicloud.com/repository/pypi/simple/\nCollecting scipy\n  Downloading https://repo.huaweicloud.com/repository/pypi/packages/8e/6d/41991e503e51fc1134502694c5fa7a1671501a17ffa12716a4a9151af3df/scipy-1.15.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (37.7 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 37.7/37.7 MB 6.0 MB/s  0:00:06\nRequirement already satisfied: numpy<2.5,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from scipy) (2.2.6)\nInstalling collected packages: scipy\nSuccessfully installed scipy-1.15.3\n",
    "stderr": "WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\n",
    "execution_time": 10.249520063400269
  },
  {
    "command": "pip install flaky",
    "success": true,
    "stdout": "Looking in indexes: https://repo.huaweicloud.com/repository/pypi/simple/\nCollecting flaky\n  Downloading https://repo.huaweicloud.com/repository/pypi/packages/7f/b8/b830fc43663246c3f3dd1ae7dca4847b96ed992537e85311e27fa41ac40e/flaky-3.8.1-py2.py3-none-any.whl (19 kB)\nInstalling collected packages: flaky\nSuccessfully installed flaky-3.8.1\n",
    "stderr": "WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\n",
    "execution_time": 1.1411643028259277
  },
  {
    "command": "pytest",
    "success": false,
    "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0\nrootdir: /app/repo_to_process\nconfigfile: pyproject.toml\ntestpaths: projectq\nplugins: flaky-3.8.1\ncollected 1327 items / 3 skipped\n\nprojectq/backends/_aqt/_aqt_http_client_test.py ...........              [  0%]\nprojectq/backends/_aqt/_aqt_test.py ............................         [  2%]\nprojectq/backends/_awsbraket/_awsbraket_boto3_client_test.py sssssssssss [  3%]\nsssssss                                                                  [  4%]\nprojectq/backends/_awsbraket/_awsbraket_test.py ssssssssssssssssssssssss [  6%]\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 11%]\nsssssssssss                                                              [ 12%]\nprojectq/backends/_azure/_azure_quantum_client_test.py sssssssssss       [ 13%]\nprojectq/backends/_azure/_azure_quantum_test.py ssssssssssssssssssssssss [ 14%]\nsssssssssssssssssssss                                                    [ 16%]\nprojectq/backends/_azure/_utils_test.py ssssssssssssssssssssssssssssssss [ 18%]\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 24%]\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 29%]\nssssssssssssssssssssssssss                                               [ 31%]\nprojectq/backends/_circuits/_drawer_matplotlib_test.py ...               [ 32%]\nprojectq/backends/_circuits/_drawer_test.py ......                       [ 32%]\nprojectq/backends/_circuits/_plot_test.py ..........                     [ 33%]\nprojectq/backends/_circuits/_to_latex_test.py ................           [ 34%]\nprojectq/backends/_ibm/_ibm_http_client_test.py ..........               [ 35%]\nprojectq/backends/_ibm/_ibm_test.py .............................        [ 37%]\nprojectq/backends/_ionq/_ionq_http_client_test.py .................      [ 38%]\nprojectq/backends/_ionq/_ionq_mapper_test.py .....                       [ 39%]\nprojectq/backends/_ionq/_ionq_test.py .................................. [ 41%]\n.......                                                                  [ 42%]\nprojectq/backends/_printer_test.py .....                                 [ 42%]\nprojectq/backends/_resource_test.py .....                                [ 42%]\nprojectq/backends/_sim/_classical_simulator_test.py ...............      [ 44%]\nprojectq/backends/_sim/_simulator_test.py F............................. [ 46%]\ns                                                                        [ 46%]\nprojectq/backends/_unitary_test.py ........                              [ 46%]\nprojectq/backends/_utils_test.py .......                                 [ 47%]\nprojectq/cengines/_basicmapper_test.py .                                 [ 47%]\nprojectq/cengines/_basics_test.py ......                                 [ 48%]\nprojectq/cengines/_cmdmodifier_test.py .                                 [ 48%]\nprojectq/cengines/_ibm5qubitmapper_test.py .......                       [ 48%]\nprojectq/cengines/_linearmapper_test.py ................................ [ 51%]\n..................                                                       [ 52%]\nprojectq/cengines/_main_test.py ............                             [ 53%]\nprojectq/cengines/_manualmapper_test.py .                                [ 53%]\nprojectq/cengines/_optimize_test.py .......                              [ 53%]\nprojectq/cengines/_replacer/_decomposition_rule_test.py .                [ 53%]\nprojectq/cengines/_replacer/_replacer_test.py ........                   [ 54%]\nprojectq/cengines/_swapandcnotflipper_test.py .......                    [ 55%]\nprojectq/cengines/_tagremover_test.py ...                                [ 55%]\nprojectq/cengines/_testengine_test.py .....                              [ 55%]\nprojectq/cengines/_twodmapper_test.py ...............................    [ 58%]\nprojectq/cengines/_withflushing_test.py ..                               [ 58%]\nprojectq/libs/hist/_histogram_test.py ......                             [ 58%]\nprojectq/libs/math/_constantmath_test.py ......                          [ 59%]\nprojectq/libs/math/_gates_math_test.py ....................F.F.....      [ 61%]\nprojectq/libs/math/_gates_test.py .........                              [ 61%]\nprojectq/libs/math/_quantummath_test.py ...s...ss.ss.................... [ 64%]\n........                                                                 [ 64%]\nprojectq/meta/_compute_test.py ................                          [ 66%]\nprojectq/meta/_control_test.py ......                                    [ 66%]\nprojectq/meta/_dagger_test.py ...                                        [ 66%]\nprojectq/meta/_dirtyqubit_test.py .                                      [ 66%]\nprojectq/meta/_logicalqubit_test.py .                                    [ 66%]\nprojectq/meta/_loop_test.py ............                                 [ 67%]\nprojectq/meta/_util_test.py ..                                           [ 67%]\nprojectq/ops/_basics_test.py ...................................         [ 70%]\nprojectq/ops/_command_test.py ............................               [ 72%]\nprojectq/ops/_gates_test.py ............................................ [ 76%]\n..................................                                       [ 78%]\nprojectq/ops/_metagates_test.py ......................                   [ 80%]\nprojectq/ops/_qaagate_test.py .                                          [ 80%]\nprojectq/ops/_qftgate_test.py ..                                         [ 80%]\nprojectq/ops/_qpegate_test.py .                                          [ 80%]\nprojectq/ops/_qubit_operator_test.py ................................... [ 83%]\n......................................                                   [ 86%]\nprojectq/ops/_shortcuts_test.py .                                        [ 86%]\nprojectq/ops/_state_prep_test.py ..                                      [ 86%]\nprojectq/ops/_time_evolution_test.py ...........................         [ 88%]\nprojectq/ops/_uniformly_controlled_rotation_test.py .........            [ 88%]\nprojectq/setups/aqt_test.py ..                                           [ 89%]\nprojectq/setups/awsbraket_test.py ssss                                   [ 89%]\nprojectq/setups/decompositions/_gates_test.py ...                        [ 89%]\nprojectq/setups/decompositions/amplitudeamplification_test.py ...        [ 89%]\nprojectq/setups/decompositions/arb1qubit2rzandry_test.py ............... [ 91%]\n..                                                                       [ 91%]\nprojectq/setups/decompositions/barrier_test.py ..                        [ 91%]\nprojectq/setups/decompositions/carb1qubit2cnotrzandry_test.py .......... [ 92%]\n......                                                                   [ 92%]\nprojectq/setups/decompositions/cnot2cz_test.py ..                        [ 92%]\nprojectq/setups/decompositions/cnot2rxx_test.py ..                       [ 92%]\nprojectq/setups/decompositions/cnu2toffoliandcu_test.py ...              [ 93%]\nprojectq/setups/decompositions/controlstate_test.py .                    [ 93%]\nprojectq/setups/decompositions/h2rx_test.py ..                           [ 93%]\nprojectq/setups/decompositions/phaseestimation_test.py .....             [ 93%]\nprojectq/setups/decompositions/qubitop2onequbit_test.py ...              [ 93%]\nprojectq/setups/decompositions/rx2rz_test.py ......                      [ 94%]\nprojectq/setups/decompositions/ry2rz_test.py ......                      [ 94%]\nprojectq/setups/decompositions/rz2rx_test.py .FFFFF                      [ 95%]\nprojectq/setups/decompositions/sqrtswap2cnot_test.py ..                  [ 95%]\nprojectq/setups/decompositions/stateprep2cnot_test.py ..........         [ 96%]\nprojectq/setups/decompositions/time_evolution_test.py .....              [ 96%]\nprojectq/setups/decompositions/uniformlycontrolledr2cnot_test.py ....... [ 97%]\n.....                                                                    [ 97%]\nprojectq/setups/grid_test.py ....                                        [ 97%]\nprojectq/setups/ibm_test.py ..                                           [ 97%]\nprojectq/setups/ionq_test.py ..                                          [ 98%]\nprojectq/setups/linear_test.py ....                                      [ 98%]\nprojectq/setups/restrictedgateset_test.py ...                            [ 98%]\nprojectq/setups/trapped_ion_decomposer_test.py ...                       [ 98%]\nprojectq/tests/_factoring_test.py .                                      [ 98%]\nprojectq/types/_qubit_test.py ...............                            [100%]\n\n=================================== FAILURES ===================================\n________________________ test_is_cpp_simulator_present _________________________\n\n    def test_is_cpp_simulator_present():\n>       import projectq.backends._sim._cppsim\nE       ModuleNotFoundError: No module named 'projectq.backends._sim._cppsim'\n\nprojectq/backends/_sim/_simulator_test.py:63: ModuleNotFoundError\n___________________________ test_division[no_decomp] ___________________________\n\neng = <projectq.cengines._main.MainEngine object at 0x7f1e7d32d870>\n\n    def test_division(eng):\n        qunum_a = eng.allocate_qureg(5)\n        qunum_b = eng.allocate_qureg(5)\n        qunum_c = eng.allocate_qureg(5)\n    \n        All(X) | [qunum_a[0], qunum_a[3]]  # qunum_a is now equal to 9\n        X | qunum_c[2]  # qunum_c is now 4\n    \n        DivideQuantum | (qunum_a, qunum_b, qunum_c)\n        eng.flush()\n    \n>       assert 1.0 == pytest.approx(eng.backend.get_probability([1, 0, 0, 0, 0], qunum_a))  # remainder\nE       assert 1.0 == 0.0 ± 1.0e-12\nE         \nE         comparison failed\nE         Obtained: 1.0\nE         Expected: 0.0 ± 1.0e-12\n\nprojectq/libs/math/_gates_math_test.py:294: AssertionError\n---------------------------- Captured stdout setup -----------------------------\n(Note: This is the (slow) Python simulator.)\n----------------------------- Captured stdout call -----------------------------\nAllocate | Qureg[0]\nAllocate | Qureg[1]\nAllocate | Qureg[2]\nAllocate | Qureg[3]\nAllocate | Qureg[4]\nAllocate | Qureg[5]\nAllocate | Qureg[6]\nAllocate | Qureg[7]\nAllocate | Qureg[8]\nAllocate | Qureg[9]\nAllocate | Qureg[10]\nAllocate | Qureg[11]\nAllocate | Qureg[12]\nAllocate | Qureg[13]\nAllocate | Qureg[14]\nX | Qureg[0]\nX | Qureg[3]\nX | Qureg[12]\nDivideQuantum | ( Qureg[0-4], Qureg[5-9], Qureg[10-14] )\n_______________________ test_inverse_division[no_decomp] _______________________\n\neng = <projectq.cengines._main.MainEngine object at 0x7f1e7d32c8b0>\n\n    def test_inverse_division(eng):\n        qunum_a = eng.allocate_qureg(5)\n        qunum_b = eng.allocate_qureg(5)\n        qunum_c = eng.allocate_qureg(5)\n    \n        All(X) | [qunum_a[0], qunum_a[3]]\n        X | qunum_c[2]\n    \n        with Compute(eng):\n            DivideQuantum | (qunum_a, qunum_b, qunum_c)\n        Uncompute(eng)\n        eng.flush()\n    \n>       assert 1.0 == pytest.approx(eng.backend.get_probability([1, 0, 0, 1, 0], qunum_a))\nE       assert 1.0 == 0.0 ± 1.0e-12\nE         \nE         comparison failed\nE         Obtained: 1.0\nE         Expected: 0.0 ± 1.0e-12\n\nprojectq/libs/math/_gates_math_test.py:312: AssertionError\n---------------------------- Captured stdout setup -----------------------------\n(Note: This is the (slow) Python simulator.)\n----------------------------- Captured stdout call -----------------------------\nAllocate | Qureg[0]\nAllocate | Qureg[1]\nAllocate | Qureg[2]\nAllocate | Qureg[3]\nAllocate | Qureg[4]\nAllocate | Qureg[5]\nAllocate | Qureg[6]\nAllocate | Qureg[7]\nAllocate | Qureg[8]\nAllocate | Qureg[9]\nAllocate | Qureg[10]\nAllocate | Qureg[11]\nAllocate | Qureg[12]\nAllocate | Qureg[13]\nAllocate | Qureg[14]\nX | Qureg[0]\nX | Qureg[3]\nX | Qureg[12]\nDivideQuantum | ( Qureg[0-4], Qureg[5-9], Qureg[10-14] )\n_InverseDivideQuantum | ( Qureg[0-4], Qureg[5-9], Qureg[10-14] )\n____________________________ test_decomposition[0] _____________________________\n\nangle = 0\n\n    @pytest.mark.parametrize(\"angle\", [0, math.pi, 2 * math.pi, 4 * math.pi, 0.5])\n    def test_decomposition(angle):\n        \"\"\"\n        Test that this decomposition of Rz produces correct amplitudes\n    \n        Note that this function tests each DecompositionRule in\n        rz2rx.all_defined_decomposition_rules\n        \"\"\"\n        decomposition_rule_list = rz2rx.all_defined_decomposition_rules\n        for rule in decomposition_rule_list:\n            for basis_state in ([1, 0], [0, 1]):\n                correct_dummy_eng = DummyEngine(save_commands=True)\n                correct_eng = MainEngine(backend=Simulator(), engine_list=[correct_dummy_eng])\n    \n                rule_set = DecompositionRuleSet(rules=[rule])\n                test_dummy_eng = DummyEngine(save_commands=True)\n                test_eng = MainEngine(\n                    backend=Simulator(),\n                    engine_list=[\n                        AutoReplacer(rule_set),\n                        InstructionFilter(rz_decomp_gates),\n                        test_dummy_eng,\n                    ],\n                )\n    \n                correct_qb = correct_eng.allocate_qubit()\n                Rz(angle) | correct_qb\n                correct_eng.flush()\n    \n                test_qb = test_eng.allocate_qubit()\n                Rz(angle) | test_qb\n                test_eng.flush()\n    \n                # Create empty vectors for the wave vectors for the correct and\n                # test qubits\n>               correct_vector = np.zeros((2, 1), dtype=np.complex_)\n\nprojectq/setups/decompositions/rz2rx_test.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nattr = 'complex_'\n\n    def __getattr__(attr):\n        # Warn for expired attributes\n        import warnings\n    \n        if attr == \"linalg\":\n            import numpy.linalg as linalg\n            return linalg\n        elif attr == \"fft\":\n            import numpy.fft as fft\n            return fft\n        elif attr == \"dtypes\":\n            import numpy.dtypes as dtypes\n            return dtypes\n        elif attr == \"random\":\n            import numpy.random as random\n            return random\n        elif attr == \"polynomial\":\n            import numpy.polynomial as polynomial\n            return polynomial\n        elif attr == \"ma\":\n            import numpy.ma as ma\n            return ma\n        elif attr == \"ctypeslib\":\n            import numpy.ctypeslib as ctypeslib\n            return ctypeslib\n        elif attr == \"exceptions\":\n            import numpy.exceptions as exceptions\n            return exceptions\n        elif attr == \"testing\":\n            import numpy.testing as testing\n            return testing\n        elif attr == \"matlib\":\n            import numpy.matlib as matlib\n            return matlib\n        elif attr == \"f2py\":\n            import numpy.f2py as f2py\n            return f2py\n        elif attr == \"typing\":\n            import numpy.typing as typing\n            return typing\n        elif attr == \"rec\":\n            import numpy.rec as rec\n            return rec\n        elif attr == \"char\":\n            import numpy.char as char\n            return char\n        elif attr == \"array_api\":\n            raise AttributeError(\"`numpy.array_api` is not available from \"\n                                 \"numpy 2.0 onwards\", name=None)\n        elif attr == \"core\":\n            import numpy.core as core\n            return core\n        elif attr == \"strings\":\n            import numpy.strings as strings\n            return strings\n        elif attr == \"distutils\":\n            if 'distutils' in __numpy_submodules__:\n                import numpy.distutils as distutils\n                return distutils\n            else:\n                raise AttributeError(\"`numpy.distutils` is not available from \"\n                                     \"Python 3.12 onwards\", name=None)\n    \n        if attr in __future_scalars__:\n            # And future warnings for those that will change, but also give\n            # the AttributeError\n            warnings.warn(\n                f\"In the future `np.{attr}` will be defined as the \"\n                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)\n    \n        if attr in __former_attrs__:\n            raise AttributeError(__former_attrs__[attr], name=None)\n    \n        if attr in __expired_attributes__:\n>           raise AttributeError(\n                f\"`np.{attr}` was removed in the NumPy 2.0 release. \"\n                f\"{__expired_attributes__[attr]}\",\n                name=None\n            )\nE           AttributeError: `np.complex_` was removed in the NumPy 2.0 release. Use `np.complex128` instead.\n\n/usr/local/lib/python3.10/dist-packages/numpy/__init__.py:400: AttributeError\n----------------------------- Captured stdout call -----------------------------\n(Note: This is the (slow) Python simulator.)\n(Note: This is the (slow) Python simulator.)\n____________________ test_decomposition[3.141592653589793] _____________________\n\nangle = 3.141592653589793\n\n    @pytest.mark.parametrize(\"angle\", [0, math.pi, 2 * math.pi, 4 * math.pi, 0.5])\n    def test_decomposition(angle):\n        \"\"\"\n        Test that this decomposition of Rz produces correct amplitudes\n    \n        Note that this function tests each DecompositionRule in\n        rz2rx.all_defined_decomposition_rules\n        \"\"\"\n        decomposition_rule_list = rz2rx.all_defined_decomposition_rules\n        for rule in decomposition_rule_list:\n            for basis_state in ([1, 0], [0, 1]):\n                correct_dummy_eng = DummyEngine(save_commands=True)\n                correct_eng = MainEngine(backend=Simulator(), engine_list=[correct_dummy_eng])\n    \n                rule_set = DecompositionRuleSet(rules=[rule])\n                test_dummy_eng = DummyEngine(save_commands=True)\n                test_eng = MainEngine(\n                    backend=Simulator(),\n                    engine_list=[\n                        AutoReplacer(rule_set),\n                        InstructionFilter(rz_decomp_gates),\n                        test_dummy_eng,\n                    ],\n                )\n    \n                correct_qb = correct_eng.allocate_qubit()\n                Rz(angle) | correct_qb\n                correct_eng.flush()\n    \n                test_qb = test_eng.allocate_qubit()\n                Rz(angle) | test_qb\n                test_eng.flush()\n    \n                # Create empty vectors for the wave vectors for the correct and\n                # test qubits\n>               correct_vector = np.zeros((2, 1), dtype=np.complex_)\n\nprojectq/setups/decompositions/rz2rx_test.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nattr = 'complex_'\n\n    def __getattr__(attr):\n        # Warn for expired attributes\n        import warnings\n    \n        if attr == \"linalg\":\n            import numpy.linalg as linalg\n            return linalg\n        elif attr == \"fft\":\n            import numpy.fft as fft\n            return fft\n        elif attr == \"dtypes\":\n            import numpy.dtypes as dtypes\n            return dtypes\n        elif attr == \"random\":\n            import numpy.random as random\n            return random\n        elif attr == \"polynomial\":\n            import numpy.polynomial as polynomial\n            return polynomial\n        elif attr == \"ma\":\n            import numpy.ma as ma\n            return ma\n        elif attr == \"ctypeslib\":\n            import numpy.ctypeslib as ctypeslib\n            return ctypeslib\n        elif attr == \"exceptions\":\n            import numpy.exceptions as exceptions\n            return exceptions\n        elif attr == \"testing\":\n            import numpy.testing as testing\n            return testing\n        elif attr == \"matlib\":\n            import numpy.matlib as matlib\n            return matlib\n        elif attr == \"f2py\":\n            import numpy.f2py as f2py\n            return f2py\n        elif attr == \"typing\":\n            import numpy.typing as typing\n            return typing\n        elif attr == \"rec\":\n            import numpy.rec as rec\n            return rec\n        elif attr == \"char\":\n            import numpy.char as char\n            return char\n        elif attr == \"array_api\":\n            raise AttributeError(\"`numpy.array_api` is not available from \"\n                                 \"numpy 2.0 onwards\", name=None)\n        elif attr == \"core\":\n            import numpy.core as core\n            return core\n        elif attr == \"strings\":\n            import numpy.strings as strings\n            return strings\n        elif attr == \"distutils\":\n            if 'distutils' in __numpy_submodules__:\n                import numpy.distutils as distutils\n                return distutils\n            else:\n                raise AttributeError(\"`numpy.distutils` is not available from \"\n                                     \"Python 3.12 onwards\", name=None)\n    \n        if attr in __future_scalars__:\n            # And future warnings for those that will change, but also give\n            # the AttributeError\n            warnings.warn(\n                f\"In the future `np.{attr}` will be defined as the \"\n                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)\n    \n        if attr in __former_attrs__:\n            raise AttributeError(__former_attrs__[attr], name=None)\n    \n        if attr in __expired_attributes__:\n>           raise AttributeError(\n                f\"`np.{attr}` was removed in the NumPy 2.0 release. \"\n                f\"{__expired_attributes__[attr]}\",\n                name=None\n            )\nE           AttributeError: `np.complex_` was removed in the NumPy 2.0 release. Use `np.complex128` instead.\n\n/usr/local/lib/python3.10/dist-packages/numpy/__init__.py:400: AttributeError\n----------------------------- Captured stdout call -----------------------------\n(Note: This is the (slow) Python simulator.)\n(Note: This is the (slow) Python simulator.)\n____________________ test_decomposition[6.283185307179586] _____________________\n\nangle = 6.283185307179586\n\n    @pytest.mark.parametrize(\"angle\", [0, math.pi, 2 * math.pi, 4 * math.pi, 0.5])\n    def test_decomposition(angle):\n        \"\"\"\n        Test that this decomposition of Rz produces correct amplitudes\n    \n        Note that this function tests each DecompositionRule in\n        rz2rx.all_defined_decomposition_rules\n        \"\"\"\n        decomposition_rule_list = rz2rx.all_defined_decomposition_rules\n        for rule in decomposition_rule_list:\n            for basis_state in ([1, 0], [0, 1]):\n                correct_dummy_eng = DummyEngine(save_commands=True)\n                correct_eng = MainEngine(backend=Simulator(), engine_list=[correct_dummy_eng])\n    \n                rule_set = DecompositionRuleSet(rules=[rule])\n                test_dummy_eng = DummyEngine(save_commands=True)\n                test_eng = MainEngine(\n                    backend=Simulator(),\n                    engine_list=[\n                        AutoReplacer(rule_set),\n                        InstructionFilter(rz_decomp_gates),\n                        test_dummy_eng,\n                    ],\n                )\n    \n                correct_qb = correct_eng.allocate_qubit()\n                Rz(angle) | correct_qb\n                correct_eng.flush()\n    \n                test_qb = test_eng.allocate_qubit()\n                Rz(angle) | test_qb\n                test_eng.flush()\n    \n                # Create empty vectors for the wave vectors for the correct and\n                # test qubits\n>               correct_vector = np.zeros((2, 1), dtype=np.complex_)\n\nprojectq/setups/decompositions/rz2rx_test.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nattr = 'complex_'\n\n    def __getattr__(attr):\n        # Warn for expired attributes\n        import warnings\n    \n        if attr == \"linalg\":\n            import numpy.linalg as linalg\n            return linalg\n        elif attr == \"fft\":\n            import numpy.fft as fft\n            return fft\n        elif attr == \"dtypes\":\n            import numpy.dtypes as dtypes\n            return dtypes\n        elif attr == \"random\":\n            import numpy.random as random\n            return random\n        elif attr == \"polynomial\":\n            import numpy.polynomial as polynomial\n            return polynomial\n        elif attr == \"ma\":\n            import numpy.ma as ma\n            return ma\n        elif attr == \"ctypeslib\":\n            import numpy.ctypeslib as ctypeslib\n            return ctypeslib\n        elif attr == \"exceptions\":\n            import numpy.exceptions as exceptions\n            return exceptions\n        elif attr == \"testing\":\n            import numpy.testing as testing\n            return testing\n        elif attr == \"matlib\":\n            import numpy.matlib as matlib\n            return matlib\n        elif attr == \"f2py\":\n            import numpy.f2py as f2py\n            return f2py\n        elif attr == \"typing\":\n            import numpy.typing as typing\n            return typing\n        elif attr == \"rec\":\n            import numpy.rec as rec\n            return rec\n        elif attr == \"char\":\n            import numpy.char as char\n            return char\n        elif attr == \"array_api\":\n            raise AttributeError(\"`numpy.array_api` is not available from \"\n                                 \"numpy 2.0 onwards\", name=None)\n        elif attr == \"core\":\n            import numpy.core as core\n            return core\n        elif attr == \"strings\":\n            import numpy.strings as strings\n            return strings\n        elif attr == \"distutils\":\n            if 'distutils' in __numpy_submodules__:\n                import numpy.distutils as distutils\n                return distutils\n            else:\n                raise AttributeError(\"`numpy.distutils` is not available from \"\n                                     \"Python 3.12 onwards\", name=None)\n    \n        if attr in __future_scalars__:\n            # And future warnings for those that will change, but also give\n            # the AttributeError\n            warnings.warn(\n                f\"In the future `np.{attr}` will be defined as the \"\n                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)\n    \n        if attr in __former_attrs__:\n            raise AttributeError(__former_attrs__[attr], name=None)\n    \n        if attr in __expired_attributes__:\n>           raise AttributeError(\n                f\"`np.{attr}` was removed in the NumPy 2.0 release. \"\n                f\"{__expired_attributes__[attr]}\",\n                name=None\n            )\nE           AttributeError: `np.complex_` was removed in the NumPy 2.0 release. Use `np.complex128` instead.\n\n/usr/local/lib/python3.10/dist-packages/numpy/__init__.py:400: AttributeError\n----------------------------- Captured stdout call -----------------------------\n(Note: This is the (slow) Python simulator.)\n(Note: This is the (slow) Python simulator.)\n____________________ test_decomposition[12.566370614359172] ____________________\n\nangle = 12.566370614359172\n\n    @pytest.mark.parametrize(\"angle\", [0, math.pi, 2 * math.pi, 4 * math.pi, 0.5])\n    def test_decomposition(angle):\n        \"\"\"\n        Test that this decomposition of Rz produces correct amplitudes\n    \n        Note that this function tests each DecompositionRule in\n        rz2rx.all_defined_decomposition_rules\n        \"\"\"\n        decomposition_rule_list = rz2rx.all_defined_decomposition_rules\n        for rule in decomposition_rule_list:\n            for basis_state in ([1, 0], [0, 1]):\n                correct_dummy_eng = DummyEngine(save_commands=True)\n                correct_eng = MainEngine(backend=Simulator(), engine_list=[correct_dummy_eng])\n    \n                rule_set = DecompositionRuleSet(rules=[rule])\n                test_dummy_eng = DummyEngine(save_commands=True)\n                test_eng = MainEngine(\n                    backend=Simulator(),\n                    engine_list=[\n                        AutoReplacer(rule_set),\n                        InstructionFilter(rz_decomp_gates),\n                        test_dummy_eng,\n                    ],\n                )\n    \n                correct_qb = correct_eng.allocate_qubit()\n                Rz(angle) | correct_qb\n                correct_eng.flush()\n    \n                test_qb = test_eng.allocate_qubit()\n                Rz(angle) | test_qb\n                test_eng.flush()\n    \n                # Create empty vectors for the wave vectors for the correct and\n                # test qubits\n>               correct_vector = np.zeros((2, 1), dtype=np.complex_)\n\nprojectq/setups/decompositions/rz2rx_test.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nattr = 'complex_'\n\n    def __getattr__(attr):\n        # Warn for expired attributes\n        import warnings\n    \n        if attr == \"linalg\":\n            import numpy.linalg as linalg\n            return linalg\n        elif attr == \"fft\":\n            import numpy.fft as fft\n            return fft\n        elif attr == \"dtypes\":\n            import numpy.dtypes as dtypes\n            return dtypes\n        elif attr == \"random\":\n            import numpy.random as random\n            return random\n        elif attr == \"polynomial\":\n            import numpy.polynomial as polynomial\n            return polynomial\n        elif attr == \"ma\":\n            import numpy.ma as ma\n            return ma\n        elif attr == \"ctypeslib\":\n            import numpy.ctypeslib as ctypeslib\n            return ctypeslib\n        elif attr == \"exceptions\":\n            import numpy.exceptions as exceptions\n            return exceptions\n        elif attr == \"testing\":\n            import numpy.testing as testing\n            return testing\n        elif attr == \"matlib\":\n            import numpy.matlib as matlib\n            return matlib\n        elif attr == \"f2py\":\n            import numpy.f2py as f2py\n            return f2py\n        elif attr == \"typing\":\n            import numpy.typing as typing\n            return typing\n        elif attr == \"rec\":\n            import numpy.rec as rec\n            return rec\n        elif attr == \"char\":\n            import numpy.char as char\n            return char\n        elif attr == \"array_api\":\n            raise AttributeError(\"`numpy.array_api` is not available from \"\n                                 \"numpy 2.0 onwards\", name=None)\n        elif attr == \"core\":\n            import numpy.core as core\n            return core\n        elif attr == \"strings\":\n            import numpy.strings as strings\n            return strings\n        elif attr == \"distutils\":\n            if 'distutils' in __numpy_submodules__:\n                import numpy.distutils as distutils\n                return distutils\n            else:\n                raise AttributeError(\"`numpy.distutils` is not available from \"\n                                     \"Python 3.12 onwards\", name=None)\n    \n        if attr in __future_scalars__:\n            # And future warnings for those that will change, but also give\n            # the AttributeError\n            warnings.warn(\n                f\"In the future `np.{attr}` will be defined as the \"\n                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)\n    \n        if attr in __former_attrs__:\n            raise AttributeError(__former_attrs__[attr], name=None)\n    \n        if attr in __expired_attributes__:\n>           raise AttributeError(\n                f\"`np.{attr}` was removed in the NumPy 2.0 release. \"\n                f\"{__expired_attributes__[attr]}\",\n                name=None\n            )\nE           AttributeError: `np.complex_` was removed in the NumPy 2.0 release. Use `np.complex128` instead.\n\n/usr/local/lib/python3.10/dist-packages/numpy/__init__.py:400: AttributeError\n----------------------------- Captured stdout call -----------------------------\n(Note: This is the (slow) Python simulator.)\n(Note: This is the (slow) Python simulator.)\n___________________________ test_decomposition[0.5] ____________________________\n\nangle = 0.5\n\n    @pytest.mark.parametrize(\"angle\", [0, math.pi, 2 * math.pi, 4 * math.pi, 0.5])\n    def test_decomposition(angle):\n        \"\"\"\n        Test that this decomposition of Rz produces correct amplitudes\n    \n        Note that this function tests each DecompositionRule in\n        rz2rx.all_defined_decomposition_rules\n        \"\"\"\n        decomposition_rule_list = rz2rx.all_defined_decomposition_rules\n        for rule in decomposition_rule_list:\n            for basis_state in ([1, 0], [0, 1]):\n                correct_dummy_eng = DummyEngine(save_commands=True)\n                correct_eng = MainEngine(backend=Simulator(), engine_list=[correct_dummy_eng])\n    \n                rule_set = DecompositionRuleSet(rules=[rule])\n                test_dummy_eng = DummyEngine(save_commands=True)\n                test_eng = MainEngine(\n                    backend=Simulator(),\n                    engine_list=[\n                        AutoReplacer(rule_set),\n                        InstructionFilter(rz_decomp_gates),\n                        test_dummy_eng,\n                    ],\n                )\n    \n                correct_qb = correct_eng.allocate_qubit()\n                Rz(angle) | correct_qb\n                correct_eng.flush()\n    \n                test_qb = test_eng.allocate_qubit()\n                Rz(angle) | test_qb\n                test_eng.flush()\n    \n                # Create empty vectors for the wave vectors for the correct and\n                # test qubits\n>               correct_vector = np.zeros((2, 1), dtype=np.complex_)\n\nprojectq/setups/decompositions/rz2rx_test.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nattr = 'complex_'\n\n    def __getattr__(attr):\n        # Warn for expired attributes\n        import warnings\n    \n        if attr == \"linalg\":\n            import numpy.linalg as linalg\n            return linalg\n        elif attr == \"fft\":\n            import numpy.fft as fft\n            return fft\n        elif attr == \"dtypes\":\n            import numpy.dtypes as dtypes\n            return dtypes\n        elif attr == \"random\":\n            import numpy.random as random\n            return random\n        elif attr == \"polynomial\":\n            import numpy.polynomial as polynomial\n            return polynomial\n        elif attr == \"ma\":\n            import numpy.ma as ma\n            return ma\n        elif attr == \"ctypeslib\":\n            import numpy.ctypeslib as ctypeslib\n            return ctypeslib\n        elif attr == \"exceptions\":\n            import numpy.exceptions as exceptions\n            return exceptions\n        elif attr == \"testing\":\n            import numpy.testing as testing\n            return testing\n        elif attr == \"matlib\":\n            import numpy.matlib as matlib\n            return matlib\n        elif attr == \"f2py\":\n            import numpy.f2py as f2py\n            return f2py\n        elif attr == \"typing\":\n            import numpy.typing as typing\n            return typing\n        elif attr == \"rec\":\n            import numpy.rec as rec\n            return rec\n        elif attr == \"char\":\n            import numpy.char as char\n            return char\n        elif attr == \"array_api\":\n            raise AttributeError(\"`numpy.array_api` is not available from \"\n                                 \"numpy 2.0 onwards\", name=None)\n        elif attr == \"core\":\n            import numpy.core as core\n            return core\n        elif attr == \"strings\":\n            import numpy.strings as strings\n            return strings\n        elif attr == \"distutils\":\n            if 'distutils' in __numpy_submodules__:\n                import numpy.distutils as distutils\n                return distutils\n            else:\n                raise AttributeError(\"`numpy.distutils` is not available from \"\n                                     \"Python 3.12 onwards\", name=None)\n    \n        if attr in __future_scalars__:\n            # And future warnings for those that will change, but also give\n            # the AttributeError\n            warnings.warn(\n                f\"In the future `np.{attr}` will be defined as the \"\n                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)\n    \n        if attr in __former_attrs__:\n            raise AttributeError(__former_attrs__[attr], name=None)\n    \n        if attr in __expired_attributes__:\n>           raise AttributeError(\n                f\"`np.{attr}` was removed in the NumPy 2.0 release. \"\n                f\"{__expired_attributes__[attr]}\",\n                name=None\n            )\nE           AttributeError: `np.complex_` was removed in the NumPy 2.0 release. Use `np.complex128` instead.\n\n/usr/local/lib/python3.10/dist-packages/numpy/__init__.py:400: AttributeError\n----------------------------- Captured stdout call -----------------------------\n(Note: This is the (slow) Python simulator.)\n(Note: This is the (slow) Python simulator.)\n===Flaky Test Report===\n\ntest_simple_test_X_eigenvectors passed 1 out of the required 2 times. Running test again until it passes 2 times.\ntest_simple_test_X_eigenvectors passed 2 out of the required 2 times. Success!\ntest_Ph_eigenvectors passed 1 out of the required 2 times. Running test again until it passes 2 times.\ntest_Ph_eigenvectors passed 2 out of the required 2 times. Success!\ntest_2qubitsPh_andfunction_eigenvectors passed 1 out of the required 2 times. Running test again until it passes 2 times.\ntest_2qubitsPh_andfunction_eigenvectors passed 2 out of the required 2 times. Success!\n\n===End Flaky Test Report===\n=========================== short test summary info ============================\nFAILED projectq/backends/_sim/_simulator_test.py::test_is_cpp_simulator_present\nFAILED projectq/libs/math/_gates_math_test.py::test_division[no_decomp] - ass...\nFAILED projectq/libs/math/_gates_math_test.py::test_inverse_division[no_decomp]\nFAILED projectq/setups/decompositions/rz2rx_test.py::test_decomposition[0] - ...\nFAILED projectq/setups/decompositions/rz2rx_test.py::test_decomposition[3.141592653589793]\nFAILED projectq/setups/decompositions/rz2rx_test.py::test_decomposition[6.283185307179586]\nFAILED projectq/setups/decompositions/rz2rx_test.py::test_decomposition[12.566370614359172]\nFAILED projectq/setups/decompositions/rz2rx_test.py::test_decomposition[0.5]\n================= 8 failed, 926 passed, 396 skipped in 30.60s ==================\nDeallocate | Qureg[12]\nDeallocate | Qureg[2]\nDeallocate | Qureg[5]\nDeallocate | Qureg[11]\nDeallocate | Qureg[8]\nDeallocate | Qureg[14]\nDeallocate | Qureg[4]\nDeallocate | Qureg[1]\nDeallocate | Qureg[7]\nDeallocate | Qureg[13]\nDeallocate | Qureg[10]\nDeallocate | Qureg[0]\nDeallocate | Qureg[6]\nDeallocate | Qureg[3]\nDeallocate | Qureg[9]\nDeallocate | Qureg[12]\nDeallocate | Qureg[2]\nDeallocate | Qureg[5]\nDeallocate | Qureg[11]\nDeallocate | Qureg[8]\nDeallocate | Qureg[14]\nDeallocate | Qureg[4]\nDeallocate | Qureg[1]\nDeallocate | Qureg[7]\nDeallocate | Qureg[10]\nDeallocate | Qureg[0]\nDeallocate | Qureg[13]\nDeallocate | Qureg[3]\nDeallocate | Qureg[9]\nDeallocate | Qureg[6]\n",
    "stderr": "",
    "execution_time": 31.484960556030273
  }
]