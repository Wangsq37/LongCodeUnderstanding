[
  {
    "command": "cat requirements.txt",
    "success": false,
    "stdout": "",
    "stderr": "cat: requirements.txt: No such file or directory\n",
    "execution_time": 0.0016400814056396484
  },
  {
    "command": "cat setup.py",
    "success": true,
    "stdout": "# Some of the setup.py code is inspired or copied from SQLAlchemy\n\n# SQLAlchemy was created by Michael Bayer.\n\n# Major contributing authors include:\n\n# - Michael Bayer <mike_mp@zzzcomputing.com>\n# - Jason Kirtland <jek@discorporate.us>\n# - Gaetan de Menten <gdementen@gmail.com>\n# - Diana Clarke <diana.joan.clarke@gmail.com>\n# - Michael Trier <mtrier@gmail.com>\n# - Philip Jenvey <pjenvey@underboss.org>\n# - Ants Aasma <ants.aasma@gmail.com>\n# - Paul Johnston <paj@pajhome.org.uk>\n# - Jonathan Ellis <jbellis@gmail.com>\n# - Damien Nguyen <damien1@huawei.com> (ProjectQ)\n\n# Copyright 2005-2020 SQLAlchemy and ProjectQ authors and contributors (see above)\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n\n\"\"\"Setup.py file.\"\"\"\n\n# pylint: disable=deprecated-module,attribute-defined-outside-init\n\nimport os\nimport platform\nimport subprocess\nimport sys\nimport tempfile\nfrom operator import itemgetter\nfrom pathlib import Path\n\nfrom setuptools import Command\nfrom setuptools import Distribution as _Distribution\nfrom setuptools import Extension, setup\nfrom setuptools.command.build_ext import build_ext\n\ntry:\n    from setuptools._distutils.errors import (\n        CCompilerError,\n        CompileError,\n        DistutilsError,\n    )\n    from setuptools._distutils.spawn import DistutilsExecError, find_executable, spawn\n    from setuptools.errors import PlatformError\n\n    _SETUPTOOL_IMPORT_ERROR = None\n\nexcept ImportError as setuptools_import_error:\n    _SETUPTOOL_IMPORT_ERROR = setuptools_import_error\n\n\ntry:\n    import setuptools_scm  # noqa: F401  # pylint: disable=unused-import\n\n    _HAS_SETUPTOOLS_SCM = True\nexcept ImportError:\n    _HAS_SETUPTOOLS_SCM = False\n\ntry:\n    import tomllib\n\n    def parse_toml(filename):\n        \"\"\"Parse a TOML file.\"\"\"\n        with open(str(filename), 'rb') as toml_file:\n            return tomllib.load(toml_file)\n\nexcept ImportError:\n    try:\n        import toml\n\n        def parse_toml(filename):\n            \"\"\"Parse a TOML file.\"\"\"\n            return toml.load(filename)\n\n    except ImportError:\n\n        def _find_toml_section_end(lines, start):\n            \"\"\"Find the index of the start of the next section.\"\"\"\n            return (\n                next(filter(itemgetter(1), enumerate(line.startswith('[') for line in lines[start + 1 :])))[0]\n                + start\n                + 1\n            )\n\n        def _parse_list(lines):\n            \"\"\"Parse a TOML list into a Python list.\"\"\"\n            # NB: This function expects the TOML list to be formatted like so (ignoring leading and trailing spaces):\n            #     name = [\n            #          '...',\n            #     ]\n            #     Any other format is not supported.\n            name = None\n            elements = []\n\n            for idx, line in enumerate(lines):\n                if name is None and not line.startswith(\"'\"):\n                    name = line.split('=')[0].strip()\n                    continue\n                if line.startswith(\"]\"):\n                    return (name, elements, idx + 1)\n                elements.append(line.rstrip(',').strip(\"'\").strip('\"'))\n\n            raise RuntimeError(f'Failed to locate closing \"]\" for {name}')\n\n        def parse_toml(filename):\n            \"\"\"Very simple parser routine for pyproject.toml.\"\"\"\n            result = {'project': {'optional-dependencies': {}}}\n            with open(filename) as toml_file:\n                lines = [line.strip() for line in toml_file.readlines()]\n            lines = [line for line in lines if line and not line.startswith('#')]\n\n            start = lines.index('[project]')\n            project_data = lines[start : _find_toml_section_end(lines, start)]\n\n            start = lines.index('[project.optional-dependencies]')\n            optional_dependencies = lines[start + 1 : _find_toml_section_end(lines, start)]\n\n            idx = 0\n            N = len(project_data)\n            while idx < N:\n                line = project_data[idx]\n                shift = 1\n                if line.startswith('name'):\n                    result['project']['name'] = line.split('=')[1].strip().strip(\"'\")\n                elif line.startswith('dependencies'):\n                    (name, pkgs, shift) = _parse_list(project_data[idx:])\n                    result['project'][name] = pkgs\n                idx += shift\n\n            idx = 0\n            N = len(optional_dependencies)\n            while idx < N:\n                (opt_name, opt_pkgs, shift) = _parse_list(optional_dependencies[idx:])\n                result['project']['optional-dependencies'][opt_name] = opt_pkgs\n                idx += shift\n\n            return result\n\n\n# ==============================================================================\n# Helper functions and classes\n\n\nclass Pybind11Include:  # pylint: disable=too-few-public-methods\n    \"\"\"\n    Helper class to determine the pybind11 include path.\n\n    The purpose of this class is to postpone importing pybind11 until it is actually installed, so that the\n    ``get_include()`` method can be invoked.\n    \"\"\"\n\n    def __init__(self, user=False):\n        \"\"\"Initialize a Pybind11Include object.\"\"\"\n        self.user = user\n\n    def __str__(self):\n        \"\"\"Conversion to string.\"\"\"\n        import pybind11  # pylint: disable=import-outside-toplevel\n\n        return pybind11.get_include(self.user)\n\n\ndef important_msgs(*msgs):\n    \"\"\"Print an important message.\"\"\"\n    print('*' * 75)\n    for msg in msgs:\n        print(msg)\n    print('*' * 75)\n\n\ndef status_msgs(*msgs):\n    \"\"\"Print a status message.\"\"\"\n    print('-' * 75)\n    for msg in msgs:\n        print('# INFO: ', msg)\n    print('-' * 75)\n\n\ndef compiler_test(\n    compiler,\n    flagname=None,\n    link_executable=False,\n    link_shared_lib=False,\n    include='',\n    body='',\n    compile_postargs=None,\n    link_postargs=None,\n):  # pylint: disable=too-many-arguments,too-many-branches\n    \"\"\"Return a boolean indicating whether a flag name is supported on the specified compiler.\"\"\"\n    fname = None\n    with tempfile.NamedTemporaryFile('w', suffix='.cpp', delete=False) as temp:\n        temp.write(f'{include}\\nint main (int argc, char **argv) {{ {body} return 0; }}')\n        fname = temp.name\n\n    if compile_postargs is None:\n        compile_postargs = [flagname] if flagname is not None else None\n    elif flagname is not None:\n        compile_postargs.append(flagname)\n\n    try:\n        if compiler.compiler_type == 'msvc':\n            olderr = os.dup(sys.stderr.fileno())\n            err = open('err.txt', 'w')  # pylint: disable=consider-using-with\n            os.dup2(err.fileno(), sys.stderr.fileno())\n\n        obj_file = compiler.compile([fname], extra_postargs=compile_postargs)\n        if not os.path.exists(obj_file[0]):\n            raise RuntimeError('')\n        if link_executable:\n            compiler.link_executable(obj_file, os.path.join(tempfile.mkdtemp(), 'test'), extra_postargs=link_postargs)\n        elif link_shared_lib:\n            if sys.platform == 'win32':\n                lib_name = os.path.join(tempfile.mkdtemp(), 'test.dll')\n            else:\n                lib_name = os.path.join(tempfile.mkdtemp(), 'test.so')\n            compiler.link_shared_lib(obj_file, lib_name, extra_postargs=link_postargs)\n\n        if compiler.compiler_type == 'msvc':\n            err.close()\n            os.dup2(olderr, sys.stderr.fileno())\n            with open('err.txt') as err_file:\n                if err_file.readlines():\n                    raise RuntimeError('')\n    except Exception:  # pylint: disable=broad-except\n        return False\n    else:\n        return True\n    finally:\n        os.unlink(fname)\n\n\ndef _fix_macosx_header_paths(*args):\n    # Fix path to SDK headers if necessary\n    _MACOSX_XCODE_REF_PATH = (  # pylint: disable=invalid-name\n        '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer'\n    )\n    _MACOSX_DEVTOOLS_REF_PATH = '/Library/Developer/CommandLineTools/'  # pylint: disable=invalid-name\n    _has_xcode = os.path.exists(_MACOSX_XCODE_REF_PATH)\n    _has_devtools = os.path.exists(_MACOSX_DEVTOOLS_REF_PATH)\n    if not _has_xcode and not _has_devtools:\n        important_msgs('ERROR: Must install either Xcode or CommandLineTools!')\n        raise BuildFailed()\n\n    for compiler_args in args:\n        for idx, item in enumerate(compiler_args):\n            if not _has_xcode and _MACOSX_XCODE_REF_PATH in item:\n                compiler_args[idx] = item.replace(_MACOSX_XCODE_REF_PATH, _MACOSX_DEVTOOLS_REF_PATH)\n\n            if not _has_devtools and _MACOSX_DEVTOOLS_REF_PATH in item:\n                compiler_args[idx] = item.replace(_MACOSX_DEVTOOLS_REF_PATH, _MACOSX_XCODE_REF_PATH)\n\n\n# ==============================================================================\n\n\nclass BuildFailed(Exception):\n    \"\"\"Extension raised if the build fails for any reason.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize a BuildFailed exception object.\"\"\"\n        super().__init__()\n        self.cause = sys.exc_info()[1]  # work around py 2/3 different syntax\n\n\n# ------------------------------------------------------------------------------\n# Python build related variable\n\ncpython = platform.python_implementation() == 'CPython'\next_errors = ()\nif _SETUPTOOL_IMPORT_ERROR is None:\n    ext_errors = (CCompilerError, DistutilsError, CompileError, DistutilsExecError)\nif sys.platform == 'win32':\n    # 2.6's distutils.msvc9compiler can raise an IOError when failing to\n    # find the compiler\n    ext_errors += (IOError,)\n\n# ==============================================================================\n# ProjectQ C++ extensions\n\next_modules = [\n    Extension(\n        'projectq.backends._sim._cppsim',\n        ['projectq/backends/_sim/_cppsim.cpp'],\n        include_dirs=[\n            # Path to pybind11 headers\n            Pybind11Include(),\n            Pybind11Include(user=True),\n        ],\n        language='c++',\n    ),\n]\n\n# ==============================================================================\n\n\nclass BuildExt(build_ext):\n    \"\"\"A custom build extension for adding compiler-specific options.\"\"\"\n\n    c_opts = {\n        'msvc': ['/EHsc'],\n        'unix': [],\n    }\n\n    user_options = build_ext.user_options + [\n        (\n            'gen-compiledb',\n            None,\n            'Generate a compile_commands.json alongside the compilation implies (-n/--dry-run)',\n        ),\n    ]\n\n    boolean_options = build_ext.boolean_options + ['gen-compiledb']\n\n    def initialize_options(self):\n        \"\"\"Initialize this command's options.\"\"\"\n        build_ext.initialize_options(self)\n        self.gen_compiledb = None\n\n    def finalize_options(self):\n        \"\"\"Finalize this command's options.\"\"\"\n        build_ext.finalize_options(self)\n        if self.gen_compiledb:\n            self.dry_run = True\n\n    def run(self):\n        \"\"\"Execute this command.\"\"\"\n        if _SETUPTOOL_IMPORT_ERROR is not None:\n            raise _SETUPTOOL_IMPORT_ERROR\n\n        try:\n            build_ext.run(self)\n        except PlatformError as err:\n            raise BuildFailed() from err\n\n    def build_extensions(self):\n        \"\"\"Build the individual C/C++ extensions.\"\"\"\n        self._configure_compiler()\n\n        for ext in self.extensions:\n            ext.extra_compile_args = self.opts\n            ext.extra_link_args = self.link_opts\n\n        if self.compiler.compiler_type == 'unix' and self.gen_compiledb:\n            compile_commands = []\n            for ext in self.extensions:\n                commands = self._get_compilation_commands(ext)\n                for cmd, src in commands:\n                    compile_commands.append(\n                        {\n                            'directory': os.path.dirname(os.path.abspath(__file__)),\n                            'command': cmd,\n                            'file': os.path.abspath(src),\n                        }\n                    )\n\n            import json  # pylint: disable=import-outside-toplevel\n\n            with open(\n                os.path.join(os.path.dirname(os.path.abspath(__file__)), 'compile_commands.json'),\n                'w',\n            ) as json_file:\n                json.dump(compile_commands, json_file, sort_keys=True, indent=4)\n\n        try:\n            build_ext.build_extensions(self)\n        except ext_errors as err:\n            raise BuildFailed() from err\n        except ValueError as err:\n            # this can happen on Windows 64 bit, see Python issue 7511\n            if \"'path'\" in str(sys.exc_info()[1]):  # works with both py 2/3\n                raise BuildFailed() from err\n            raise\n\n    def _get_compilation_commands(self, ext):\n        # pylint: disable=protected-access\n        (\n            _,\n            objects,\n            extra_postargs,\n            pp_opts,\n            build,\n        ) = self.compiler._setup_compile(\n            outdir=self.build_temp,\n            sources=ext.sources,\n            macros=ext.define_macros,\n            incdirs=ext.include_dirs,\n            extra=ext.extra_compile_args,\n            depends=ext.depends,\n        )\n\n        cc_args = self.compiler._get_cc_args(pp_opts=pp_opts, debug=self.debug, before=None)\n        compiler_so = self.compiler.compiler_so\n        compiler_so[0] = find_executable(compiler_so[0])\n\n        commands = []\n        for obj in objects:\n            try:\n                src, ext = build[obj]\n            except KeyError:\n                continue\n\n            commands.append(\n                (\n                    ' '.join(\n                        compiler_so + cc_args + [os.path.abspath(src), \"-o\", os.path.abspath(obj)] + extra_postargs\n                    ),\n                    src,\n                )\n            )\n        return commands\n\n    def _configure_compiler(self):\n        # Force dry_run = False to allow for compiler feature testing\n        dry_run_old = self.compiler.dry_run\n        self.compiler.dry_run = False\n\n        if (\n            int(os.environ.get('PROJECTQ_CLEANUP_COMPILER_FLAGS', 0))\n            and self.compiler.compiler_type == 'unix'\n            and sys.platform != 'darwin'\n        ):\n            self._cleanup_compiler_flags()\n\n        if sys.platform == 'darwin':\n            _fix_macosx_header_paths(self.compiler.compiler, self.compiler.compiler_so)\n\n            if compiler_test(self.compiler, '-stdlib=libc++'):\n                self.c_opts['unix'] += ['-stdlib=libc++']\n\n        compiler_type = self.compiler.compiler_type\n        self.opts = self.c_opts.get(compiler_type, [])\n        self.link_opts = []\n\n        if not compiler_test(self.compiler):\n            important_msgs(\n                'ERROR: something is wrong with your C++ compiler.\\nFailed to compile a simple test program!'\n            )\n            raise BuildFailed()\n\n        # ------------------------------\n\n        status_msgs('Configuring OpenMP')\n        self._configure_openmp()\n        status_msgs('Configuring compiler intrinsics')\n        self._configure_intrinsics()\n        status_msgs('Configuring C++ standard')\n        self._configure_cxx_standard()\n\n        # ------------------------------\n        # Other compiler tests\n\n        status_msgs('Other compiler tests')\n        self.compiler.define_macro('VERSION_INFO', f'\"{self.distribution.get_version()}\"')\n        if compiler_type == 'unix' and compiler_test(self.compiler, '-fvisibility=hidden'):\n            self.opts.append('-fvisibility=hidden')\n\n        self.compiler.dry_run = dry_run_old\n        status_msgs('Finished configuring compiler!')\n\n    def _configure_openmp(self):\n        if self.compiler.compiler_type == 'msvc':\n            return\n\n        kwargs = {\n            'link_shared_lib': True,\n            'include': '#include <omp.h>',\n            'body': 'int a = omp_get_num_threads(); ++a;',\n        }\n\n        for flag in ['-openmp', '-fopenmp', '-qopenmp', '/Qopenmp']:\n            if compiler_test(self.compiler, flag, link_postargs=[flag], **kwargs):\n                self.opts.append(flag)\n                self.link_opts.append(flag)\n                return\n\n        flag = '-fopenmp'\n        if sys.platform == 'darwin' and compiler_test(self.compiler, flag):\n            try:\n                llvm_root = subprocess.check_output(['brew', '--prefix', 'llvm']).decode('utf-8')[:-1]\n                compiler_root = subprocess.check_output(['which', self.compiler.compiler[0]]).decode('utf-8')[:-1]\n\n                # Only add the flag if the compiler we are using is the one\n                # from HomeBrew\n                if llvm_root in compiler_root:\n                    l_arg = f'-L{llvm_root}/lib'\n                    if compiler_test(self.compiler, flag, link_postargs=[l_arg, flag], **kwargs):\n                        self.opts.append(flag)\n                        self.link_opts.extend((l_arg, flag))\n                        return\n            except subprocess.CalledProcessError:\n                pass\n\n            try:\n                # Only relevant for MacPorts users with clang-3.7\n                port_path = subprocess.check_output(['which', 'port']).decode('utf-8')[:-1]\n                macports_root = os.path.dirname(os.path.dirname(port_path))\n                compiler_root = subprocess.check_output(['which', self.compiler.compiler[0]]).decode('utf-8')[:-1]\n\n                # Only add the flag if the compiler we are using is the one\n                # from MacPorts\n                if macports_root in compiler_root:\n                    inc_dir = f'{macports_root}/include/libomp'\n                    lib_dir = f'{macports_root}/lib/libomp'\n                    c_arg = '-I' + inc_dir\n                    l_arg = '-L' + lib_dir\n\n                    if compiler_test(self.compiler, flag, compile_postargs=[c_arg], link_postargs=[l_arg], **kwargs):\n                        self.compiler.add_include_dir(inc_dir)\n                        self.compiler.add_library_dir(lib_dir)\n                        return\n            except subprocess.CalledProcessError:\n                pass\n\n        important_msgs('WARNING: compiler does not support OpenMP!')\n\n    def _configure_intrinsics(self):\n        flags = [\n            '-march=native',\n            '-mavx2',\n            '/arch:AVX2',\n            '/arch:CORE-AVX2',\n            '/arch:AVX',\n        ]\n\n        if int(os.environ.get('PROJECTQ_NOINTRIN', '0')) or (\n            sys.platform == 'darwin'\n            and platform.machine() == 'arm64'\n            and (sys.version_info.major == 3 and sys.version_info.minor < 9)\n        ):\n            important_msgs(\n                'Either requested no-intrinsics or detected potentially unsupported Python version on '\n                'Apple Silicon: disabling intrinsics'\n            )\n            self.compiler.define_macro('NOINTRIN')\n            return\n        if os.environ.get('PROJECTQ_DISABLE_ARCH_NATIVE'):\n            flags = flags[1:]\n\n        for flag in flags:\n            if compiler_test(\n                self.compiler,\n                flagname=flag,\n                include='#include <immintrin.h>',\n                body='__m256d neg = _mm256_set1_pd(1.0); (void)neg;',\n            ):\n                self.opts.append(flag)\n                self.compiler.define_macro(\"INTRIN\")\n                break\n\n        for flag in ['-ffast-math', '-fast', '/fast', '/fp:precise']:\n            if compiler_test(self.compiler, flagname=flag):\n                self.opts.append(flag)\n                break\n\n    def _configure_cxx_standard(self):\n        if self.compiler.compiler_type == 'msvc':\n            return\n\n        cxx_standards = [17, 14, 11]\n        if sys.platform == 'darwin':\n            major_version = int(platform.mac_ver()[0].split('.')[0])\n            minor_version = int(platform.mac_ver()[0].split('.')[1])\n            if major_version <= 10 and minor_version < 14:\n                cxx_standards = [year for year in cxx_standards if year < 17]\n\n        for year in cxx_standards:\n            flag = f'-std=c++{year}'\n            if compiler_test(self.compiler, flag):\n                self.opts.append(flag)\n                return\n            flag = f'/Qstd=c++{year}'\n            if compiler_test(self.compiler, flag):\n                self.opts.append(flag)\n                return\n\n        important_msgs('ERROR: compiler needs to have at least C++11 support!')\n        raise BuildFailed()\n\n    def _cleanup_compiler_flags(self):\n        status_msgs('INFO: Performing compiler flags cleanup')\n        compiler_exe = self.compiler.compiler[0]\n        compiler_exe_so = self.compiler.compiler_so[0]\n        linker_so = self.compiler.linker_so[0]\n        compiler_flags = set(self.compiler.compiler[1:])\n        compiler_so_flags = set(self.compiler.compiler_so[1:])\n        linker_so_flags = set(self.compiler.linker_so[1:])\n\n        all_common_flags = compiler_flags & compiler_so_flags & linker_so_flags\n        common_compiler_flags = (compiler_flags & compiler_so_flags) - all_common_flags\n\n        compiler_flags = compiler_flags - common_compiler_flags - all_common_flags\n        compiler_so_flags = compiler_so_flags - common_compiler_flags - all_common_flags\n\n        flags = []\n        for flag in common_compiler_flags:\n            compiler = type(self.compiler)()\n            compiler.set_executables(compiler=compiler_exe, compiler_so=compiler_exe_so, linker_so=linker_so)\n\n            compiler.debug_print(f'INFO: trying out {flag}')\n            if compiler_test(compiler, flag, link_shared_lib=True, compile_postargs=['-fPIC']):\n                flags.append(flag)\n            else:\n                important_msgs(f'WARNING: ignoring unsupported compiler flag: {flag}')\n\n        self.compiler.compiler = [compiler_exe] + list(compiler_flags)\n        self.compiler.compiler_so = [compiler_exe_so] + list(compiler_so_flags)\n        self.compiler.linker_so = [linker_so] + list(linker_so_flags - all_common_flags)\n\n        self.compiler.compiler.extend(flags)\n        self.compiler.compiler_so.extend(flags)\n\n        flags = []\n        for flag in all_common_flags:\n            if compiler_test(self.compiler, flag):\n                flags.append(flag)\n            else:\n                important_msgs(f'WARNING: ignoring unsupported compiler flag: {flag}')\n\n        self.compiler.compiler.extend(flags)\n        self.compiler.compiler_so.extend(flags)\n        self.compiler.linker_so.extend(flags)\n\n\n# ------------------------------------------------------------------------------\n\n\nclass ClangTidy(Command):\n    \"\"\"A custom command to run Clang-Tidy on all C/C++ source files.\"\"\"\n\n    description = 'run Clang-Tidy on all C/C++ source files'\n    user_options = [('warning-as-errors', None, 'Warning as errors')]\n    boolean_options = ['warning-as-errors']\n\n    sub_commands = [('build_ext', None)]\n\n    def initialize_options(self):\n        \"\"\"Initialize this command's options.\"\"\"\n        self.warning_as_errors = None\n\n    def finalize_options(self):\n        \"\"\"Finalize this command's options.\"\"\"\n\n    def run(self):\n        \"\"\"Execute this command.\"\"\"\n        # Ideally we would use self.run_command(command) but we need to ensure\n        # that --dry-run --gen-compiledb are passed to build_ext regardless of\n        # other arguments\n        command = 'build_ext'\n        # distutils.log.info(\"running %s --dry-run --gen-compiledb\", command)\n        cmd_obj = self.get_finalized_command(command)\n        cmd_obj.dry_run = True\n        cmd_obj.gen_compiledb = True\n        try:\n            cmd_obj.run()\n            self.distribution.have_run[command] = 1\n        except BuildFailed as err:\n            # distutils.log.error('build_ext --dry-run --gen-compiledb command failed!')\n            raise RuntimeError('build_ext --dry-run --gen-compiledb command failed!') from err\n\n        command = ['clang-tidy']\n        if self.warning_as_errors:\n            command.append('--warnings-as-errors=*')\n        for ext in self.distribution.ext_modules:\n            command.extend(os.path.abspath(p) for p in ext.sources)\n        spawn(command, dry_run=self.dry_run)\n\n\n# ------------------------------------------------------------------------------\n\n\nclass GenerateRequirementFile(Command):\n    \"\"\"A custom command to list the dependencies of the current.\"\"\"\n\n    description = 'List the dependencies of the current package'\n    user_options = [\n        ('include-all-extras', None, 'Include all \"extras_require\" into the list'),\n        ('include-extras=', None, 'Include some of extras_requires into the list (comma separated)'),\n    ]\n\n    boolean_options = ['include-all-extras']\n\n    def initialize_options(self):\n        \"\"\"Initialize this command's options.\"\"\"\n        self.include_extras = None\n        self.include_all_extras = None\n        self.extra_pkgs = []\n        self.dependencies = []\n\n    def finalize_options(self):\n        \"\"\"Finalize this command's options.\"\"\"\n        include_extras = self.include_extras.split(',') if self.include_extras else []\n        pyproject_toml = parse_toml(Path(__file__).parent / 'pyproject.toml')\n\n        for name, pkgs in pyproject_toml['project']['optional-dependencies'].items():\n            if self.include_all_extras or name in include_extras:\n                self.extra_pkgs.extend(pkgs)\n\n        self.dependencies = self.distribution.install_requires\n        if not self.dependencies:\n            self.dependencies = pyproject_toml['project']['dependencies']\n\n    def run(self):\n        \"\"\"Execute this command.\"\"\"\n        with open('requirements.txt', 'w') as req_file:\n            for pkg in self.dependencies:\n                req_file.write(f'{pkg}\\n')\n            req_file.write('\\n')\n            for pkg in self.extra_pkgs:\n                req_file.write(f'{pkg}\\n')\n\n\n# ------------------------------------------------------------------------------\n\n\nclass Distribution(_Distribution):\n    \"\"\"Distribution class.\"\"\"\n\n    def has_ext_modules(self):\n        \"\"\"Return whether this distribution has some external modules.\"\"\"\n        # We want to always claim that we have ext_modules. This will be fine\n        # if we don't actually have them (such as on PyPy) because nothing\n        # will get built, however we don't want to provide an overally broad\n        # Wheel package when building a wheel without C support. This will\n        # ensure that Wheel knows to treat us as if the build output is\n        # platform specific.\n        return True\n\n\n# ==============================================================================\n\n\ndef run_setup(with_cext):\n    \"\"\"Run the setup() function.\"\"\"\n    kwargs = {}\n    if with_cext:\n        kwargs['ext_modules'] = ext_modules\n    else:\n        kwargs['ext_modules'] = []\n\n    # NB: Workaround for people calling setup.py without a proper environment containing setuptools-scm\n    #     This can typically be the case when calling the `gen_reqfile` or `clang_tidy`commands\n    if not _HAS_SETUPTOOLS_SCM:\n        kwargs['version'] = '0.0.0'\n\n    setup(\n        cmdclass={\n            'build_ext': BuildExt,\n            'clang_tidy': ClangTidy,\n            'gen_reqfile': GenerateRequirementFile,\n        },\n        distclass=Distribution,\n        **kwargs,\n    )\n\n\n# ==============================================================================\n\nif not cpython:\n    run_setup(False)\n    important_msgs(\n        'WARNING: C/C++ extensions are not supported on some features are disabled (e.g. C++ simulator).',\n        'Plain-Python build succeeded.',\n    )\nelif os.environ.get('PROJECTQ_DISABLE_CEXT'):\n    run_setup(False)\n    important_msgs(\n        'PROJECTQ_DISABLE_CEXT is set; not attempting to build C/C++ extensions.',\n        'Plain-Python build succeeded.',\n    )\n\nelse:\n    try:\n        run_setup(True)\n    except BuildFailed as exc:\n        if os.environ.get('PROJECTQ_CI_BUILD'):\n            raise exc\n\n        important_msgs(\n            exc.cause,\n            'WARNING: Some C/C++ extensions could not be compiled, '\n            + 'some features are disabled (e.g. C++ simulator).',\n            'Failure information, if any, is above.',\n            'Retrying the build without the C/C++ extensions now.',\n        )\n\n        run_setup(False)\n\n        important_msgs(\n            'WARNING: Some C/C++ extensions could not be compiled, '\n            + 'some features are disabled (e.g. C++ simulator).',\n            'Plain-Python build succeeded.',\n        )\n",
    "stderr": "",
    "execution_time": 0.001889944076538086
  },
  {
    "command": "cat pyproject.toml",
    "success": true,
    "stdout": "[build-system]\nrequires = [\n    'setuptools>=61',\n    'wheel',\n    'pybind11>=2',\n    'setuptools_scm[toml]>6'\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = 'projectq'\nauthors = [\n     {name = 'ProjectQ', email = 'info@projectq.ch'}\n]\ndescription = 'ProjectQ - An open source software framework for quantum computing'\nrequires-python = '>= 3.8'\nlicense = {text= 'Apache License Version 2.0'}\nreadme = 'README.rst'\nclassifiers = [\n    'License :: OSI Approved :: Apache Software License',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Programming Language :: Python :: 3 :: Only',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: 3.11',\n    'Programming Language :: Python :: 3.12'\n]\ndynamic = [\"version\"]\n\ndependencies = [\n    'matplotlib >= 2.2.3',\n    'networkx >= 2.4',\n    'numpy>=1.21.5',\n    'requests>=2.25.1',\n    'scipy>=1.8.0'\n]\n\n[project.urls]\n'Homepage' = 'http://www.projectq.ch'\n'Documentation' = 'https://projectq.readthedocs.io/en/latest/'\n'Issue Tracker' = 'https://github.com/ProjectQ-Framework/ProjectQ/'\n\n[project.optional-dependencies]\n\nazure-quantum = [\n      'azure-quantum'\n]\n\nbraket = [\n      'boto3'\n]\n\nrevkit = [\n     'revkit == 3.0a2.dev2',\n      'dormouse'\n]\n\ntest = [\n     'flaky>=3.7.0',\n     'mock',\n     'pytest >= 6.0',\n     'pytest-cov',\n     'pytest-mock'\n]\n\ndocs = [\n     'sphinx>=4.3.2',\n     'sphinx_rtd_theme'\n]\n\n# ==============================================================================\n\n[tool.black]\n\n    line-length = 120\n    target-version = ['py38','py39','py310','py311','py312']\n    skip-string-normalization = true\n\n\n[tool.check-manifest]\nignore = [\n    'PKG-INFO',\n    '*.egg-info',\n    '*.egg-info/*',\n    'setup.cfg',\n    '.hgtags',\n    '.hgsigs',\n    '.hgignore',\n    '.gitignore',\n    '.bzrignore',\n    '.gitattributes',\n    '.github/*',\n    '.travis.yml',\n    'Jenkinsfile',\n    '*.mo',\n    '.clang-format',\n    '.gitmodules',\n    'requirements.txt',\n    'requirements_tests.txt',\n    'VERSION.txt',\n    '.editorconfig',\n    '*.yml',\n    '*.yaml',\n    'docs/*',\n    'docs/images/*',\n    'examples/*',\n    ]\n\n\n\n[tool.coverage]\n    [tool.coverage.run]\n        omit = [\n            '*_test.py',\n            '*_fixtures.py'\n        ]\n\n\n[tool.pylint]\n    [tool.pylint.master]\n    ignore-patterns = [\n        '__init__.py',\n        '.*_test.py',\n        '.*_fixtures.py',\n        '.*flycheck.*.py',\n    ]\n\n    extension-pkg-whitelist = [\n        'math',\n        'cmath',\n        'unicodedata',\n        'revkit'\n    ]\n    extension-pkg-allow-list = [\n        'math',\n        'cmath',\n        'unicodedata',\n        'revkit'\n    ]\n\n    [tool.pylint.basic]\n    good-names = ['qb', 'id', 'i', 'j', 'k', 'N', 'op', 'X', 'Y', 'Z', 'R', 'C', 'CRz', 'Zero', 'One']\n\n    [tool.pylint.format]\n    max-line-length = 120\n\n    [tool.pylint.reports]\n    msg-template = '{path}:{line}: [{msg_id}, {obj}] {msg} ({symbol})'\n\n    [tool.pylint.similarities]\n    min-similarity-lines = 20\n\n    [tool.pylint.messages_control]\n    disable = [\n         'expression-not-assigned',\n         'pointless-statement',\n         'fixme',\n         'unspecified-encoding',\n         'R0801',\n    ]\n\n    [tool.pylint.typecheck]\n    ignored-modules = ['boto3', 'botocore', 'sympy']\n\n\n[tool.pytest.ini_options]\n\nminversion = '6.0'\naddopts = '-pno:warnings'\ntestpaths = ['projectq']\nignore-glob = ['*flycheck*.py']\nmock_use_standalone_module = true\n\n[tool.doc8]\n\nverbose = 0\nmax_line_length = 120\n\n[tool.isort]\n\nprofile = \"black\"\n\n[tool.setuptools_scm]\n\nwrite_to = 'VERSION.txt'\nwrite_to_template = '{version}'\nlocal_scheme = 'no-local-version'\n\n[tool.cibuildwheel]\n\narchs = ['auto64']\nbuild-frontend = 'build'\nbuild-verbosity = 1\nskip = 'pp* *-musllinux*'\nenvironment = { PROJECTQ_DISABLE_ARCH_NATIVE='1', PROJECTQ_CI_BUILD='1', OMP_NUM_THREADS='1' }\n\nbefore-test = [\n    'cd {package}',\n    'python setup.py gen_reqfile',\n    'python -m pip install -r requirements.txt --only-binary :all:',\n]\n\ntest-command = 'python {package}/examples/grover.py'\n\n# Normal options, etc.\nmanylinux-x86_64-image = 'manylinux2014'\n",
    "stderr": "",
    "execution_time": 0.0014617443084716797
  },
  {
    "command": "pip install . --no-build-isolation",
    "success": false,
    "stdout": "Looking in indexes: https://repo.huaweicloud.com/repository/pypi/simple/\nProcessing /app/repo_to_process\n  Preparing metadata (pyproject.toml): started\n  Preparing metadata (pyproject.toml): finished with status 'done'\nBuilding wheels for collected packages: UNKNOWN\n  Building wheel for UNKNOWN (pyproject.toml): started\n  Building wheel for UNKNOWN (pyproject.toml): finished with status 'error'\nFailed to build UNKNOWN\n",
    "stderr": "  error: subprocess-exited-with-error\n  \n  × Building wheel for UNKNOWN (pyproject.toml) did not run successfully.\n  │ exit code: 1\n  ╰─> [337 lines of output]\n      running bdist_wheel\n      running build\n      running build_py\n      creating build\n      creating build/lib.linux-x86_64-3.10\n      creating build/lib.linux-x86_64-3.10/projectq\n      copying projectq/__init__.py -> build/lib.linux-x86_64-3.10/projectq\n      creating build/lib.linux-x86_64-3.10/projectq/types\n      copying projectq/types/_qubit.py -> build/lib.linux-x86_64-3.10/projectq/types\n      copying projectq/types/__init__.py -> build/lib.linux-x86_64-3.10/projectq/types\n      copying projectq/types/_qubit_test.py -> build/lib.linux-x86_64-3.10/projectq/types\n      creating build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_unitary.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_utils_test.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_unitary_test.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/__init__.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_exceptions.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_resource_test.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_resource.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_utils.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_printer_test.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      copying projectq/backends/_printer.py -> build/lib.linux-x86_64-3.10/projectq/backends\n      creating build/lib.linux-x86_64-3.10/projectq/tests\n      copying projectq/tests/_factoring_test.py -> build/lib.linux-x86_64-3.10/projectq/tests\n      copying projectq/tests/__init__.py -> build/lib.linux-x86_64-3.10/projectq/tests\n      creating build/lib.linux-x86_64-3.10/projectq/libs\n      copying projectq/libs/__init__.py -> build/lib.linux-x86_64-3.10/projectq/libs\n      creating build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_shortcuts_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_gates.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_qaagate_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_qpegate.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/__init__.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_qubit_operator_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_qaagate.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_shortcuts.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_qubit_operator.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_qpegate_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_qftgate_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_basics.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_state_prep_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_qftgate.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_uniformly_controlled_rotation_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_command.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_time_evolution.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_command_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_metagates_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_uniformly_controlled_rotation.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_basics_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_metagates.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_gates_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_time_evolution_test.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      copying projectq/ops/_state_prep.py -> build/lib.linux-x86_64-3.10/projectq/ops\n      creating build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_main_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_optimize_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/__init__.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_ibm5qubitmapper.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_swapandcnotflipper.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_main.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_cmdmodifier.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_testengine.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_basics.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_withflushing_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_basicmapper.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_optimize.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_ibm5qubitmapper_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_cmdmodifier_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_basicmapper_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_manualmapper.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_swapandcnotflipper_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_tagremover.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_basics_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_testengine_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_manualmapper_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_linearmapper_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_twodmapper.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_tagremover_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_linearmapper.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      copying projectq/cengines/_twodmapper_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines\n      creating build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/trapped_ion_decomposer.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/ionq_test.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/awsbraket_test.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/grid.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/aqt.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/grid_test.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/linear_test.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/restrictedgateset.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/ibm_test.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/__init__.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/ibm.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/trapped_ion_decomposer_test.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/ionq.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/aqt_test.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/linear.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/restrictedgateset_test.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/default.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/_utils.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      copying projectq/setups/awsbraket.py -> build/lib.linux-x86_64-3.10/projectq/setups\n      creating build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_util_test.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_logicalqubit_test.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_loop.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_dirtyqubit_test.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_dagger.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/__init__.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_exceptions.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_util.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_control.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_loop_test.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_logicalqubit.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_control_test.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_dirtyqubit.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_dagger_test.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_compute.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      copying projectq/meta/_compute_test.py -> build/lib.linux-x86_64-3.10/projectq/meta\n      creating build/lib.linux-x86_64-3.10/projectq/backends/_aqt\n      copying projectq/backends/_aqt/_aqt.py -> build/lib.linux-x86_64-3.10/projectq/backends/_aqt\n      copying projectq/backends/_aqt/_aqt_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_aqt\n      copying projectq/backends/_aqt/__init__.py -> build/lib.linux-x86_64-3.10/projectq/backends/_aqt\n      copying projectq/backends/_aqt/_aqt_http_client_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_aqt\n      copying projectq/backends/_aqt/_aqt_http_client.py -> build/lib.linux-x86_64-3.10/projectq/backends/_aqt\n      creating build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/_drawer_matplotlib.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/_drawer.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/__init__.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/_to_latex_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/_to_latex.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/_drawer_matplotlib_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/_plot_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/_drawer_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      copying projectq/backends/_circuits/_plot.py -> build/lib.linux-x86_64-3.10/projectq/backends/_circuits\n      creating build/lib.linux-x86_64-3.10/projectq/backends/_ibm\n      copying projectq/backends/_ibm/__init__.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ibm\n      copying projectq/backends/_ibm/_ibm_http_client_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ibm\n      copying projectq/backends/_ibm/_ibm_http_client.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ibm\n      copying projectq/backends/_ibm/_ibm.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ibm\n      copying projectq/backends/_ibm/_ibm_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ibm\n      creating build/lib.linux-x86_64-3.10/projectq/backends/_awsbraket\n      copying projectq/backends/_awsbraket/_awsbraket_boto3_client.py -> build/lib.linux-x86_64-3.10/projectq/backends/_awsbraket\n      copying projectq/backends/_awsbraket/__init__.py -> build/lib.linux-x86_64-3.10/projectq/backends/_awsbraket\n      copying projectq/backends/_awsbraket/_awsbraket_test_fixtures.py -> build/lib.linux-x86_64-3.10/projectq/backends/_awsbraket\n      copying projectq/backends/_awsbraket/_awsbraket.py -> build/lib.linux-x86_64-3.10/projectq/backends/_awsbraket\n      copying projectq/backends/_awsbraket/_awsbraket_boto3_client_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_awsbraket\n      copying projectq/backends/_awsbraket/_awsbraket_boto3_client_test_fixtures.py -> build/lib.linux-x86_64-3.10/projectq/backends/_awsbraket\n      copying projectq/backends/_awsbraket/_awsbraket_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_awsbraket\n      creating build/lib.linux-x86_64-3.10/projectq/backends/_sim\n      copying projectq/backends/_sim/_simulator_test_fixtures.py -> build/lib.linux-x86_64-3.10/projectq/backends/_sim\n      copying projectq/backends/_sim/_classical_simulator_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_sim\n      copying projectq/backends/_sim/__init__.py -> build/lib.linux-x86_64-3.10/projectq/backends/_sim\n      copying projectq/backends/_sim/_classical_simulator.py -> build/lib.linux-x86_64-3.10/projectq/backends/_sim\n      copying projectq/backends/_sim/_pysim.py -> build/lib.linux-x86_64-3.10/projectq/backends/_sim\n      copying projectq/backends/_sim/_simulator_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_sim\n      copying projectq/backends/_sim/_simulator.py -> build/lib.linux-x86_64-3.10/projectq/backends/_sim\n      creating build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      copying projectq/backends/_azure/_azure_quantum_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      copying projectq/backends/_azure/_azure_quantum_client_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      copying projectq/backends/_azure/_utils_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      copying projectq/backends/_azure/__init__.py -> build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      copying projectq/backends/_azure/_exceptions.py -> build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      copying projectq/backends/_azure/_azure_quantum_client.py -> build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      copying projectq/backends/_azure/_azure_quantum.py -> build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      copying projectq/backends/_azure/_utils.py -> build/lib.linux-x86_64-3.10/projectq/backends/_azure\n      creating build/lib.linux-x86_64-3.10/projectq/backends/_ionq\n      copying projectq/backends/_ionq/_ionq.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ionq\n      copying projectq/backends/_ionq/_ionq_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ionq\n      copying projectq/backends/_ionq/__init__.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ionq\n      copying projectq/backends/_ionq/_ionq_http_client.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ionq\n      copying projectq/backends/_ionq/_ionq_mapper_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ionq\n      copying projectq/backends/_ionq/_ionq_http_client_test.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ionq\n      copying projectq/backends/_ionq/_ionq_mapper.py -> build/lib.linux-x86_64-3.10/projectq/backends/_ionq\n      creating build/lib.linux-x86_64-3.10/projectq/libs/hist\n      copying projectq/libs/hist/_histogram_test.py -> build/lib.linux-x86_64-3.10/projectq/libs/hist\n      copying projectq/libs/hist/__init__.py -> build/lib.linux-x86_64-3.10/projectq/libs/hist\n      copying projectq/libs/hist/_histogram.py -> build/lib.linux-x86_64-3.10/projectq/libs/hist\n      creating build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/_gates_math_test.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/_gates.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/_quantummath_test.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/_constantmath.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/__init__.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/_default_rules.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/_constantmath_test.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/_quantummath.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      copying projectq/libs/math/_gates_test.py -> build/lib.linux-x86_64-3.10/projectq/libs/math\n      creating build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      copying projectq/libs/revkit/_control_function.py -> build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      copying projectq/libs/revkit/_phase.py -> build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      copying projectq/libs/revkit/_permutation.py -> build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      copying projectq/libs/revkit/__init__.py -> build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      copying projectq/libs/revkit/_phase_test.py -> build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      copying projectq/libs/revkit/_utils.py -> build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      copying projectq/libs/revkit/_control_function_test.py -> build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      copying projectq/libs/revkit/_permutation_test.py -> build/lib.linux-x86_64-3.10/projectq/libs/revkit\n      creating build/lib.linux-x86_64-3.10/projectq/cengines/_replacer\n      copying projectq/cengines/_replacer/_replacer.py -> build/lib.linux-x86_64-3.10/projectq/cengines/_replacer\n      copying projectq/cengines/_replacer/_decomposition_rule.py -> build/lib.linux-x86_64-3.10/projectq/cengines/_replacer\n      copying projectq/cengines/_replacer/__init__.py -> build/lib.linux-x86_64-3.10/projectq/cengines/_replacer\n      copying projectq/cengines/_replacer/_decomposition_rule_set.py -> build/lib.linux-x86_64-3.10/projectq/cengines/_replacer\n      copying projectq/cengines/_replacer/_replacer_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines/_replacer\n      copying projectq/cengines/_replacer/_decomposition_rule_test.py -> build/lib.linux-x86_64-3.10/projectq/cengines/_replacer\n      creating build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/cnot2rxx_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/controlstate.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/phaseestimation_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/carb1qubit2cnotrzandry.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/cnu2toffoliandcu_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/sqrtswap2cnot.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/rz2rx_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/carb1qubit2cnotrzandry_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/amplitudeamplification.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/stateprep2cnot.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/amplitudeamplification_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/uniformlycontrolledr2cnot.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/sqrtswap2cnot_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/swap2cnot.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/__init__.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/arb1qubit2rzandry_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/qubitop2onequbit_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/phaseestimation.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/barrier.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/cnot2cz.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/ry2rz.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/cnot2cz_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/arb1qubit2rzandry.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/time_evolution.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/ph2r.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/time_evolution_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/h2rx_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/uniformlycontrolledr2cnot_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/stateprep2cnot_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/cnu2toffoliandcu.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/rz2rx.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/entangle.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/globalphase.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/qft2crandhadamard.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/qubitop2onequbit.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/crz2cxandrz.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/controlstate_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/barrier_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/r2rzandph.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/rx2rz_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/rx2rz.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/ry2rz_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/toffoli2cnotandtgate.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/cnot2rxx.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/h2rx.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      copying projectq/setups/decompositions/_gates_test.py -> build/lib.linux-x86_64-3.10/projectq/setups/decompositions\n      running build_ext\n      creating tmp\n      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c /tmp/tmp7_q9yyok.cpp -o tmp/tmp7_q9yyok.o\n      ---------------------------------------------------------------------------\n      # INFO:  Configuring OpenMP\n      ---------------------------------------------------------------------------\n      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c /tmp/tmp2jg9hc4s.cpp -o tmp/tmp2jg9hc4s.o -openmp\n      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c /tmp/tmp_wncmq2c.cpp -o tmp/tmp_wncmq2c.o -fopenmp\n      x86_64-linux-gnu-gcc -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -g -fwrapv -O2 -Wl,-Bsymbolic-functions -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 tmp/tmp_wncmq2c.o -o /tmp/tmpn5_n2pm8/libtest.so.so -fopenmp\n      ---------------------------------------------------------------------------\n      # INFO:  Configuring compiler intrinsics\n      ---------------------------------------------------------------------------\n      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c /tmp/tmpucgve44q.cpp -o tmp/tmpucgve44q.o -march=native\n      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DINTRIN -I/usr/include/python3.10 -c /tmp/tmp4w4wr2ob.cpp -o tmp/tmp4w4wr2ob.o -ffast-math\n      ---------------------------------------------------------------------------\n      # INFO:  Configuring C++ standard\n      ---------------------------------------------------------------------------\n      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DINTRIN -I/usr/include/python3.10 -c /tmp/tmpafu_hzh_.cpp -o tmp/tmpafu_hzh_.o -std=c++17\n      ---------------------------------------------------------------------------\n      # INFO:  Other compiler tests\n      ---------------------------------------------------------------------------\n      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DINTRIN -DVERSION_INFO=\"0.0.0\" -I/usr/include/python3.10 -c /tmp/tmp6ug72kgd.cpp -o tmp/tmp6ug72kgd.o -fvisibility=hidden\n      ---------------------------------------------------------------------------\n      # INFO:  Finished configuring compiler!\n      ---------------------------------------------------------------------------\n      building 'projectq.backends._sim._cppsim' extension\n      Traceback (most recent call last):\n        File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 389, in <module>\n          main()\n        File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 373, in main\n          json_out[\"return_val\"] = hook(**hook_input[\"kwargs\"])\n        File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 280, in build_wheel\n          return _build_backend().build_wheel(\n        File \"/usr/lib/python3/dist-packages/setuptools/build_meta.py\", line 230, in build_wheel\n          return self._build_with_temp_dir(['bdist_wheel'], '.whl',\n        File \"/usr/lib/python3/dist-packages/setuptools/build_meta.py\", line 215, in _build_with_temp_dir\n          self.run_setup()\n        File \"/usr/lib/python3/dist-packages/setuptools/build_meta.py\", line 158, in run_setup\n          exec(compile(code, __file__, 'exec'), locals())\n        File \"setup.py\", line 791, in <module>\n          run_setup(True)\n        File \"setup.py\", line 763, in run_setup\n          setup(\n        File \"/usr/lib/python3/dist-packages/setuptools/__init__.py\", line 153, in setup\n          return distutils.core.setup(**attrs)\n        File \"/usr/lib/python3.10/distutils/core.py\", line 148, in setup\n          dist.run_commands()\n        File \"/usr/lib/python3.10/distutils/dist.py\", line 966, in run_commands\n          self.run_command(cmd)\n        File \"/usr/lib/python3.10/distutils/dist.py\", line 985, in run_command\n          cmd_obj.run()\n        File \"/usr/lib/python3/dist-packages/wheel/bdist_wheel.py\", line 299, in run\n          self.run_command('build')\n        File \"/usr/lib/python3.10/distutils/cmd.py\", line 313, in run_command\n          self.distribution.run_command(command)\n        File \"/usr/lib/python3.10/distutils/dist.py\", line 985, in run_command\n          cmd_obj.run()\n        File \"/usr/lib/python3.10/distutils/command/build.py\", line 135, in run\n          self.run_command(cmd_name)\n        File \"/usr/lib/python3.10/distutils/cmd.py\", line 313, in run_command\n          self.distribution.run_command(command)\n        File \"/usr/lib/python3.10/distutils/dist.py\", line 985, in run_command\n          cmd_obj.run()\n        File \"setup.py\", line 349, in run\n          build_ext.run(self)\n        File \"/usr/lib/python3/dist-packages/setuptools/command/build_ext.py\", line 79, in run\n          _build_ext.run(self)\n        File \"/usr/lib/python3.10/distutils/command/build_ext.py\", line 340, in run\n          self.build_extensions()\n        File \"setup.py\", line 383, in build_extensions\n          build_ext.build_extensions(self)\n        File \"/usr/lib/python3.10/distutils/command/build_ext.py\", line 449, in build_extensions\n          self._build_extensions_serial()\n        File \"/usr/lib/python3.10/distutils/command/build_ext.py\", line 474, in _build_extensions_serial\n          self.build_extension(ext)\n        File \"/usr/lib/python3/dist-packages/setuptools/command/build_ext.py\", line 202, in build_extension\n          _build_ext.build_extension(self, ext)\n        File \"/usr/lib/python3.10/distutils/command/build_ext.py\", line 529, in build_extension\n          objects = self.compiler.compile(sources,\n        File \"/usr/lib/python3.10/distutils/ccompiler.py\", line 565, in compile\n          self._setup_compile(output_dir, macros, include_dirs, sources,\n        File \"/usr/lib/python3.10/distutils/ccompiler.py\", line 341, in _setup_compile\n          pp_opts = gen_preprocess_options(macros, incdirs)\n        File \"/usr/lib/python3.10/distutils/ccompiler.py\", line 1076, in gen_preprocess_options\n          pp_opts.append(\"-I%s\" % dir)\n        File \"setup.py\", line 176, in __str__\n          import pybind11  # pylint: disable=import-outside-toplevel\n      ModuleNotFoundError: No module named 'pybind11'\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\n  ERROR: Failed building wheel for UNKNOWN\nerror: failed-wheel-build-for-install\n\n× Failed to build installable wheels for some pyproject.toml based projects\n╰─> UNKNOWN\n",
    "execution_time": 1.428283929824829
  },
  {
    "command": "pytest",
    "success": false,
    "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0\nrootdir: /app/repo_to_process\nconfigfile: pyproject.toml\ntestpaths: projectq\ncollected 47 items / 83 errors\n\n==================================== ERRORS ====================================\n_______ ERROR collecting projectq/backends/_aqt/_aqt_http_client_test.py _______\nImportError while importing test module '/app/repo_to_process/projectq/backends/_aqt/_aqt_http_client_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____________ ERROR collecting projectq/backends/_aqt/_aqt_test.py _____________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_aqt/_aqt_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/backends/_aqt/_aqt_test.py:20: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______ ERROR collecting projectq/backends/_awsbraket/_awsbraket_test.py _______\nImportError while importing test module '/app/repo_to_process/projectq/backends/_awsbraket/_awsbraket_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/backends/_awsbraket/_awsbraket_test.py:21: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______ ERROR collecting projectq/backends/_azure/_azure_quantum_test.py _______\nImportError while importing test module '/app/repo_to_process/projectq/backends/_azure/_azure_quantum_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/backends/_azure/_azure_quantum_test.py:21: in <module>\n    from projectq.cengines import BasicMapperEngine, MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___________ ERROR collecting projectq/backends/_azure/_utils_test.py ___________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_azure/_utils_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/backends/_azure/_utils_test.py:21: in <module>\n    from projectq.cengines import DummyEngine, MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___ ERROR collecting projectq/backends/_circuits/_drawer_matplotlib_test.py ____\nImportError while importing test module '/app/repo_to_process/projectq/backends/_circuits/_drawer_matplotlib_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_________ ERROR collecting projectq/backends/_circuits/_drawer_test.py _________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_circuits/_drawer_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n__________ ERROR collecting projectq/backends/_circuits/_plot_test.py __________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_circuits/_plot_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________ ERROR collecting projectq/backends/_circuits/_to_latex_test.py ________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_circuits/_to_latex_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______ ERROR collecting projectq/backends/_ibm/_ibm_http_client_test.py _______\nImportError while importing test module '/app/repo_to_process/projectq/backends/_ibm/_ibm_http_client_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____________ ERROR collecting projectq/backends/_ibm/_ibm_test.py _____________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_ibm/_ibm_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n______ ERROR collecting projectq/backends/_ionq/_ionq_http_client_test.py ______\nImportError while importing test module '/app/repo_to_process/projectq/backends/_ionq/_ionq_http_client_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________ ERROR collecting projectq/backends/_ionq/_ionq_mapper_test.py _________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_ionq/_ionq_mapper_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____________ ERROR collecting projectq/backends/_ionq/_ionq_test.py ____________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_ionq/_ionq_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____________ ERROR collecting projectq/backends/_printer_test.py ______________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_printer_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____________ ERROR collecting projectq/backends/_resource_test.py _____________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_resource_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____ ERROR collecting projectq/backends/_sim/_classical_simulator_test.py _____\nImportError while importing test module '/app/repo_to_process/projectq/backends/_sim/_classical_simulator_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n__________ ERROR collecting projectq/backends/_sim/_simulator_test.py __________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_sim/_simulator_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____________ ERROR collecting projectq/backends/_unitary_test.py ______________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_unitary_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n______________ ERROR collecting projectq/backends/_utils_test.py _______________\nImportError while importing test module '/app/repo_to_process/projectq/backends/_utils_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___________ ERROR collecting projectq/cengines/_basicmapper_test.py ____________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_basicmapper_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n______________ ERROR collecting projectq/cengines/_basics_test.py ______________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_basics_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___________ ERROR collecting projectq/cengines/_cmdmodifier_test.py ____________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_cmdmodifier_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_________ ERROR collecting projectq/cengines/_ibm5qubitmapper_test.py __________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_ibm5qubitmapper_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___________ ERROR collecting projectq/cengines/_linearmapper_test.py ___________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_linearmapper_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______________ ERROR collecting projectq/cengines/_main_test.py _______________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_main_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___________ ERROR collecting projectq/cengines/_manualmapper_test.py ___________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_manualmapper_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____________ ERROR collecting projectq/cengines/_optimize_test.py _____________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_optimize_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___ ERROR collecting projectq/cengines/_replacer/_decomposition_rule_test.py ___\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_replacer/_decomposition_rule_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________ ERROR collecting projectq/cengines/_replacer/_replacer_test.py ________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_replacer/_replacer_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________ ERROR collecting projectq/cengines/_swapandcnotflipper_test.py ________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_swapandcnotflipper_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____________ ERROR collecting projectq/cengines/_tagremover_test.py ____________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_tagremover_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____________ ERROR collecting projectq/cengines/_testengine_test.py ____________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_testengine_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____________ ERROR collecting projectq/cengines/_twodmapper_test.py ____________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_twodmapper_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___________ ERROR collecting projectq/cengines/_withflushing_test.py ___________\nImportError while importing test module '/app/repo_to_process/projectq/cengines/_withflushing_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____________ ERROR collecting projectq/libs/hist/_histogram_test.py ____________\nImportError while importing test module '/app/repo_to_process/projectq/libs/hist/_histogram_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n__________ ERROR collecting projectq/libs/math/_constantmath_test.py ___________\nImportError while importing test module '/app/repo_to_process/projectq/libs/math/_constantmath_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___________ ERROR collecting projectq/libs/math/_gates_math_test.py ____________\nImportError while importing test module '/app/repo_to_process/projectq/libs/math/_gates_math_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n______________ ERROR collecting projectq/libs/math/_gates_test.py ______________\nImportError while importing test module '/app/repo_to_process/projectq/libs/math/_gates_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___________ ERROR collecting projectq/libs/math/_quantummath_test.py ___________\nImportError while importing test module '/app/repo_to_process/projectq/libs/math/_quantummath_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______ ERROR collecting projectq/libs/revkit/_control_function_test.py ________\nImportError while importing test module '/app/repo_to_process/projectq/libs/revkit/_control_function_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n__________ ERROR collecting projectq/libs/revkit/_permutation_test.py __________\nImportError while importing test module '/app/repo_to_process/projectq/libs/revkit/_permutation_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____________ ERROR collecting projectq/libs/revkit/_phase_test.py _____________\nImportError while importing test module '/app/repo_to_process/projectq/libs/revkit/_phase_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______________ ERROR collecting projectq/meta/_compute_test.py ________________\nImportError while importing test module '/app/repo_to_process/projectq/meta/_compute_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/meta/_compute_test.py:21: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______________ ERROR collecting projectq/meta/_control_test.py ________________\nImportError while importing test module '/app/repo_to_process/projectq/meta/_control_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/meta/_control_test.py:17: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________________ ERROR collecting projectq/meta/_dagger_test.py ________________\nImportError while importing test module '/app/repo_to_process/projectq/meta/_dagger_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/meta/_dagger_test.py:20: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_________________ ERROR collecting projectq/meta/_loop_test.py _________________\nImportError while importing test module '/app/repo_to_process/projectq/meta/_loop_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/meta/_loop_test.py:21: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_________________ ERROR collecting projectq/meta/_util_test.py _________________\nImportError while importing test module '/app/repo_to_process/projectq/meta/_util_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/meta/_util_test.py:17: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________________ ERROR collecting projectq/ops/_basics_test.py _________________\nImportError while importing test module '/app/repo_to_process/projectq/ops/_basics_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/ops/_basics_test.py:21: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________________ ERROR collecting projectq/ops/_command_test.py ________________\nImportError while importing test module '/app/repo_to_process/projectq/ops/_command_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/ops/_command_test.py:22: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_________________ ERROR collecting projectq/ops/_gates_test.py _________________\nImportError while importing test module '/app/repo_to_process/projectq/ops/_gates_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/ops/_gates_test.py:22: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______________ ERROR collecting projectq/ops/_metagates_test.py _______________\nImportError while importing test module '/app/repo_to_process/projectq/ops/_metagates_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/ops/_metagates_test.py:22: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____________ ERROR collecting projectq/ops/_qubit_operator_test.py _____________\nImportError while importing test module '/app/repo_to_process/projectq/ops/_qubit_operator_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/ops/_qubit_operator_test.py:22: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____________ ERROR collecting projectq/ops/_time_evolution_test.py _____________\nImportError while importing test module '/app/repo_to_process/projectq/ops/_time_evolution_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/ops/_time_evolution_test.py:23: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_________________ ERROR collecting projectq/setups/aqt_test.py _________________\nImportError while importing test module '/app/repo_to_process/projectq/setups/aqt_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n______________ ERROR collecting projectq/setups/awsbraket_test.py ______________\nImportError while importing test module '/app/repo_to_process/projectq/setups/awsbraket_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________ ERROR collecting projectq/setups/decompositions/_gates_test.py ________\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/_gates_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_ ERROR collecting projectq/setups/decompositions/amplitudeamplification_test.py _\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/amplitudeamplification_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n__ ERROR collecting projectq/setups/decompositions/arb1qubit2rzandry_test.py ___\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/arb1qubit2rzandry_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______ ERROR collecting projectq/setups/decompositions/barrier_test.py ________\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/barrier_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_ ERROR collecting projectq/setups/decompositions/carb1qubit2cnotrzandry_test.py _\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/carb1qubit2cnotrzandry_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______ ERROR collecting projectq/setups/decompositions/cnot2cz_test.py ________\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/cnot2cz_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______ ERROR collecting projectq/setups/decompositions/cnot2rxx_test.py _______\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/cnot2rxx_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___ ERROR collecting projectq/setups/decompositions/cnu2toffoliandcu_test.py ___\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/cnu2toffoliandcu_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_____ ERROR collecting projectq/setups/decompositions/controlstate_test.py _____\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/controlstate_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_________ ERROR collecting projectq/setups/decompositions/h2rx_test.py _________\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/h2rx_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___ ERROR collecting projectq/setups/decompositions/phaseestimation_test.py ____\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/phaseestimation_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n___ ERROR collecting projectq/setups/decompositions/qubitop2onequbit_test.py ___\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/qubitop2onequbit_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________ ERROR collecting projectq/setups/decompositions/rx2rz_test.py _________\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/rx2rz_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________ ERROR collecting projectq/setups/decompositions/ry2rz_test.py _________\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/ry2rz_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________ ERROR collecting projectq/setups/decompositions/rz2rx_test.py _________\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/rz2rx_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____ ERROR collecting projectq/setups/decompositions/sqrtswap2cnot_test.py _____\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/sqrtswap2cnot_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____ ERROR collecting projectq/setups/decompositions/stateprep2cnot_test.py ____\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/stateprep2cnot_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n____ ERROR collecting projectq/setups/decompositions/time_evolution_test.py ____\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/time_evolution_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_ ERROR collecting projectq/setups/decompositions/uniformlycontrolledr2cnot_test.py _\nImportError while importing test module '/app/repo_to_process/projectq/setups/decompositions/uniformlycontrolledr2cnot_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________________ ERROR collecting projectq/setups/grid_test.py _________________\nImportError while importing test module '/app/repo_to_process/projectq/setups/grid_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_________________ ERROR collecting projectq/setups/ibm_test.py _________________\nImportError while importing test module '/app/repo_to_process/projectq/setups/ibm_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________________ ERROR collecting projectq/setups/ionq_test.py _________________\nImportError while importing test module '/app/repo_to_process/projectq/setups/ionq_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______________ ERROR collecting projectq/setups/linear_test.py ________________\nImportError while importing test module '/app/repo_to_process/projectq/setups/linear_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n__________ ERROR collecting projectq/setups/restrictedgateset_test.py __________\nImportError while importing test module '/app/repo_to_process/projectq/setups/restrictedgateset_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n_______ ERROR collecting projectq/setups/trapped_ion_decomposer_test.py ________\nImportError while importing test module '/app/repo_to_process/projectq/setups/trapped_ion_decomposer_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n______________ ERROR collecting projectq/tests/_factoring_test.py ______________\nImportError while importing test module '/app/repo_to_process/projectq/tests/_factoring_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n________________ ERROR collecting projectq/types/_qubit_test.py ________________\nImportError while importing test module '/app/repo_to_process/projectq/types/_qubit_test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nprojectq/types/_qubit_test.py:20: in <module>\n    from projectq import MainEngine\nprojectq/__init__.py:27: in <module>\n    from projectq.cengines import MainEngine\nprojectq/cengines/__init__.py:25: in <module>\n    from ._ibm5qubitmapper import IBM5QubitMapper\nprojectq/cengines/_ibm5qubitmapper.py:19: in <module>\n    from projectq.backends import IBMBackend\nprojectq/backends/__init__.py:34: in <module>\n    from ._circuits import CircuitDrawer, CircuitDrawerMatplotlib\nprojectq/backends/_circuits/__init__.py:18: in <module>\n    from ._drawer_matplotlib import CircuitDrawerMatplotlib\nprojectq/backends/_circuits/_drawer_matplotlib.py:24: in <module>\n    from ._plot import to_draw\nprojectq/backends/_circuits/_plot.py:26: in <module>\n    import matplotlib.pyplot as plt\nE   ModuleNotFoundError: No module named 'matplotlib'\n=========================== short test summary info ============================\nERROR projectq/backends/_aqt/_aqt_http_client_test.py\nERROR projectq/backends/_aqt/_aqt_test.py\nERROR projectq/backends/_awsbraket/_awsbraket_test.py\nERROR projectq/backends/_azure/_azure_quantum_test.py\nERROR projectq/backends/_azure/_utils_test.py\nERROR projectq/backends/_circuits/_drawer_matplotlib_test.py\nERROR projectq/backends/_circuits/_drawer_test.py\nERROR projectq/backends/_circuits/_plot_test.py\nERROR projectq/backends/_circuits/_to_latex_test.py\nERROR projectq/backends/_ibm/_ibm_http_client_test.py\nERROR projectq/backends/_ibm/_ibm_test.py\nERROR projectq/backends/_ionq/_ionq_http_client_test.py\nERROR projectq/backends/_ionq/_ionq_mapper_test.py\nERROR projectq/backends/_ionq/_ionq_test.py\nERROR projectq/backends/_printer_test.py\nERROR projectq/backends/_resource_test.py\nERROR projectq/backends/_sim/_classical_simulator_test.py\nERROR projectq/backends/_sim/_simulator_test.py\nERROR projectq/backends/_unitary_test.py\nERROR projectq/backends/_utils_test.py\nERROR projectq/cengines/_basicmapper_test.py\nERROR projectq/cengines/_basics_test.py\nERROR projectq/cengines/_cmdmodifier_test.py\nERROR projectq/cengines/_ibm5qubitmapper_test.py\nERROR projectq/cengines/_linearmapper_test.py\nERROR projectq/cengines/_main_test.py\nERROR projectq/cengines/_manualmapper_test.py\nERROR projectq/cengines/_optimize_test.py\nERROR projectq/cengines/_replacer/_decomposition_rule_test.py\nERROR projectq/cengines/_replacer/_replacer_test.py\nERROR projectq/cengines/_swapandcnotflipper_test.py\nERROR projectq/cengines/_tagremover_test.py\nERROR projectq/cengines/_testengine_test.py\nERROR projectq/cengines/_twodmapper_test.py\nERROR projectq/cengines/_withflushing_test.py\nERROR projectq/libs/hist/_histogram_test.py\nERROR projectq/libs/math/_constantmath_test.py\nERROR projectq/libs/math/_gates_math_test.py\nERROR projectq/libs/math/_gates_test.py\nERROR projectq/libs/math/_quantummath_test.py\nERROR projectq/libs/revkit/_control_function_test.py\nERROR projectq/libs/revkit/_permutation_test.py\nERROR projectq/libs/revkit/_phase_test.py\nERROR projectq/meta/_compute_test.py\nERROR projectq/meta/_control_test.py\nERROR projectq/meta/_dagger_test.py\nERROR projectq/meta/_loop_test.py\nERROR projectq/meta/_util_test.py\nERROR projectq/ops/_basics_test.py\nERROR projectq/ops/_command_test.py\nERROR projectq/ops/_gates_test.py\nERROR projectq/ops/_metagates_test.py\nERROR projectq/ops/_qubit_operator_test.py\nERROR projectq/ops/_time_evolution_test.py\nERROR projectq/setups/aqt_test.py\nERROR projectq/setups/awsbraket_test.py\nERROR projectq/setups/decompositions/_gates_test.py\nERROR projectq/setups/decompositions/amplitudeamplification_test.py\nERROR projectq/setups/decompositions/arb1qubit2rzandry_test.py\nERROR projectq/setups/decompositions/barrier_test.py\nERROR projectq/setups/decompositions/carb1qubit2cnotrzandry_test.py\nERROR projectq/setups/decompositions/cnot2cz_test.py\nERROR projectq/setups/decompositions/cnot2rxx_test.py\nERROR projectq/setups/decompositions/cnu2toffoliandcu_test.py\nERROR projectq/setups/decompositions/controlstate_test.py\nERROR projectq/setups/decompositions/h2rx_test.py\nERROR projectq/setups/decompositions/phaseestimation_test.py\nERROR projectq/setups/decompositions/qubitop2onequbit_test.py\nERROR projectq/setups/decompositions/rx2rz_test.py\nERROR projectq/setups/decompositions/ry2rz_test.py\nERROR projectq/setups/decompositions/rz2rx_test.py\nERROR projectq/setups/decompositions/sqrtswap2cnot_test.py\nERROR projectq/setups/decompositions/stateprep2cnot_test.py\nERROR projectq/setups/decompositions/time_evolution_test.py\nERROR projectq/setups/decompositions/uniformlycontrolledr2cnot_test.py\nERROR projectq/setups/grid_test.py\nERROR projectq/setups/ibm_test.py\nERROR projectq/setups/ionq_test.py\nERROR projectq/setups/linear_test.py\nERROR projectq/setups/restrictedgateset_test.py\nERROR projectq/setups/trapped_ion_decomposer_test.py\nERROR projectq/tests/_factoring_test.py\nERROR projectq/types/_qubit_test.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 83 errors during collection !!!!!!!!!!!!!!!!!!!\n============================== 83 errors in 2.54s ==============================\n",
    "stderr": "",
    "execution_time": 2.775155782699585
  }
]