## Current Project Structure
```
repo_to_process/
├── .github/
│   ├── workflows/
│   │   └── build-and-test.yml
│   └── dependabot.yml
├── climlab/
│   ├── convection/
│   │   ├── __init__.py
│   │   ├── akmaev_adjustment.py
│   │   ├── convadj.py
│   │   └── emanuel_convection.py
│   ├── domain/
│   │   ├── __init__.py
│   │   ├── axis.py
│   │   ├── domain.py
│   │   ├── field.py
│   │   ├── initial.py
│   │   └── xarray.py
│   │       └── ... (1 more files)
│   ├── dynamics/
│   │   ├── __init__.py
│   │   ├── adv_diff_numerics.py
│   │   ├── advection_diffusion.py
│   │   ├── budyko_transport.py
│   │   ├── meridional_advection_diffusion.py
│   │   ├── meridional_heat_diffusion.py
│   │   └── meridional_moist_diffusion.py
│   │       └── ... (2 more files)
│   ├── model/
│   │   ├── __init__.py
│   │   ├── column.py
│   │   ├── ebm.py
│   │   └── stommelbox.py
│   ├── process/
│   │   ├── __init__.py
│   │   ├── diagnostic.py
│   │   ├── energy_budget.py
│   │   ├── external_forcing.py
│   │   ├── implicit.py
│   │   ├── process.py
│   │   └── time_dependent_process.py
│   │       └── ... (2 more files)
│   ├── radiation/
│   │   ├── rrtm/
│   │   │   ├── __init__.py
│   │   │   ├── rrtmg.py
│   │   │   ├── rrtmg_lw.py
│   │   │   ├── rrtmg_sw.py
│   │   │   ├── setup.py
│   │   │   └── utils.py
│   │   │       └── ... (1 more files)
│   │   ├── __init__.py
│   │   ├── absorbed_shorwave.py
│   │   ├── aplusbt.py
│   │   ├── boltzmann.py
│   │   ├── cam3.py
│   │   ├── greygas.py
│   │   ├── insolation.py
│   │   ├── nband.py
│   │   ├── radiation.py
│   │   ├── transmissivity.py
│   │   └── water_vapor.py
│   │       └── ... (6 more files)
│   ├── solar/
│   │   ├── orbital/
│   │   │   ├── data/
│   │   │   ├── __init__.py
│   │   │   ├── long.py
│   │   │   ├── setup.py
│   │   │   └── table.py
│   │   ├── __init__.py
│   │   ├── insolation.py
│   │   └── orbital_cycles.py
│   ├── surface/
│   │   ├── __init__.py
│   │   ├── albedo.py
│   │   ├── surface_radiation.py
│   │   └── turbulent.py
│   ├── tests/
│   │   ├── __init__.py
│   │   ├── test_advdiff_solver.py
│   │   ├── test_bandrc.py
│   │   ├── test_cam3rad.py
│   │   ├── test_domain2D.py
│   │   ├── test_ebm.py
│   │   ├── test_emanuel_convection.py
│   │   ├── test_grey_radiation.py
│   │   ├── test_insolation.py
│   │   ├── test_rcm.py
│   │   ├── test_rrtm.py
│   │   ├── test_thermo.py
│   │   └── xarray_test.py
│   │       └── ... (8 more files)
│   ├── utils/
│   │   ├── attrdict/
│   │   │   ├── __init__.py
│   │   │   ├── default.py
│   │   │   ├── dictionary.py
│   │   │   ├── mapping.py
│   │   │   ├── merge.py
│   │   │   └── mixins.py
│   │   │       └── ... (1 more files)
│   │   ├── __init__.py
│   │   ├── constants.py
│   │   ├── heat_capacity.py
│   │   ├── legendre.py
│   │   ├── thermo.py
│   │   └── walk.py
│   │       └── ... (1 more files)
│   └── __init__.py
├── courseware/
│   ├── Boltzmann_EBM.ipynb
│   ├── Budyko_Transport_EBM.ipynb
│   ├── How to reset the time in climlab.ipynb
│   ├── Insolation.ipynb
│   ├── Latitude-dependent grey radiation.ipynb
│   ├── PolarAmplification.ipynb
│   ├── Preconfigured_EBM.ipynb
│   ├── RCE with CAM3 radiation.ipynb
│   ├── README.rst
│   ├── Seasonal cycle and heat capacity.ipynb
│   ├── Snowball Earth in the EBM.ipynb
│   ├── Soundings from Observations and RCE Models.ipynb
│   ├── Spectral_OLR_with_RRTMG.ipynb
│   └── The spectral column model.ipynb
│       └── ... (9 more files)
├── docs/
│   ├── source/
│   │   ├── _static/
│   │   │   ├── logo.png
│   │   │   └── logo_1.png
│   │   ├── _templates/
│   │   │   └── layout.html
│   │   ├── api/
│   │   │   ├── climlab.convection.convadj.rst
│   │   │   ├── climlab.convection.EmanuelConvection.rst
│   │   │   ├── climlab.convection.rst
│   │   │   ├── climlab.domain.axis.rst
│   │   │   ├── climlab.domain.domain.rst
│   │   │   ├── climlab.domain.field.rst
│   │   │   ├── climlab.domain.initial.rst
│   │   │   ├── climlab.domain.rst
│   │   │   ├── climlab.dynamics.adv_diff_numerics.rst
│   │   │   ├── climlab.dynamics.AdvectionDiffusion.rst
│   │   │   ├── climlab.dynamics.BudykoTransport.rst
│   │   │   ├── climlab.dynamics.MeridionalAdvectionDiffusion.rst
│   │   │   ├── climlab.dynamics.MeridionalHeatDiffusion.rst
│   │   │   ├── climlab.dynamics.MeridionalMoistDiffusion.rst
│   │   │   ├── climlab.dynamics.rst
│   │   │   ├── climlab.model.column.rst
│   │   │   ├── climlab.model.ebm.rst
│   │   │   ├── climlab.model.rst
│   │   │   ├── climlab.process.diagnostic.rst
│   │   │   ├── climlab.process.energy_budget.rst
│   │   │   ├── climlab.process.external_forcing.rst
│   │   │   ├── climlab.process.implicit.rst
│   │   │   ├── climlab.process.process.rst
│   │   │   ├── climlab.process.rst
│   │   │   ├── climlab.process.time_dependent_process.rst
│   │   │   ├── climlab.radiation.AplusBT.rst
│   │   │   ├── climlab.radiation.Boltzmann.rst
│   │   │   ├── climlab.radiation.CAM3.rst
│   │   │   ├── climlab.radiation.greygas.rst
│   │   │   ├── climlab.radiation.insolation.rst
│   │   │   ├── climlab.radiation.nband.rst
│   │   │   ├── climlab.radiation.Radiation.rst
│   │   │   ├── climlab.radiation.rrtm.RRTMG.rst
│   │   │   ├── climlab.radiation.rrtm.RRTMG_LW.rst
│   │   │   ├── climlab.radiation.rrtm.RRTMG_SW.rst
│   │   │   ├── climlab.radiation.RRTMG.rst
│   │   │   ├── climlab.radiation.rst
│   │   │   ├── climlab.radiation.SimpleAbsorbedShortwave.rst
│   │   │   ├── climlab.radiation.transmissivity.rst
│   │   │   ├── climlab.radiation.water_vapor.rst
│   │   │   ├── climlab.rst
│   │   │   ├── climlab.solar.insolation.rst
│   │   │   ├── climlab.solar.orbital.rst
│   │   │   ├── climlab.solar.orbital_cycles.rst
│   │   │   ├── climlab.solar.rst
│   │   │   ├── climlab.surface.albedo.rst
│   │   │   ├── climlab.surface.rst
│   │   │   ├── climlab.surface.turbulent.rst
│   │   │   ├── climlab.utils.constants.rst
│   │   │   ├── climlab.utils.heat_capacity.rst
│   │   │   ├── climlab.utils.legendre.rst
│   │   │   ├── climlab.utils.rst
│   │   │   ├── climlab.utils.thermo.rst
│   │   │   └── climlab.utils.walk.rst
│   │   │       └── ... (49 more files)
│   │   ├── code_input_manual/
│   │   │   ├── constants.py
│   │   │   ├── example_budyko_transport.py
│   │   │   ├── example_diffusion.py
│   │   │   ├── example_EBM_heat_transport.py
│   │   │   ├── example_EBM_heat_transport_convergence.py
│   │   │   ├── example_EBM_inferred_heat_transport.py
│   │   │   ├── example_EBM_seasonal.py
│   │   │   └── example_meridional_diffusion.py
│   │   │       └── ... (3 more files)
│   │   ├── courseware/
│   │   │   ├── Boltzmann_EBM.ipynb
│   │   │   ├── Budyko_Transport_EBM.ipynb
│   │   │   ├── Insolation.ipynb
│   │   │   ├── Latitude-dependent_grey_radiation.ipynb
│   │   │   ├── PolarAmplification.ipynb
│   │   │   ├── Preconfigured_EBM.ipynb
│   │   │   ├── RCE_with_CAM3_radiation.ipynb
│   │   │   ├── README.rst
│   │   │   ├── Reset-time.ipynb
│   │   │   ├── Seasonal_cycle_and_heat_capacity.ipynb
│   │   │   ├── Snowball_Earth_in_the_EBM.ipynb
│   │   │   ├── Soundings_from_Observations_and_RCE_Models.ipynb
│   │   │   ├── Spectral_OLR_with_RRTMG.ipynb
│   │   │   └── The_spectral_column_model.ipynb
│   │   │       └── ... (9 more files)
│   │   ├── ext/
│   │   │   ├── automodsumm.py
│   │   │   └── automodsumm.pyc
│   │   ├── architecture.rst
│   │   ├── bibliography.bib
│   │   ├── conf.py
│   │   ├── contact.rst
│   │   ├── contributing.rst
│   │   ├── index.rst
│   │   ├── installation.rst
│   │   ├── intro.rst
│   │   ├── license.rst
│   │   ├── models.rst
│   │   ├── quickstart.rst
│   │   ├── references.rst
│   │   ├── support.rst
│   │   ├── tutorial.rst
│   │   └── xarray.rst
│   │       └── ... (10 more files)
│   ├── environment.yml
│   ├── Makefile
│   └── README.rst
├── licenses/
│   └── NUMPY_LICENSE
├── .coveragerc
├── .f2py_f2cmap
├── .gitignore
├── .readthedocs.yaml
├── clean.sh
├── environment.yml
├── LICENSE
├── MANIFEST.in
├── paper.bib
├── paper.md
├── pyproject.toml
├── README.rst
├── setup.cfg
└── setup.py
    └── ... (9 more files)
```

## Previous Operation Results:
### File Operations:
No files to create
### Command Execution:
--- Command: pip install pooch ---
SUCCESS: True
STDOUT:
Looking in indexes: https://repo.huaweicloud.com/repository/pypi/simple/
Collecting pooch
  Downloading https://repo.huaweicloud.com/repository/pypi/packages/a8/87/77cc11c7a9ea9fd05503def69e3d18605852cd0d4b0d3b8f15bbeb3ef1d1/pooch-1.8.2-py3-none-any.whl (64 kB)
Collecting platformdirs>=2.5.0 (from pooch)
  Downloading https://repo.huaweicloud.com/repository/pypi/packages/fe/39/979e8e21520d4e47a0bbe349e2713c0aac6f3d853d0e5b34d76206c439aa/platformdirs-4.3.8-py3-none-any.whl (18 kB)
Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from pooch) (25.0)
Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from pooch) (2.32.4)
Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch) (3.4.2)
Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch) (2.5.0)
Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch) (2025.8.3)
Installing collected packages: platformdirs, pooch

Successfully installed platformdirs-4.3.8 pooch-1.8.2

STDERR:
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.


--- Command: pytest ---
SUCCESS: False
STDOUT:
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0
rootdir: /app/repo_to_process
configfile: pyproject.toml
collected 55 items

climlab/tests/test_advdiff_solver.py ..F                                 [  5%]
climlab/tests/test_bandrc.py .FF.                                        [ 12%]
climlab/tests/test_cam3rad.py FFFF                                       [ 20%]
climlab/tests/test_domain2D.py .FF.                                      [ 27%]
climlab/tests/test_ebm.py .FFFFFFFF                                      [ 43%]
climlab/tests/test_emanuel_convection.py FFF                             [ 49%]
climlab/tests/test_grey_radiation.py ....F.                              [ 60%]
climlab/tests/test_insolation.py ....F                                   [ 69%]
climlab/tests/test_rcm.py FF.                                            [ 74%]
climlab/tests/test_rrtm.py .FFFFFF.FF..                                  [ 96%]
climlab/tests/test_thermo.py ..                                          [100%]

=================================== FAILURES ===================================
___________________________ test_nonuniform_multidim ___________________________

    @pytest.mark.fast
    def test_nonuniform_multidim():
        P=7; N = 4; M = 5  # arbitrary
        X = np.zeros((P,N,M,J))
        Xb = np.zeros((P,N,M,J+1))
        for p in range(P):
            for n in range(N):
                for m in range(M):
                    Xb[p,n,m,:] = np.geomspace(x0+offset, xJ+offset, J+1)-offset
                    Xb[p,n,m,0] = 0.; Xb[p,n,m,-1] = xJ
                    X[p,n,m,:] = Xb[p,n,m,:-1] + (Xb[p,n,m,1:]-Xb[p,n,m,:-1])/2
        Psi = Psi0 * (np.sin(np.pi*X/L))**2
        K = np.ones_like(Xb) * Kconst
        U = U0 * np.sin(np.pi*Xb/L)
        prescribed_flux = np.zeros_like(U)
        prescribed_source = np.zeros_like(Psi)
        source = adv_diff_numerics.compute_source(X,Xb)
        tridiag = adv_diff_numerics.advdiff_tridiag(X, Xb, K, U)
        F_analytical = flux_analytical(Xb, Psi0, U0, Kconst, L)
        F_numerical = adv_diff_numerics.total_flux(X, Xb, K, U, Psi)
        dPsidt_analytical = tendency_analytical(X, Psi0, U0, Kconst, L)
        dPsidt_numerical = adv_diff_numerics.compute_tendency(Psi, tridiag, source)
        assert F_numerical == pytest.approx(F_analytical, abs=0.01, rel=0.01)
        assert dPsidt_numerical == pytest.approx(dPsidt_analytical, abs=0.01, rel=0.01)
>       adv_diff_numerics.implicit_step_forward(Psi, tridiag, source, timestep, use_banded_solver=False)

climlab/tests/test_advdiff_solver.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
climlab/dynamics/adv_diff_numerics.py:428: in implicit_step_forward
    return solve(IminusTdt, RHS)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = array([[[[[ 17.07392702, -15.80251719,   0.        , ...,
             0.        ,   0.        ,   0.        ],
      ...0.        ,   0.        , ...,
             0.        ,  -0.63064471,   1.36000707]]]]],
      shape=(7, 4, 5, 50, 50))
b = array([[[[0.00013137, 0.00121086, 0.00347679, ..., 0.10044926,
          0.03820201, 0.0043961 ],
         [0.00013137...       [0.00013137, 0.00121086, 0.00347679, ..., 0.10044926,
          0.03820201, 0.0043961 ]]]], shape=(7, 4, 5, 50))

    @array_function_dispatch(_solve_dispatcher)
    def solve(a, b):
        """
        Solve a linear matrix equation, or system of linear scalar equations.
    
        Computes the "exact" solution, `x`, of the well-determined, i.e., full
        rank, linear matrix equation `ax = b`.
    
        Parameters
        ----------
        a : (..., M, M) array_like
            Coefficient matrix.
        b : {(M,), (..., M, K)}, array_like
            Ordinate or "dependent variable" values.
    
        Returns
        -------
        x : {(..., M,), (..., M, K)} ndarray
            Solution to the system a x = b.  Returned shape is (..., M) if b is
            shape (M,) and (..., M, K) if b is (..., M, K), where the "..." part is
            broadcasted between a and b.
    
        Raises
        ------
        LinAlgError
            If `a` is singular or not square.
    
        See Also
        --------
        scipy.linalg.solve : Similar function in SciPy.
    
        Notes
        -----
        Broadcasting rules apply, see the `numpy.linalg` documentation for
        details.
    
        The solutions are computed using LAPACK routine ``_gesv``.
    
        `a` must be square and of full-rank, i.e., all rows (or, equivalently,
        columns) must be linearly independent; if either is not true, use
        `lstsq` for the least-squares best "solution" of the
        system/equation.
    
        .. versionchanged:: 2.0
    
           The b array is only treated as a shape (M,) column vector if it is
           exactly 1-dimensional. In all other instances it is treated as a stack
           of (M, K) matrices. Previously b would be treated as a stack of (M,)
           vectors if b.ndim was equal to a.ndim - 1.
    
        References
        ----------
        .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,
               FL, Academic Press, Inc., 1980, pg. 22.
    
        Examples
        --------
        Solve the system of equations:
        ``x0 + 2 * x1 = 1`` and
        ``3 * x0 + 5 * x1 = 2``:
    
        >>> import numpy as np
        >>> a = np.array([[1, 2], [3, 5]])
        >>> b = np.array([1, 2])
        >>> x = np.linalg.solve(a, b)
        >>> x
        array([-1.,  1.])
    
        Check that the solution is correct:
    
        >>> np.allclose(np.dot(a, x), b)
        True
    
        """
        a, _ = _makearray(a)
        _assert_stacked_2d(a)
        _assert_stacked_square(a)
        b, wrap = _makearray(b)
        t, result_t = _commonType(a, b)
    
        # We use the b = (..., M,) logic, only if the number of extra dimensions
        # match exactly
        if b.ndim == 1:
            gufunc = _umath_linalg.solve1
        else:
            gufunc = _umath_linalg.solve
    
        signature = 'DD->D' if isComplexType(t) else 'dd->d'
        with errstate(call=_raise_linalgerror_singular, invalid='call',
                      over='ignore', divide='ignore', under='ignore'):
>           r = gufunc(a, b, signature=signature)
E           ValueError: solve: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (m,m),(m,n)->(m,n) (size 5 is different from 50)

/usr/local/lib/python3.10/dist-packages/numpy/linalg/_linalg.py:410: ValueError
________________________________ test_diffmodel ________________________________

diffmodel = <climlab.model.column.BandRCModel object at 0x7fcfcf21f4f0>

    @pytest.mark.fast
    def test_diffmodel(diffmodel):
        """Check that we can integrate the model with diffusion."""
>       diffmodel.step_forward()

climlab/tests/test_bandrc.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
... (3072 lines omitted)


## Your Task (Phase 2: Call Chain Tracing)
`pytest` is now executable without collection errors. Your task is to set up call chain tracing.
1.  **Identify the main source code directory/directories.** Based on the structure, this is likely `skimage`.
2.  **Create a `conftest.py` file** in the project root to trace this directory.
3.  **Run `pytest`** one last time to generate the reports.
4.  If the reports are generated, declare success with ```status
success
```.

**REMINDER:** When creating `conftest.py`, you only need to provide the line defining `SOURCE_DIRS_TO_TRACK`. For example:
```file:conftest.py
SOURCE_DIRS_TO_TRACK = ['skimage']
```
