{"task_id": "openmdao_0", "reponame": "openmdao", "testpath": "test_impl_comp.py", "testname": "test_impl_comp.py", "classname": "ImplCompTestCase", "funcname": "test_add_input_output_retval", "imports": ["import unittest", "from io import StringIO", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal, assert_check_totals", "from openmdao.utils.general_utils import remove_whitespace", "from openmdao.test_suite.components.sellar import SellarImplicitDis1, SellarImplicitDis2"], "code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 0.0, 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'edge zero', 'tags': {'edge_tag'}}\n    expected_ivp_output = {'val': (- 999999.1234), 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'large negative float', 'tags': {'openmdao:allow_desvar', 'output_tag'}}\n    expected_discrete = {'val': (- 777), 'type': int, 'desc': 'negative int', 'tags': {'discrete_tag'}}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=0.0, units='m', desc='edge zero', tags={'edge_tag'})\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=(- 999999.1234), units='m', desc='large negative float', tags={'openmdao:allow_desvar', 'output_tag'})\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "masked_code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 0.0, 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'edge zero', 'tags': {'edge_tag'}}\n    expected_ivp_output = {'val': (- 999999.1234), 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'large negative float', 'tags': {'openmdao:allow_desvar', 'output_tag'}}\n    expected_discrete = {'val': (- 777), 'type': int, 'desc': 'negative int', 'tags': {'discrete_tag'}}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=0.0, units='m', desc='edge zero', tags={'edge_tag'})\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=(- 999999.1234), units='m', desc='large negative float', tags={'openmdao:allow_desvar', 'output_tag'})\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "openmdao_1", "reponame": "openmdao", "testpath": "test_impl_comp.py", "testname": "test_impl_comp.py", "classname": "ImplCompTestCase", "funcname": "test_add_input_output_retval", "imports": ["import unittest", "from io import StringIO", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal, assert_check_totals", "from openmdao.utils.general_utils import remove_whitespace", "from openmdao.test_suite.components.sellar import SellarImplicitDis1, SellarImplicitDis2"], "code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 0.0, 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'edge zero', 'tags': {'edge_tag'}}\n    expected_ivp_output = {'val': (- 999999.1234), 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'large negative float', 'tags': {'openmdao:allow_desvar', 'output_tag'}}\n    expected_discrete = {'val': (- 777), 'type': int, 'desc': 'negative int', 'tags': {'discrete_tag'}}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=0.0, units='m', desc='edge zero', tags={'edge_tag'})\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=(- 999999.1234), units='m', desc='large negative float', tags={'openmdao:allow_desvar', 'output_tag'})\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "masked_code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 0.0, 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'edge zero', 'tags': {'edge_tag'}}\n    expected_ivp_output = {'val': (- 999999.1234), 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'large negative float', 'tags': {'openmdao:allow_desvar', 'output_tag'}}\n    expected_discrete = {'val': (- 777), 'type': int, 'desc': 'negative int', 'tags': {'discrete_tag'}}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=0.0, units='m', desc='edge zero', tags={'edge_tag'})\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=(- 999999.1234), units='m', desc='large negative float', tags={'openmdao:allow_desvar', 'output_tag'})\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "openmdao_2", "reponame": "openmdao", "testpath": "test_impl_comp.py", "testname": "test_impl_comp.py", "classname": "ImplCompTestCase", "funcname": "test_add_input_output_retval", "imports": ["import unittest", "from io import StringIO", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal, assert_check_totals", "from openmdao.utils.general_utils import remove_whitespace", "from openmdao.test_suite.components.sellar import SellarImplicitDis1, SellarImplicitDis2"], "code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 0.0, 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'edge zero', 'tags': {'edge_tag'}}\n    expected_ivp_output = {'val': (- 999999.1234), 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'large negative float', 'tags': {'openmdao:allow_desvar', 'output_tag'}}\n    expected_discrete = {'val': (- 777), 'type': int, 'desc': 'negative int', 'tags': {'discrete_tag'}}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=0.0, units='m', desc='edge zero', tags={'edge_tag'})\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=(- 999999.1234), units='m', desc='large negative float', tags={'openmdao:allow_desvar', 'output_tag'})\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "masked_code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 0.0, 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'edge zero', 'tags': {'edge_tag'}}\n    expected_ivp_output = {'val': (- 999999.1234), 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'large negative float', 'tags': {'openmdao:allow_desvar', 'output_tag'}}\n    expected_discrete = {'val': (- 777), 'type': int, 'desc': 'negative int', 'tags': {'discrete_tag'}}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=0.0, units='m', desc='edge zero', tags={'edge_tag'})\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=(- 999999.1234), units='m', desc='large negative float', tags={'openmdao:allow_desvar', 'output_tag'})\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "openmdao_3", "reponame": "openmdao", "testpath": "test_impl_comp.py", "testname": "test_impl_comp.py", "classname": "ImplCompTestCase", "funcname": "test_add_input_output_retval", "imports": ["import unittest", "from io import StringIO", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal, assert_check_totals", "from openmdao.utils.general_utils import remove_whitespace", "from openmdao.test_suite.components.sellar import SellarImplicitDis1, SellarImplicitDis2"], "code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 0.0, 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'edge zero', 'tags': {'edge_tag'}}\n    expected_ivp_output = {'val': (- 999999.1234), 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'large negative float', 'tags': {'openmdao:allow_desvar', 'output_tag'}}\n    expected_discrete = {'val': (- 777), 'type': int, 'desc': 'negative int', 'tags': {'discrete_tag'}}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=0.0, units='m', desc='edge zero', tags={'edge_tag'})\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=(- 999999.1234), units='m', desc='large negative float', tags={'openmdao:allow_desvar', 'output_tag'})\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "masked_code": "def test_add_input_output_retval(self):\n    expected_ivp_input = {'val': 0.0, 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'edge zero', 'tags': {'edge_tag'}}\n    expected_ivp_output = {'val': (- 999999.1234), 'shape': (1,), 'size': 1, 'units': 'm', 'desc': 'large negative float', 'tags': {'openmdao:allow_desvar', 'output_tag'}}\n    expected_discrete = {'val': (- 777), 'type': int, 'desc': 'negative int', 'tags': {'discrete_tag'}}\n\n    class ImplComp(om.ImplicitComponent):\n\n        def setup(self):\n            meta = self.add_input('x', val=0.0, units='m', desc='edge zero', tags={'edge_tag'})\n            for (key, val) in expected_ivp_input.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_input('x_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_output('y', val=(- 999999.1234), units='m', desc='large negative float', tags={'openmdao:allow_desvar', 'output_tag'})\n            for (key, val) in expected_ivp_output.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('y_disc', val=(- 777), desc='negative int', tags=['discrete_tag'])\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('comp', ImplComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "openmdao_4", "reponame": "openmdao", "testpath": "test_indep_var_comp.py", "testname": "test_indep_var_comp.py", "classname": "TestIndepVarComp", "funcname": "test_add_output_retval", "imports": ["import unittest", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal"], "code": "def test_add_output_retval(self):\n    expected = {'val': (- 123.456), 'shape': (1,), 'size': 1, 'units': 'kg', 'desc': 'test negative float', 'tags': {'openmdao:indep_var', 'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 9876543210, 'type': int, 'desc': 'large integer', 'tags': {'openmdao:indep_var'}}\n\n    class IDVComp(om.IndepVarComp):\n\n        def setup(self):\n            meta = self.add_output('y', val=(- 123.456), units='kg', desc='test negative float')\n            for (key, val) in expected.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('disc', val=9876543210, desc='large integer')\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('idv', IDVComp())\n    prob.setup()", "masked_code": "def test_add_output_retval(self):\n    expected = {'val': (- 123.456), 'shape': (1,), 'size': 1, 'units': 'kg', 'desc': 'test negative float', 'tags': {'openmdao:indep_var', 'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 9876543210, 'type': int, 'desc': 'large integer', 'tags': {'openmdao:indep_var'}}\n\n    class IDVComp(om.IndepVarComp):\n\n        def setup(self):\n            meta = self.add_output('y', val=(- 123.456), units='kg', desc='test negative float')\n            for (key, val) in expected.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('disc', val=9876543210, desc='large integer')\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('idv', IDVComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
{"task_id": "openmdao_5", "reponame": "openmdao", "testpath": "test_indep_var_comp.py", "testname": "test_indep_var_comp.py", "classname": "TestIndepVarComp", "funcname": "test_add_output_retval", "imports": ["import unittest", "import numpy as np", "import openmdao.api as om", "from openmdao.utils.assert_utils import assert_near_equal"], "code": "def test_add_output_retval(self):\n    expected = {'val': (- 123.456), 'shape': (1,), 'size': 1, 'units': 'kg', 'desc': 'test negative float', 'tags': {'openmdao:indep_var', 'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 9876543210, 'type': int, 'desc': 'large integer', 'tags': {'openmdao:indep_var'}}\n\n    class IDVComp(om.IndepVarComp):\n\n        def setup(self):\n            meta = self.add_output('y', val=(- 123.456), units='kg', desc='test negative float')\n            for (key, val) in expected.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('disc', val=9876543210, desc='large integer')\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('idv', IDVComp())\n    prob.setup()", "masked_code": "def test_add_output_retval(self):\n    expected = {'val': (- 123.456), 'shape': (1,), 'size': 1, 'units': 'kg', 'desc': 'test negative float', 'tags': {'openmdao:indep_var', 'openmdao:allow_desvar'}}\n    expected_discrete = {'val': 9876543210, 'type': int, 'desc': 'large integer', 'tags': {'openmdao:indep_var'}}\n\n    class IDVComp(om.IndepVarComp):\n\n        def setup(self):\n            meta = self.add_output('y', val=(- 123.456), units='kg', desc='test negative float')\n            for (key, val) in expected.items():\n                assert (meta[key] == val), f'Expected {key}: {val} but got {key}: {meta[key]}'\n            meta = self.add_discrete_output('disc', val=9876543210, desc='large integer')\n            for (key, val) in expected_discrete.items():\n                assert (meta[key] == '???'), f'Expected {key}: {val} but got {key}: {meta[key]}'\n    prob = om.Problem()\n    prob.model.add_subsystem('idv', IDVComp())\n    prob.setup()", "ground_truth": "val", "quality_analysis": {"complexity_score": 6, "left_complexity": 5, "right_complexity": 1, "is_quality": true, "reason": "High quality assertion"}}
